nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2024 NVIDIA Corporation
Built on Thu_Mar_28_02:18:24_PDT_2024
Cuda compilation tools, release 12.4, V12.4.131
Build cuda_12.4.r12.4/compiler.34097967_0
Fri Mar 21 11:03:42 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 560.35.03              Driver Version: 560.35.03      CUDA Version: 12.6     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA L40S                    On  |   00000000:4F:00.0 Off |                    0 |
| N/A   22C    P8             31W /  315W |       1MiB /  46068MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA L40S                    On  |   00000000:52:00.0 Off |                    0 |
| N/A   25C    P8             31W /  315W |       1MiB /  46068MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|  No running processes found                                                             |
+-----------------------------------------------------------------------------------------+
============================= test session starts ==============================
platform linux -- Python 3.9.21, pytest-8.3.5, pluggy-1.5.0 -- /home/abcheng/miniconda3/envs/hw4/bin/python
cachedir: .pytest_cache
rootdir: /home/abcheng/workspace/llmsys_s25_hw4
configfile: pytest.ini
collecting ... collected 34 items / 30 deselected / 4 selected

tests/test_pipeline.py::test_clock_cycles_0 PASSED                       [ 25%]
tests/test_pipeline.py::test_clock_cycles_1 PASSED                       [ 50%]
tests/test_pipeline.py::test_split_module_0 PASSED                       [ 75%]
tests/test_pipeline.py::test_split_module_1 PASSED                       [100%]

======================= 4 passed, 30 deselected in 2.24s =======================
============================= test session starts ==============================
platform linux -- Python 3.9.21, pytest-8.3.5, pluggy-1.5.0 -- /home/abcheng/miniconda3/envs/hw4/bin/python
cachedir: .pytest_cache
rootdir: /home/abcheng/workspace/llmsys_s25_hw4
configfile: pytest.ini
collecting ... collected 34 items / 14 deselected / 20 selected

tests/test_pipeline.py::test_forward_0[1-1] FAILED                       [  5%]
tests/test_pipeline.py::test_forward_0[1-16] FAILED                      [ 10%]
tests/test_pipeline.py::test_forward_0[1-32] FAILED                      [ 15%]
tests/test_pipeline.py::test_forward_0[1-64] FAILED                      [ 20%]
tests/test_pipeline.py::test_forward_0[2-1] FAILED                       [ 25%]
tests/test_pipeline.py::test_forward_0[2-16] FAILED                      [ 30%]
tests/test_pipeline.py::test_forward_0[2-32] FAILED                      [ 35%]
tests/test_pipeline.py::test_forward_0[2-64] FAILED                      [ 40%]
tests/test_pipeline.py::test_forward_0[4-1] FAILED                       [ 45%]
tests/test_pipeline.py::test_forward_0[4-16] FAILED                      [ 50%]
tests/test_pipeline.py::test_forward_0[4-32] FAILED                      [ 55%]
tests/test_pipeline.py::test_forward_0[4-64] FAILED                      [ 60%]
tests/test_pipeline.py::test_forward_0[8-1] FAILED                       [ 65%]
tests/test_pipeline.py::test_forward_0[8-16] FAILED                      [ 70%]
tests/test_pipeline.py::test_forward_0[8-32] FAILED                      [ 75%]
tests/test_pipeline.py::test_forward_0[8-64] FAILED                      [ 80%]
tests/test_pipeline.py::test_forward_0[16-1] FAILED                      [ 85%]
tests/test_pipeline.py::test_forward_0[16-16] FAILED                     [ 90%]
tests/test_pipeline.py::test_forward_0[16-32] FAILED                     [ 95%]
tests/test_pipeline.py::test_forward_0[16-64] FAILED                     [100%]

=================================== FAILURES ===================================
_____________________________ test_forward_0[1-1] ______________________________

batch_size = 1, split_size = 1

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.3888, 0.4060, 0.4278, 0.5932, 0.4783]], grad_fn=<ToCopyBackward0>), tensor([[0.5000, 0.5000, 0.5000, 0.5000, 0.5000]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 1
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 1
x          = tensor([[-0.0906,  0.3105,  0.2770]], device='cuda:0')
y0         = tensor([[0.3888, 0.4060, 0.4278, 0.5932, 0.4783]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.5000, 0.5000, 0.5000, 0.5000, 0.5000]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-0.0906,  0.3105,  0.2770]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-0.0906,  0.3105,  0.2770]], device='cuda:0')
after: tensor([[-0.0906,  0.3105,  0.2770]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.0906,  0.3105,  0.2770]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.4169, 0.6249, 0.4697, 0.4720]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.4169, 0.6249, 0.4697, 0.4720]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4169, 0.6249, 0.4697, 0.4720]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.4169, 0.6249, 0.4697, 0.4720]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(0, 1)]
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.4169, 0.6249, 0.4697, 0.4720]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0., 0., 0., 0.]], device='cuda:1', grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[0., 0., 0., 0.]], device='cuda:1', grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.5000, 0.5000, 0.5000, 0.5000, 0.5000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.5000, 0.5000, 0.5000, 0.5000, 0.5000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5000, 0.5000, 0.5000, 0.5000, 0.5000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.5000, 0.5000, 0.5000, 0.5000, 0.5000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[1-16] _____________________________

batch_size = 16, split_size = 1

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4451, 0.4140, 0.4653, 0.5204, 0.4059],\n        [0.4154, 0.4327, 0.5138, 0.5221, 0.3786],\n        [0.4572, 0.4306, 0.4782, 0.5208, 0.4255],\n        [0.4559, 0.4127, 0.4784, 0.5296, 0.4170],\n        [0.4901, 0.4192, 0.4560, 0.5267, 0.4588],\n        [0.4447, 0.4071, 0.4806, 0.5297, 0.4022],\n        [0.4518, 0.4315, 0.4871, 0.5222, 0.4195],\n        [0.4834, 0.4292, 0.4693, 0.5259, 0.4548],\n        [0.4655, 0.4263, 0.4816, 0.5272, 0.4330],\n        [0.4450, 0.4313, 0.4936, 0.5227, 0.4116],\n        [0.4590, 0.4233, 0.4821, 0.5267, 0.4245],\n        [0.4742, 0.4199, 0.4659, 0.5266, 0.4407],\n        [0.4559, 0.4149, 0.4705, 0.5254, 0.4181],\n        [0.4635, 0.4383, 0.4905, 0.5242, 0.4353],\n        [0.4266, 0.4259, 0.4958, 0.5207, 0.3890],\n        [0.4507, 0.4073, 0.4657, 0.5256, 0.4094]], grad_fn=<ToCopyBackward0>), tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225],\n        [0.8137, 0.8981, 0.6225, 0.6225, 0.6225],\n        [0.8143, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225],\n        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 16
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 1
x          = tensor([[ 0.2333, -1.8500,  1.9897],
        [-1.9540,  1.3607,  0.0763],
        [-0.3750, -1.1188, -0.0220],
       ...-0.5355,  0.4534, -1.6729],
        [-1.1346, -0.0619,  0.8568],
        [ 1.2254, -0.0958,  1.4286]], device='cuda:0')
y0         = tensor([[0.4451, 0.4140, 0.4653, 0.5204, 0.4059],
        [0.4154, 0.4327, 0.5138, 0.5221, 0.3786],
        [0.4572, 0...[0.4266, 0.4259, 0.4958, 0.5207, 0.3890],
        [0.4507, 0.4073, 0.4657, 0.5256, 0.4094]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225],
        [0.8137, 0.8981, 0.6225, 0.6225, 0.6225],
        [0.8143, 0...[0.8142, 0.8963, 0.6225, 0.6225, 0.6225],
        [0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 0.2333, -1.8500,  1.9897]], device='cuda:0'), tensor([[-1.9540,  1.3607,  0.0763]], device='cuda:0'), tensor([[-0.3750, -1.1188, -0.0220]], device='cuda:0'), tensor([[ 1.2651,  1.7575, -0.0995]], device='cuda:0'), tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0'), tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0'), tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0'), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 0.2333, -1.8500,  1.9897]], device='cuda:0')
after: tensor([[ 0.2333, -1.8500,  1.9897]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.2333, -1.8500,  1.9897]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.3052, 0.6395, 0.5830, 0.6041]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.3052, 0.6395, 0.5830, 0.6041]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3052, 0.6395, 0.5830, 0.6041]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.3052, 0.6395, 0.5830, 0.6041]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.9540,  1.3607,  0.0763]], device='cuda:0'), tensor([[-0.3750, -1.1188, -0.0220]], device='cuda:0'), tensor([[ 1.2651,  1.7575, -0.0995]], device='cuda:0'), tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0'), tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0'), tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0'), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-1.9540,  1.3607,  0.0763]], device='cuda:0')
after: tensor([[-1.9540,  1.3607,  0.0763]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.9540,  1.3607,  0.0763]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.3052, 0.6395, 0.5830, 0.6041]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.0000, 1.7500, 0.0000, 1.7500]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[0.0000, 1.7500, 0.0000, 1.7500]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.2489, 0.5916, 0.3289, 0.2289]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.2489, 0.5916, 0.3289, 0.2289]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2489, 0.5916, 0.3289, 0.2289]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2489, 0.5916, 0.3289, 0.2289]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3750, -1.1188, -0.0220]], device='cuda:0'), tensor([[ 1.2651,  1.7575, -0.0995]], device='cuda:0'), tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0'), tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0'), tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0'), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[-0.3750, -1.1188, -0.0220]], device='cuda:0')
after: tensor([[-0.3750, -1.1188, -0.0220]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.3750, -1.1188, -0.0220]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.2489, 0.5916, 0.3289, 0.2289]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8520, 0.8520, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8520, 0.8520, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.3829, 0.4299, 0.5688, 0.6301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.3829, 0.4299, 0.5688, 0.6301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3829, 0.4299, 0.5688, 0.6301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3829, 0.4299, 0.5688, 0.6301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.2651,  1.7575, -0.0995]], device='cuda:0'), tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0'), tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0'), tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0'), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[ 1.2651,  1.7575, -0.0995]], device='cuda:0')
after: tensor([[ 1.2651,  1.7575, -0.0995]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.2651,  1.7575, -0.0995]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.3829, 0.4299, 0.5688, 0.6301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8137, 0.8981, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8137, 0.8981, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.5395, 0.5184, 0.5352, 0.4854]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.5395, 0.5184, 0.5352, 0.4854]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5395, 0.5184, 0.5352, 0.4854]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5395, 0.5184, 0.5352, 0.4854]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0'), tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0'), tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0'), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0')
after: tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.8051, -0.8776, -0.5781]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.5395, 0.5184, 0.5352, 0.4854]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8143, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8143, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.6232, 0.3283, 0.7151, 0.8137]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.6232, 0.3283, 0.7151, 0.8137]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6232, 0.3283, 0.7151, 0.8137]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6232, 0.3283, 0.7151, 0.8137]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0'), tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0'), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0')
after: tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([1, 3])
batch is tensor([[1.3203, 2.0761, 0.5708]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.6232, 0.3283, 0.7151, 0.8137]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.4966, 0.6170, 0.4997, 0.4011]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.4966, 0.6170, 0.4997, 0.4011]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4966, 0.6170, 0.4997, 0.4011]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4966, 0.6170, 0.4997, 0.4011]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0'), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0')
after: tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.5011, -0.1274, -0.3851]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.4966, 0.6170, 0.4997, 0.4011]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.3960, 0.4319, 0.5197, 0.5420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.3960, 0.4319, 0.5197, 0.5420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3960, 0.4319, 0.5197, 0.5420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3960, 0.4319, 0.5197, 0.5420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0'), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0')
after: tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.7503, -0.3585, -1.3831]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.3960, 0.4319, 0.5197, 0.5420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.5831, 0.2799, 0.6498, 0.7499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.5831, 0.2799, 0.6498, 0.7499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5831, 0.2799, 0.6498, 0.7499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5831, 0.2799, 0.6498, 0.7499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0'), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(8, 0), (7, 1)]
inputting microbatch 8 into partition 0
before moving to cuda:0: tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0')
after: tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0')
********************
observing microbatch 8
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.5126,  0.9726, -1.0623]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 8
********************
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.5831, 0.2799, 0.6498, 0.7499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 8 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 8, tensor([[0.5378, 0.3756, 0.5557, 0.5772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.5378, 0.3756, 0.5557, 0.5772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5378, 0.3756, 0.5557, 0.5772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5378, 0.3756, 0.5557, 0.5772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0'), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(9, 0), (8, 1)]
inputting microbatch 9 into partition 0
before moving to cuda:0: tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0')
after: tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0')
********************
observing microbatch 9
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.6620,  0.4311, -0.4098]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 9
********************
inputting microbatch 8 into partition 1
before moving to cuda:1: tensor([[0.5378, 0.3756, 0.5557, 0.5772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 8
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 8
********************
receiving microbatch 9 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 9, tensor([[0.3830, 0.4580, 0.4794, 0.4669]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.3830, 0.4580, 0.4794, 0.4669]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3830, 0.4580, 0.4794, 0.4669]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 8 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 8, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3830, 0.4580, 0.4794, 0.4669]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0'), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(10, 0), (9, 1)]
inputting microbatch 10 into partition 0
before moving to cuda:0: tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0')
after: tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0')
********************
observing microbatch 10
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.5017,  0.9570, -0.5878]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 10
********************
inputting microbatch 9 into partition 1
before moving to cuda:1: tensor([[0.3830, 0.4580, 0.4794, 0.4669]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 9
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 9
********************
receiving microbatch 10 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 10, tensor([[0.5029, 0.4344, 0.5400, 0.5387]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.5029, 0.4344, 0.5400, 0.5387]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5029, 0.4344, 0.5400, 0.5387]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 9 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 9, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5029, 0.4344, 0.5400, 0.5387]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0'), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(11, 0), (10, 1)]
inputting microbatch 11 into partition 0
before moving to cuda:0: tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0')
after: tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0')
********************
observing microbatch 11
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.1684, -0.1434, -0.3445]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 11
********************
inputting microbatch 10 into partition 1
before moving to cuda:1: tensor([[0.5029, 0.4344, 0.5400, 0.5387]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 10
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 10
********************
receiving microbatch 11 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 11, tensor([[0.5486, 0.4010, 0.6345, 0.6945]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.5486, 0.4010, 0.6345, 0.6945]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5486, 0.4010, 0.6345, 0.6945]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 10 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 10, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5486, 0.4010, 0.6345, 0.6945]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0'), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(12, 0), (11, 1)]
inputting microbatch 12 into partition 0
before moving to cuda:0: tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0')
after: tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0')
********************
observing microbatch 12
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.8634, -0.0079,  0.6196]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 12
********************
inputting microbatch 11 into partition 1
before moving to cuda:1: tensor([[0.5486, 0.4010, 0.6345, 0.6945]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 11
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 11
********************
receiving microbatch 12 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 12, tensor([[0.4511, 0.5378, 0.5759, 0.5791]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.4511, 0.5378, 0.5759, 0.5791]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4511, 0.5378, 0.5759, 0.5791]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 11 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 11, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4511, 0.5378, 0.5759, 0.5791]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0'), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(13, 0), (12, 1)]
inputting microbatch 13 into partition 0
before moving to cuda:0: tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0')
after: tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0')
********************
observing microbatch 13
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.5355,  0.4534, -1.6729]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 13
********************
inputting microbatch 12 into partition 1
before moving to cuda:1: tensor([[0.4511, 0.5378, 0.5759, 0.5791]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 12
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 12
********************
receiving microbatch 13 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 13, tensor([[0.4831, 0.3033, 0.5296, 0.5817]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.4831, 0.3033, 0.5296, 0.5817]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4831, 0.3033, 0.5296, 0.5817]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 12 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 12, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4831, 0.3033, 0.5296, 0.5817]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0'), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(14, 0), (13, 1)]
inputting microbatch 14 into partition 0
before moving to cuda:0: tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0')
after: tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0')
********************
observing microbatch 14
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.1346, -0.0619,  0.8568]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 14
********************
inputting microbatch 13 into partition 1
before moving to cuda:1: tensor([[0.4831, 0.3033, 0.5296, 0.5817]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 13
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 13
********************
receiving microbatch 14 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 14, tensor([[0.2657, 0.6079, 0.4299, 0.3715]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.2657, 0.6079, 0.4299, 0.3715]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2657, 0.6079, 0.4299, 0.3715]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 13 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 13, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2657, 0.6079, 0.4299, 0.3715]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')]
====================
schedule for this step is
[(15, 0), (14, 1)]
inputting microbatch 15 into partition 0
before moving to cuda:0: tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')
after: tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')
********************
observing microbatch 15
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.2254, -0.0958,  1.4286]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 15
********************
inputting microbatch 14 into partition 1
before moving to cuda:1: tensor([[0.2657, 0.6079, 0.4299, 0.3715]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 14
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 14
********************
receiving microbatch 15 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 15, tensor([[0.4277, 0.6281, 0.5790, 0.5574]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.4277, 0.6281, 0.5790, 0.5574]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4277, 0.6281, 0.5790, 0.5574]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 14 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 14, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4277, 0.6281, 0.5790, 0.5574]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(15, 1)]
inputting microbatch 15 into partition 1
before moving to cuda:1: tensor([[0.4277, 0.6281, 0.5790, 0.5574]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 15
current batch shape is torch.Size([1, 4])
batch is tensor([[0.8142, 0.8963, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 15
********************
receiving microbatch 15 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 15, tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8520, 0.8520, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8137, 0.8981, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8143, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8142, 0.8963, 0.6225, 0.6225, 0.6225]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[1-32] _____________________________

batch_size = 32, split_size = 1

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.7450, 0.4789, 0.5807, 0.5021, 0.5677],\n        [0.7429, 0.4726, 0.5887, 0.5036, 0.5807],\n        [0.7358, 0.4672, 0.5669, 0.5118, 0.5373],\n        [0.7387, 0.4649, 0.5822, 0.5088, 0.5683],\n        [0.7444, 0.5018, 0.5884, 0.4931, 0.5640],\n        [0.7455, 0.4806, 0.5967, 0.4998, 0.5905],\n        [0.7376, 0.4520, 0.5629, 0.5179, 0.5429],\n        [0.7317, 0.4683, 0.6041, 0.5065, 0.5883],\n        [0.7408, 0.4882, 0.5705, 0.5025, 0.5377],\n        [0.7368, 0.4737, 0.5935, 0.5043, 0.5774],\n        [0.7334, 0.4454, 0.5716, 0.5188, 0.5559],\n        [0.7309, 0.4752, 0.5785, 0.5082, 0.5429],\n        [0.7429, 0.4728, 0.5872, 0.5037, 0.5783],\n        [0.7387, 0.4784, 0.5847, 0.5035, 0.5637],\n        [0.7433, 0.4885, 0.5707, 0.5016, 0.5419],\n        [0.7452, 0.4990, 0.5672, 0.4990, 0.5310],\n        [0.7453, 0.4755, 0.5845, 0.5024, 0.5767],\n        [0.7484, 0.4757, 0.5713, 0.5039, 0.5604],\n        [0.7516, 0.4879, 0.5823, 0.4958, 0.5769],\n        [0.7370, 0.4738, 0.5690, 0.5088, 0.5383],\n        [0.7443, 0.4985, 0.5787, 0.4965, 0.5496],\n        [0.7359, 0.4712, 0.5741, 0.5092, 0.5462],\n        [0.7379, 0.4744, 0.5620, 0.5090, 0.5292],\n        [0.7422, 0.4708, 0.5632, 0.5096, 0.5392],\n        [0.7372, 0.4754, 0.5716, 0.5077, 0.5418],\n        [0.7446, 0.4783, 0.5828, 0.5020, 0.5706],\n        [0.7467, 0.4840, 0.5781, 0.5002, 0.5631],\n        [0.7362, 0.4698, 0.5617, 0.5111, 0.5291],\n        [0.7389, 0.4672, 0.5759, 0.5095, 0.5563],\n        [0.7423, 0.4877, 0.5939, 0.4978, 0.5780],\n        [0.7357, 0.4547, 0.5598, 0.5174, 0.5342],\n        [0.7441, 0.4787, 0.5664, 0.5056, 0.5427]], grad_fn=<ToCopyBackward0>), tensor([[0.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n        [0.0000, 0.9913, 0.9728, 0.9646, 0.9673],\n        [0.0000, 0.9906, 0.9706, 0.9621, 0.9651],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649],\n        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 32
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 1
x          = tensor([[ 0.1561, -0.8656, -0.6939],
        [-0.6882, -1.0273, -0.6289],
        [ 0.2987,  1.2519,  0.0408],
       ...-0.5190, -1.1903,  0.5986],
        [ 0.3247,  1.7594, -0.9045],
        [ 1.0067,  0.1451, -0.6305]], device='cuda:0')
y0         = tensor([[0.7450, 0.4789, 0.5807, 0.5021, 0.5677],
        [0.7429, 0.4726, 0.5887, 0.5036, 0.5807],
        [0.7358, 0...[0.7357, 0.4547, 0.5598, 0.5174, 0.5342],
        [0.7441, 0.4787, 0.5664, 0.5056, 0.5427]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.9913, 0.9728, 0.9646, 0.9673],
        [0.0000, 0...[0.0000, 0.9905, 0.9704, 0.9619, 0.9649],
        [0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 0.1561, -0.8656, -0.6939]], device='cuda:0'), tensor([[-0.6882, -1.0273, -0.6289]], device='cuda:0'), tensor([[0.2987, 1.2519, 0.0408]], device='cuda:0'), tensor([[-0.7466, -0.0225, -0.4180]], device='cuda:0'), tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0'), tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0'), tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0'), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 0.1561, -0.8656, -0.6939]], device='cuda:0')
after: tensor([[ 0.1561, -0.8656, -0.6939]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.1561, -0.8656, -0.6939]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.5243, 0.4284, 0.4977, 0.7037]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.5243, 0.4284, 0.4977, 0.7037]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5243, 0.4284, 0.4977, 0.7037]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.5243, 0.4284, 0.4977, 0.7037]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.6882, -1.0273, -0.6289]], device='cuda:0'), tensor([[0.2987, 1.2519, 0.0408]], device='cuda:0'), tensor([[-0.7466, -0.0225, -0.4180]], device='cuda:0'), tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0'), tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0'), tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0'), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-0.6882, -1.0273, -0.6289]], device='cuda:0')
after: tensor([[-0.6882, -1.0273, -0.6289]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.6882, -1.0273, -0.6289]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.5243, 0.4284, 0.4977, 0.7037]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[3.6893e+19, 1.8286e+00, 0.0000e+00, 1.8491e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[3.6893e+19, 1.8286e+00, 0.0000e+00, 1.8491e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.6126, 0.3437, 0.5209, 0.7105]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.6126, 0.3437, 0.5209, 0.7105]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6126, 0.3437, 0.5209, 0.7105]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>)
result shape is tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.6126, 0.3437, 0.5209, 0.7105]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[0.2987, 1.2519, 0.0408]], device='cuda:0'), tensor([[-0.7466, -0.0225, -0.4180]], device='cuda:0'), tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0'), tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0'), tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0'), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[0.2987, 1.2519, 0.0408]], device='cuda:0')
after: tensor([[0.2987, 1.2519, 0.0408]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([1, 3])
batch is tensor([[0.2987, 1.2519, 0.0408]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.6126, 0.3437, 0.5209, 0.7105]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[1., 1., 1., 1.]], device='cuda:1', grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([1, 4])
batch is tensor([[1., 1., 1., 1.]], device='cuda:1', grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.5433, 0.6936, 0.3821, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.5433, 0.6936, 0.3821, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5433, 0.6936, 0.3821, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5433, 0.6936, 0.3821, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.7466, -0.0225, -0.4180]], device='cuda:0'), tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0'), tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0'), tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0'), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[-0.7466, -0.0225, -0.4180]], device='cuda:0')
after: tensor([[-0.7466, -0.0225, -0.4180]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.7466, -0.0225, -0.4180]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.5433, 0.6936, 0.3821, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.6524, 0.4671, 0.4548, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.6524, 0.4671, 0.4548, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6524, 0.4671, 0.4548, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6524, 0.4671, 0.4548, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0'), tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0'), tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0'), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0')
after: tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.6229, -1.2121,  1.0542]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.6524, 0.4671, 0.4548, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.2454, 0.3301, 0.6583, 0.6076]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.2454, 0.3301, 0.6583, 0.6076]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2454, 0.3301, 0.6583, 0.6076]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2454, 0.3301, 0.6583, 0.6076]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0'), tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0'), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0')
after: tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.8851, -1.7841, -0.3104]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.2454, 0.3301, 0.6583, 0.6076]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.5519, 0.2305, 0.6086, 0.7253]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.5519, 0.2305, 0.6086, 0.7253]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5519, 0.2305, 0.6086, 0.7253]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5519, 0.2305, 0.6086, 0.7253]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0'), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0')
after: tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.0635,  1.3736, -1.2686]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.5519, 0.2305, 0.6086, 0.7253]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.7427, 0.7404, 0.2824, 0.6369]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.7427, 0.7404, 0.2824, 0.6369]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7427, 0.7404, 0.2824, 0.6369]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7427, 0.7404, 0.2824, 0.6369]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0'), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0')
after: tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([1, 3])
batch is tensor([[-2.3125, -0.2918,  1.3771]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.7427, 0.7404, 0.2824, 0.6369]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.6104, 0.2452, 0.6265, 0.5533]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.6104, 0.2452, 0.6265, 0.5533]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6104, 0.2452, 0.6265, 0.5533]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6104, 0.2452, 0.6265, 0.5533]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0'), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(8, 0), (7, 1)]
inputting microbatch 8 into partition 0
before moving to cuda:0: tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0')
after: tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0')
********************
observing microbatch 8
current batch shape is torch.Size([1, 3])
batch is tensor([[1.0501, 0.3493, 0.5926]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 8
********************
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.6104, 0.2452, 0.6265, 0.5533]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 8 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 8, tensor([[0.3276, 0.6012, 0.4949, 0.5575]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.3276, 0.6012, 0.4949, 0.5575]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3276, 0.6012, 0.4949, 0.5575]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3276, 0.6012, 0.4949, 0.5575]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0'), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(9, 0), (8, 1)]
inputting microbatch 9 into partition 0
before moving to cuda:0: tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0')
after: tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0')
********************
observing microbatch 9
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.1791, -0.4039,  0.6236]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 9
********************
inputting microbatch 8 into partition 1
before moving to cuda:1: tensor([[0.3276, 0.6012, 0.4949, 0.5575]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 8
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 8
********************
receiving microbatch 9 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 9, tensor([[0.5558, 0.3330, 0.5716, 0.6048]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.5558, 0.3330, 0.5716, 0.6048]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5558, 0.3330, 0.5716, 0.6048]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 8 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 8, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5558, 0.3330, 0.5716, 0.6048]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0'), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(10, 0), (9, 1)]
inputting microbatch 10 into partition 0
before moving to cuda:0: tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0')
after: tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0')
********************
observing microbatch 10
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.3091,  1.3811, -0.9790]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 10
********************
inputting microbatch 9 into partition 1
before moving to cuda:1: tensor([[0.5558, 0.3330, 0.5716, 0.6048]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 9
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 9
********************
receiving microbatch 10 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 10, tensor([[0.8255, 0.6503, 0.3068, 0.6235]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.8255, 0.6503, 0.3068, 0.6235]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8255, 0.6503, 0.3068, 0.6235]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 9 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 9, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8255, 0.6503, 0.3068, 0.6235]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0'), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(11, 0), (10, 1)]
inputting microbatch 11 into partition 0
before moving to cuda:0: tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0')
after: tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0')
********************
observing microbatch 11
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.2824,  1.1955,  1.4684]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 11
********************
inputting microbatch 10 into partition 1
before moving to cuda:1: tensor([[0.8255, 0.6503, 0.3068, 0.6235]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 10
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 10
********************
receiving microbatch 11 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 11, tensor([[0.4323, 0.5785, 0.5020, 0.4589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.4323, 0.5785, 0.5020, 0.4589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4323, 0.5785, 0.5020, 0.4589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 10 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 10, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4323, 0.5785, 0.5020, 0.4589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0'), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(12, 0), (11, 1)]
inputting microbatch 12 into partition 0
before moving to cuda:0: tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0')
after: tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0')
********************
observing microbatch 12
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.5811, -0.9367, -0.6293]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 12
********************
inputting microbatch 11 into partition 1
before moving to cuda:1: tensor([[0.4323, 0.5785, 0.5020, 0.4589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 11
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 11
********************
receiving microbatch 12 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 12, tensor([[0.6048, 0.3629, 0.5128, 0.7061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.6048, 0.3629, 0.5128, 0.7061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6048, 0.3629, 0.5128, 0.7061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 11 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 11, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6048, 0.3629, 0.5128, 0.7061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0'), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(13, 0), (12, 1)]
inputting microbatch 13 into partition 0
before moving to cuda:0: tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0')
after: tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0')
********************
observing microbatch 13
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.3477, -0.1661,  0.4654]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 13
********************
inputting microbatch 12 into partition 1
before moving to cuda:1: tensor([[0.6048, 0.3629, 0.5128, 0.7061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 12
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 12
********************
receiving microbatch 13 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 13, tensor([[0.4842, 0.4312, 0.5351, 0.5995]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.4842, 0.4312, 0.5351, 0.5995]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4842, 0.4312, 0.5351, 0.5995]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 12 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 12, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4842, 0.4312, 0.5351, 0.5995]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0'), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(14, 0), (13, 1)]
inputting microbatch 14 into partition 0
before moving to cuda:0: tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0')
after: tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0')
********************
observing microbatch 14
current batch shape is torch.Size([1, 3])
batch is tensor([[1.1034, 0.0110, 0.2001]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 14
********************
inputting microbatch 13 into partition 1
before moving to cuda:1: tensor([[0.4842, 0.4312, 0.5351, 0.5995]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 13
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 13
********************
receiving microbatch 14 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 14, tensor([[0.3476, 0.5777, 0.4913, 0.6013]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.3476, 0.5777, 0.4913, 0.6013]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3476, 0.5777, 0.4913, 0.6013]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 13 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 13, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3476, 0.5777, 0.4913, 0.6013]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0'), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(15, 0), (14, 1)]
inputting microbatch 15 into partition 0
before moving to cuda:0: tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0')
after: tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0')
********************
observing microbatch 15
current batch shape is torch.Size([1, 3])
batch is tensor([[ 2.0094, -0.0188,  0.6109]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 15
********************
inputting microbatch 14 into partition 1
before moving to cuda:1: tensor([[0.3476, 0.5777, 0.4913, 0.6013]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 14
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 14
********************
receiving microbatch 15 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 15, tensor([[0.2120, 0.6183, 0.5217, 0.5703]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.2120, 0.6183, 0.5217, 0.5703]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2120, 0.6183, 0.5217, 0.5703]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 14 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 14, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2120, 0.6183, 0.5217, 0.5703]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0'), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(16, 0), (15, 1)]
inputting microbatch 16 into partition 0
before moving to cuda:0: tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0')
after: tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0')
********************
observing microbatch 16
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.1891, -1.1797, -0.9864]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 16
********************
inputting microbatch 15 into partition 1
before moving to cuda:1: tensor([[0.2120, 0.6183, 0.5217, 0.5703]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 15
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 15
********************
receiving microbatch 16 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 16, tensor([[0.5858, 0.3749, 0.5022, 0.7349]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 16
result is tensor([[0.5858, 0.3749, 0.5022, 0.7349]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5858, 0.3749, 0.5022, 0.7349]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 15 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 15, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5858, 0.3749, 0.5022, 0.7349]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0'), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(17, 0), (16, 1)]
inputting microbatch 17 into partition 0
before moving to cuda:0: tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0')
after: tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0')
********************
observing microbatch 17
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.8093, -0.8973, -1.7053]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 17
********************
inputting microbatch 16 into partition 1
before moving to cuda:1: tensor([[0.5858, 0.3749, 0.5022, 0.7349]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 16
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 16
********************
receiving microbatch 17 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 17, tensor([[0.5674, 0.5243, 0.4165, 0.7581]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 17
result is tensor([[0.5674, 0.5243, 0.4165, 0.7581]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5674, 0.5243, 0.4165, 0.7581]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 16 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 16, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 16
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5674, 0.5243, 0.4165, 0.7581]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0'), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(18, 0), (17, 1)]
inputting microbatch 18 into partition 0
before moving to cuda:0: tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0')
after: tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0')
********************
observing microbatch 18
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.7704, -2.1757, -1.6103]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 18
********************
inputting microbatch 17 into partition 1
before moving to cuda:1: tensor([[0.5674, 0.5243, 0.4165, 0.7581]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 17
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 17
********************
receiving microbatch 18 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 18, tensor([[0.4813, 0.3392, 0.5297, 0.7996]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 18
result is tensor([[0.4813, 0.3392, 0.5297, 0.7996]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4813, 0.3392, 0.5297, 0.7996]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 17 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 17, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 17
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4813, 0.3392, 0.5297, 0.7996]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0'), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(19, 0), (18, 1)]
inputting microbatch 19 into partition 0
before moving to cuda:0: tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0')
after: tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0')
********************
observing microbatch 19
current batch shape is torch.Size([1, 3])
batch is tensor([[0.4396, 0.9628, 0.2917]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 19
********************
inputting microbatch 18 into partition 1
before moving to cuda:1: tensor([[0.4813, 0.3392, 0.5297, 0.7996]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 18
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 18
********************
receiving microbatch 19 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 19, tensor([[0.4753, 0.6551, 0.4238, 0.5497]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 19
result is tensor([[0.4753, 0.6551, 0.4238, 0.5497]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4753, 0.6551, 0.4238, 0.5497]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 18 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 18, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 18
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4753, 0.6551, 0.4238, 0.5497]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0'), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(20, 0), (19, 1)]
inputting microbatch 20 into partition 0
before moving to cuda:0: tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0')
after: tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0')
********************
observing microbatch 20
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.1294, -0.5866,  0.7787]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 20
********************
inputting microbatch 19 into partition 1
before moving to cuda:1: tensor([[0.4753, 0.6551, 0.4238, 0.5497]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 19
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 19
********************
receiving microbatch 20 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 20, tensor([[0.2521, 0.4649, 0.5863, 0.5922]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 20
result is tensor([[0.2521, 0.4649, 0.5863, 0.5922]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2521, 0.4649, 0.5863, 0.5922]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 19 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 19, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 19
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2521, 0.4649, 0.5863, 0.5922]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0'), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(21, 0), (20, 1)]
inputting microbatch 21 into partition 0
before moving to cuda:0: tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0')
after: tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0')
********************
observing microbatch 21
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.0349,  0.8275,  0.3918]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 21
********************
inputting microbatch 20 into partition 1
before moving to cuda:1: tensor([[0.2521, 0.4649, 0.5863, 0.5922]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 20
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 20
********************
receiving microbatch 21 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 21, tensor([[0.5150, 0.5990, 0.4452, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 21
result is tensor([[0.5150, 0.5990, 0.4452, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5150, 0.5990, 0.4452, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 20 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 20, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 20
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5150, 0.5990, 0.4452, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0'), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(22, 0), (21, 1)]
inputting microbatch 22 into partition 0
before moving to cuda:0: tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0')
after: tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0')
********************
observing microbatch 22
current batch shape is torch.Size([1, 3])
batch is tensor([[0.9831, 1.2054, 0.0155]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 22
********************
inputting microbatch 21 into partition 1
before moving to cuda:1: tensor([[0.5150, 0.5990, 0.4452, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 21
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 21
********************
receiving microbatch 22 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 22, tensor([[0.4559, 0.7311, 0.3803, 0.5536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 22
result is tensor([[0.4559, 0.7311, 0.3803, 0.5536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4559, 0.7311, 0.3803, 0.5536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 21 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 21, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 21
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4559, 0.7311, 0.3803, 0.5536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0'), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(23, 0), (22, 1)]
inputting microbatch 23 into partition 0
before moving to cuda:0: tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0')
after: tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0')
********************
observing microbatch 23
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.8662,  0.6226, -0.8302]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 23
********************
inputting microbatch 22 into partition 1
before moving to cuda:1: tensor([[0.4559, 0.7311, 0.3803, 0.5536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 22
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 22
********************
receiving microbatch 23 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 23, tensor([[0.5427, 0.6911, 0.3628, 0.6404]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 23
result is tensor([[0.5427, 0.6911, 0.3628, 0.6404]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5427, 0.6911, 0.3628, 0.6404]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 22 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 22, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 22
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5427, 0.6911, 0.3628, 0.6404]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0'), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(24, 0), (23, 1)]
inputting microbatch 24 into partition 0
before moving to cuda:0: tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0')
after: tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0')
********************
observing microbatch 24
current batch shape is torch.Size([1, 3])
batch is tensor([[0.3321, 0.7838, 0.3972]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 24
********************
inputting microbatch 23 into partition 1
before moving to cuda:1: tensor([[0.5427, 0.6911, 0.3628, 0.6404]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 23
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 23
********************
receiving microbatch 24 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 24, tensor([[0.4645, 0.6189, 0.4473, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 24
result is tensor([[0.4645, 0.6189, 0.4473, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4645, 0.6189, 0.4473, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 23 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 23, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 23
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4645, 0.6189, 0.4473, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0'), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(25, 0), (24, 1)]
inputting microbatch 25 into partition 0
before moving to cuda:0: tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0')
after: tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0')
********************
observing microbatch 25
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.0121, -0.9229, -0.6371]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 25
********************
inputting microbatch 24 into partition 1
before moving to cuda:1: tensor([[0.4645, 0.6189, 0.4473, 0.5522]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 24
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 24
********************
receiving microbatch 25 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 25, tensor([[0.5351, 0.4053, 0.5079, 0.7036]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 25
result is tensor([[0.5351, 0.4053, 0.5079, 0.7036]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5351, 0.4053, 0.5079, 0.7036]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 24 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 24, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 24
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5351, 0.4053, 0.5079, 0.7036]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0'), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(26, 0), (25, 1)]
inputting microbatch 26 into partition 0
before moving to cuda:0: tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0')
after: tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0')
********************
observing microbatch 26
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.5800, -0.9583, -0.7093]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 26
********************
inputting microbatch 25 into partition 1
before moving to cuda:1: tensor([[0.5351, 0.4053, 0.5079, 0.7036]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 25
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 25
********************
receiving microbatch 26 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 26, tensor([[0.4661, 0.4473, 0.5018, 0.7068]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 26
result is tensor([[0.4661, 0.4473, 0.5018, 0.7068]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4661, 0.4473, 0.5018, 0.7068]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 25 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 25, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 25
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4661, 0.4473, 0.5018, 0.7068]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0'), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(27, 0), (26, 1)]
inputting microbatch 27 into partition 0
before moving to cuda:0: tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0')
after: tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0')
********************
observing microbatch 27
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.7955,  1.4507, -0.0274]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 27
********************
inputting microbatch 26 into partition 1
before moving to cuda:1: tensor([[0.4661, 0.4473, 0.5018, 0.7068]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 26
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 26
********************
receiving microbatch 27 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 27, tensor([[0.5006, 0.7490, 0.3591, 0.5448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 27
result is tensor([[0.5006, 0.7490, 0.3591, 0.5448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5006, 0.7490, 0.3591, 0.5448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 26 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 26, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 26
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5006, 0.7490, 0.3591, 0.5448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0'), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(28, 0), (27, 1)]
inputting microbatch 28 into partition 0
before moving to cuda:0: tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0')
after: tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0')
********************
observing microbatch 28
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.2299,  0.3475, -0.3215]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 28
********************
inputting microbatch 27 into partition 1
before moving to cuda:1: tensor([[0.5006, 0.7490, 0.3591, 0.5448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 27
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 27
********************
receiving microbatch 28 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 28, tensor([[0.6002, 0.5535, 0.4293, 0.6258]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 28
result is tensor([[0.6002, 0.5535, 0.4293, 0.6258]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6002, 0.5535, 0.4293, 0.6258]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 27 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 27, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 27
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6002, 0.5535, 0.4293, 0.6258]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0'), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(29, 0), (28, 1)]
inputting microbatch 29 into partition 0
before moving to cuda:0: tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0')
after: tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0')
********************
observing microbatch 29
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.5190, -1.1903,  0.5986]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 29
********************
inputting microbatch 28 into partition 1
before moving to cuda:1: tensor([[0.6002, 0.5535, 0.4293, 0.6258]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 28
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 28
********************
receiving microbatch 29 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 29, tensor([[0.4261, 0.2803, 0.6289, 0.6419]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 29
result is tensor([[0.4261, 0.2803, 0.6289, 0.6419]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4261, 0.2803, 0.6289, 0.6419]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 28 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 28, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 28
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4261, 0.2803, 0.6289, 0.6419]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0'), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(30, 0), (29, 1)]
inputting microbatch 30 into partition 0
before moving to cuda:0: tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0')
after: tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0')
********************
observing microbatch 30
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.3247,  1.7594, -0.9045]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 30
********************
inputting microbatch 29 into partition 1
before moving to cuda:1: tensor([[0.4261, 0.2803, 0.6289, 0.6419]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 29
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 29
********************
receiving microbatch 30 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 30, tensor([[0.6835, 0.7876, 0.2783, 0.5917]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 30
result is tensor([[0.6835, 0.7876, 0.2783, 0.5917]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6835, 0.7876, 0.2783, 0.5917]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 29 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 29, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 29
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6835, 0.7876, 0.2783, 0.5917]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')]
====================
schedule for this step is
[(31, 0), (30, 1)]
inputting microbatch 31 into partition 0
before moving to cuda:0: tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')
after: tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')
********************
observing microbatch 31
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.0067,  0.1451, -0.6305]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 31
********************
inputting microbatch 30 into partition 1
before moving to cuda:1: tensor([[0.6835, 0.7876, 0.2783, 0.5917]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 30
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 30
********************
receiving microbatch 31 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 31, tensor([[0.4696, 0.6301, 0.4150, 0.6498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 31
result is tensor([[0.4696, 0.6301, 0.4150, 0.6498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4696, 0.6301, 0.4150, 0.6498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 30 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 30, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 30
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4696, 0.6301, 0.4150, 0.6498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(31, 1)]
inputting microbatch 31 into partition 1
before moving to cuda:1: tensor([[0.4696, 0.6301, 0.4150, 0.6498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 31
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 31
********************
receiving microbatch 31 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 31, tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 31
result is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0., 1., 1., 1., 1.]], device='cuda:1', grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9913, 0.9728, 0.9646, 0.9673]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9906, 0.9706, 0.9621, 0.9651]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9905, 0.9704, 0.9619, 0.9649]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[1-64] _____________________________

batch_size = 64, split_size = 1

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4458, 0.4323, 0.3411, 0.4779, 0.5772],\n        [0.4976, 0.4177, 0.4008, 0.5152, 0.5770],\n        [0.4847, 0.4247, 0.3837, 0.5038, 0.5808],\n        [0.4617, 0.3969, 0.3728, 0.4860, 0.6115],\n        [0.4663, 0.4408, 0.3566, 0.4918, 0.5694],\n        [0.4635, 0.4240, 0.3627, 0.4867, 0.5910],\n        [0.4997, 0.4238, 0.3998, 0.5198, 0.5629],\n        [0.4494, 0.4313, 0.3468, 0.4749, 0.5919],\n        [0.4692, 0.4073, 0.3755, 0.4939, 0.5948],\n        [0.4592, 0.4123, 0.3628, 0.4886, 0.5878],\n        [0.4916, 0.4055, 0.4004, 0.5125, 0.5839],\n        [0.5087, 0.4719, 0.3850, 0.5233, 0.5322],\n        [0.4854, 0.4313, 0.3811, 0.5039, 0.5765],\n        [0.4728, 0.4145, 0.3768, 0.4903, 0.6049],\n        [0.5055, 0.4093, 0.4138, 0.5223, 0.5777],\n        [0.4604, 0.4486, 0.3465, 0.4880, 0.5636],\n        [0.4717, 0.4052, 0.3790, 0.4959, 0.5954],\n        [0.4587, 0.4405, 0.3497, 0.4839, 0.5776],\n        [0.4734, 0.4215, 0.3730, 0.4986, 0.5778],\n        [0.4458, 0.3953, 0.3569, 0.4787, 0.6049],\n        [0.4746, 0.4066, 0.3817, 0.4955, 0.6005],\n        [0.5000, 0.4314, 0.3967, 0.5166, 0.5666],\n        [0.4497, 0.4328, 0.3448, 0.4796, 0.5791],\n        [0.5048, 0.4347, 0.4003, 0.5206, 0.5612]...795, 0.5025, 0.5779],\n        [0.5172, 0.4501, 0.4065, 0.5240, 0.5616],\n        [0.4676, 0.4134, 0.3715, 0.4899, 0.5977],\n        [0.5068, 0.4305, 0.4043, 0.5238, 0.5590],\n        [0.4392, 0.4297, 0.3380, 0.4699, 0.5883],\n        [0.5089, 0.4297, 0.4067, 0.5276, 0.5527],\n        [0.4651, 0.4053, 0.3723, 0.4905, 0.5986],\n        [0.4772, 0.3987, 0.3880, 0.5079, 0.5766],\n        [0.4799, 0.4343, 0.3736, 0.5036, 0.5652],\n        [0.4576, 0.4215, 0.3592, 0.4793, 0.6021],\n        [0.4876, 0.4154, 0.3909, 0.5123, 0.5695],\n        [0.5077, 0.4246, 0.4079, 0.5273, 0.5554],\n        [0.4733, 0.4416, 0.3629, 0.5025, 0.5512],\n        [0.4744, 0.4277, 0.3714, 0.4969, 0.5795],\n        [0.4665, 0.3962, 0.3773, 0.4991, 0.5846],\n        [0.4681, 0.4375, 0.3597, 0.4958, 0.5637],\n        [0.4914, 0.4076, 0.3988, 0.5216, 0.5560],\n        [0.4938, 0.4038, 0.4037, 0.5167, 0.5770],\n        [0.4990, 0.4472, 0.3876, 0.5135, 0.5613],\n        [0.4918, 0.4361, 0.3853, 0.5146, 0.5541],\n        [0.4747, 0.4173, 0.3764, 0.5003, 0.5788],\n        [0.4476, 0.4148, 0.3508, 0.4788, 0.5917],\n        [0.4532, 0.4403, 0.3443, 0.4820, 0.5733],\n        [0.4543, 0.4384, 0.3479, 0.4773, 0.5889]], grad_fn=<ToCopyBackward0>), tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311],\n        [0.9648, 0.9941, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311]...311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311],\n        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 64
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 1
x          = tensor([[-3.6009e-01,  1.1009e+00, -1.1513e+00],
        [ 8.4338e-02, -8.0483e-01,  3.5407e-01],
        [-4.3593e-01...2],
        [-5.8715e-01,  5.8630e-01, -1.4919e+00],
        [-1.8967e+00,  3.5906e-01, -8.2262e-01]], device='cuda:0')
y0         = tensor([[0.4458, 0.4323, 0.3411, 0.4779, 0.5772],
        [0.4976, 0.4177, 0.4008, 0.5152, 0.5770],
        [0.4847, 0...[0.4532, 0.4403, 0.3443, 0.4820, 0.5733],
        [0.4543, 0.4384, 0.3479, 0.4773, 0.5889]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311],
        [0.9648, 0.9941, 0.7311, 0.7311, 0.7311],
        [0.9654, 0...[0.9654, 0.9942, 0.7311, 0.7311, 0.7311],
        [0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-0.3601,  1.1009, -1.1513]], device='cuda:0'), tensor([[ 0.0843, -0.8048,  0.3541]], device='cuda:0'), tensor([[-0.4359, -0.5053, -0.0251]], device='cuda:0'), tensor([[-1.0500,  0.8642,  1.7203]], device='cuda:0'), tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0'), tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0'), tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0'), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-0.3601,  1.1009, -1.1513]], device='cuda:0')
after: tensor([[-0.3601,  1.1009, -1.1513]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.3601,  1.1009, -1.1513]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.8103, 0.6158, 0.6938, 0.3022]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.8103, 0.6158, 0.6938, 0.3022]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8103, 0.6158, 0.6938, 0.3022]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8103, 0.6158, 0.6938, 0.3022]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.0843, -0.8048,  0.3541]], device='cuda:0'), tensor([[-0.4359, -0.5053, -0.0251]], device='cuda:0'), tensor([[-1.0500,  0.8642,  1.7203]], device='cuda:0'), tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0'), tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0'), tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0'), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[ 0.0843, -0.8048,  0.3541]], device='cuda:0')
after: tensor([[ 0.0843, -0.8048,  0.3541]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.0843, -0.8048,  0.3541]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.8103, 0.6158, 0.6938, 0.3022]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9619, 0.9649, 0.0000, 0.9905]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9619, 0.9649, 0.0000, 0.9905]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.4935, 0.5600, 0.4662, 0.5436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.4935, 0.5600, 0.4662, 0.5436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4935, 0.5600, 0.4662, 0.5436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4935, 0.5600, 0.4662, 0.5436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4359, -0.5053, -0.0251]], device='cuda:0'), tensor([[-1.0500,  0.8642,  1.7203]], device='cuda:0'), tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0'), tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0'), tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0'), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[-0.4359, -0.5053, -0.0251]], device='cuda:0')
after: tensor([[-0.4359, -0.5053, -0.0251]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.4359, -0.5053, -0.0251]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.4935, 0.5600, 0.4662, 0.5436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9451, 0.9962, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9451, 0.9962, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.6080, 0.5733, 0.4838, 0.4414]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.6080, 0.5733, 0.4838, 0.4414]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6080, 0.5733, 0.4838, 0.4414]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6080, 0.5733, 0.4838, 0.4414]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.0500,  0.8642,  1.7203]], device='cuda:0'), tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0'), tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0'), tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0'), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[-1.0500,  0.8642,  1.7203]], device='cuda:0')
after: tensor([[-1.0500,  0.8642,  1.7203]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.0500,  0.8642,  1.7203]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.6080, 0.5733, 0.4838, 0.4414]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9648, 0.9941, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9648, 0.9941, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.7565, 0.7329, 0.6075, 0.5550]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.7565, 0.7329, 0.6075, 0.5550]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7565, 0.7329, 0.6075, 0.5550]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7565, 0.7329, 0.6075, 0.5550]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0'), tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0'), tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0'), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0')
after: tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.3370,  0.0385, -1.3935]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.7565, 0.7329, 0.6075, 0.5550]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.7159, 0.5415, 0.5726, 0.2964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.7159, 0.5415, 0.5726, 0.2964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7159, 0.5415, 0.5726, 0.2964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7159, 0.5415, 0.5726, 0.2964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0'), tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0'), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0')
after: tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.0568,  0.2834,  0.0014]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.7159, 0.5415, 0.5726, 0.2964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.7570, 0.6348, 0.5541, 0.3695]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.7570, 0.6348, 0.5541, 0.3695]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7570, 0.6348, 0.5541, 0.3695]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7570, 0.6348, 0.5541, 0.3695]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0'), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0')
after: tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.7443, -0.8445, -0.2963]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.7570, 0.6348, 0.5541, 0.3695]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.4415, 0.5119, 0.4998, 0.5373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.4415, 0.5119, 0.4998, 0.5373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4415, 0.5119, 0.4998, 0.5373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4415, 0.5119, 0.4998, 0.5373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0'), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0')
after: tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.7182,  0.7130, -0.4273]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.4415, 0.5119, 0.4998, 0.5373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.8512, 0.6555, 0.5817, 0.2621]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.8512, 0.6555, 0.5817, 0.2621]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8512, 0.6555, 0.5817, 0.2621]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8512, 0.6555, 0.5817, 0.2621]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0'), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(8, 0), (7, 1)]
inputting microbatch 8 into partition 0
before moving to cuda:0: tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0')
after: tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0')
********************
observing microbatch 8
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.3477,  0.4555,  0.7943]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 8
********************
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.8512, 0.6555, 0.5817, 0.2621]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 8 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 8, tensor([[0.6812, 0.6617, 0.5997, 0.5279]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.6812, 0.6617, 0.5997, 0.5279]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6812, 0.6617, 0.5997, 0.5279]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6812, 0.6617, 0.5997, 0.5279]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0'), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(9, 0), (8, 1)]
inputting microbatch 9 into partition 0
before moving to cuda:0: tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0')
after: tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0')
********************
observing microbatch 9
current batch shape is torch.Size([1, 3])
batch is tensor([[0.0159, 0.8853, 0.1643]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 9
********************
inputting microbatch 8 into partition 1
before moving to cuda:1: tensor([[0.6812, 0.6617, 0.5997, 0.5279]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 8
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 8
********************
receiving microbatch 9 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 9, tensor([[0.7172, 0.6511, 0.6727, 0.4851]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.7172, 0.6511, 0.6727, 0.4851]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7172, 0.6511, 0.6727, 0.4851]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 8 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 8, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7172, 0.6511, 0.6727, 0.4851]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0'), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(10, 0), (9, 1)]
inputting microbatch 10 into partition 0
before moving to cuda:0: tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0')
after: tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0')
********************
observing microbatch 10
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.3381, -0.3134,  0.9219]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 10
********************
inputting microbatch 9 into partition 1
before moving to cuda:1: tensor([[0.7172, 0.6511, 0.6727, 0.4851]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 9
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 9
********************
receiving microbatch 10 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 10, tensor([[0.5038, 0.6083, 0.5343, 0.6241]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.5038, 0.6083, 0.5343, 0.6241]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5038, 0.6083, 0.5343, 0.6241]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 9 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 9, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5038, 0.6083, 0.5343, 0.6241]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0'), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(11, 0), (10, 1)]
inputting microbatch 11 into partition 0
before moving to cuda:0: tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0')
after: tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0')
********************
observing microbatch 11
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.2228, -2.0761, -3.0976]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 11
********************
inputting microbatch 10 into partition 1
before moving to cuda:1: tensor([[0.5038, 0.6083, 0.5343, 0.6241]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 10
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 10
********************
receiving microbatch 11 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 11, tensor([[0.4637, 0.3283, 0.3542, 0.2189]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.4637, 0.3283, 0.3542, 0.2189]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4637, 0.3283, 0.3542, 0.2189]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 10 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 10, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4637, 0.3283, 0.3542, 0.2189]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0'), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(12, 0), (11, 1)]
inputting microbatch 12 into partition 0
before moving to cuda:0: tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0')
after: tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0')
********************
observing microbatch 12
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.5018, -0.6494, -0.3988]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 12
********************
inputting microbatch 11 into partition 1
before moving to cuda:1: tensor([[0.4637, 0.3283, 0.3542, 0.2189]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 11
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 11
********************
receiving microbatch 12 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 12, tensor([[0.6130, 0.5494, 0.4666, 0.3953]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.6130, 0.5494, 0.4666, 0.3953]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6130, 0.5494, 0.4666, 0.3953]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 11 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 11, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6130, 0.5494, 0.4666, 0.3953]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0'), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(13, 0), (12, 1)]
inputting microbatch 13 into partition 0
before moving to cuda:0: tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0')
after: tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0')
********************
observing microbatch 13
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.6489, -0.0616,  1.0158]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 13
********************
inputting microbatch 12 into partition 1
before moving to cuda:1: tensor([[0.6130, 0.5494, 0.4666, 0.3953]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 12
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 12
********************
receiving microbatch 13 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 13, tensor([[0.7401, 0.6712, 0.4709, 0.4290]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.7401, 0.6712, 0.4709, 0.4290]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7401, 0.6712, 0.4709, 0.4290]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 12 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 12, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7401, 0.6712, 0.4709, 0.4290]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0'), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(14, 0), (13, 1)]
inputting microbatch 14 into partition 0
before moving to cuda:0: tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0')
after: tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0')
********************
observing microbatch 14
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.4064, -0.9274,  0.8585]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 14
********************
inputting microbatch 13 into partition 1
before moving to cuda:1: tensor([[0.7401, 0.6712, 0.4709, 0.4290]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 13
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 13
********************
receiving microbatch 14 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 14, tensor([[0.4185, 0.5677, 0.4603, 0.6339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.4185, 0.5677, 0.4603, 0.6339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4185, 0.5677, 0.4603, 0.6339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 13 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 13, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4185, 0.5677, 0.4603, 0.6339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0'), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(15, 0), (14, 1)]
inputting microbatch 15 into partition 0
before moving to cuda:0: tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0')
after: tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0')
********************
observing microbatch 15
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.3106,  0.2031, -2.0819]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 15
********************
inputting microbatch 14 into partition 1
before moving to cuda:1: tensor([[0.4185, 0.5677, 0.4603, 0.6339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 14
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 14
********************
receiving microbatch 15 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 15, tensor([[0.7543, 0.5193, 0.6017, 0.2345]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.7543, 0.5193, 0.6017, 0.2345]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7543, 0.5193, 0.6017, 0.2345]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 14 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 14, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7543, 0.5193, 0.6017, 0.2345]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0'), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(16, 0), (15, 1)]
inputting microbatch 16 into partition 0
before moving to cuda:0: tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0')
after: tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0')
********************
observing microbatch 16
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.2913,  0.3939,  0.9347]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 16
********************
inputting microbatch 15 into partition 1
before moving to cuda:1: tensor([[0.7543, 0.5193, 0.6017, 0.2345]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 15
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 15
********************
receiving microbatch 16 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 16, tensor([[0.6628, 0.6629, 0.5932, 0.5508]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 16
result is tensor([[0.6628, 0.6629, 0.5932, 0.5508]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6628, 0.6629, 0.5932, 0.5508]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 15 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 15, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6628, 0.6629, 0.5932, 0.5508]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0'), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(17, 0), (16, 1)]
inputting microbatch 17 into partition 0
before moving to cuda:0: tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0')
after: tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0')
********************
observing microbatch 17
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.9788,  0.2675, -1.2521]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 17
********************
inputting microbatch 16 into partition 1
before moving to cuda:1: tensor([[0.6628, 0.6629, 0.5932, 0.5508]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 16
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 16
********************
receiving microbatch 17 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 17, tensor([[0.7884, 0.5772, 0.5697, 0.2536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 17
result is tensor([[0.7884, 0.5772, 0.5697, 0.2536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7884, 0.5772, 0.5697, 0.2536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 16 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 16, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 16
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7884, 0.5772, 0.5697, 0.2536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0'), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(18, 0), (17, 1)]
inputting microbatch 18 into partition 0
before moving to cuda:0: tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0')
after: tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0')
********************
observing microbatch 18
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.0976,  0.1243, -0.2405]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 18
********************
inputting microbatch 17 into partition 1
before moving to cuda:1: tensor([[0.7884, 0.5772, 0.5697, 0.2536]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 17
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 17
********************
receiving microbatch 18 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 18, tensor([[0.6373, 0.5882, 0.5907, 0.4603]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 18
result is tensor([[0.6373, 0.5882, 0.5907, 0.4603]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6373, 0.5882, 0.5907, 0.4603]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 17 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 17, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 17
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6373, 0.5882, 0.5907, 0.4603]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0'), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(19, 0), (18, 1)]
inputting microbatch 19 into partition 0
before moving to cuda:0: tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0')
after: tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0')
********************
observing microbatch 19
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.2012,  1.8557,  1.1789]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 19
********************
inputting microbatch 18 into partition 1
before moving to cuda:1: tensor([[0.6373, 0.5882, 0.5907, 0.4603]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 18
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 18
********************
receiving microbatch 19 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 19, tensor([[0.7961, 0.7442, 0.7554, 0.5624]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 19
result is tensor([[0.7961, 0.7442, 0.7554, 0.5624]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7961, 0.7442, 0.7554, 0.5624]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 18 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 18, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 18
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7961, 0.7442, 0.7554, 0.5624]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0'), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(20, 0), (19, 1)]
inputting microbatch 20 into partition 0
before moving to cuda:0: tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0')
after: tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0')
********************
observing microbatch 20
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.8039,  0.1479,  1.1342]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 20
********************
inputting microbatch 19 into partition 1
before moving to cuda:1: tensor([[0.7961, 0.7442, 0.7554, 0.5624]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 19
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 19
********************
receiving microbatch 20 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 20, tensor([[0.6784, 0.6690, 0.5363, 0.5255]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 20
result is tensor([[0.6784, 0.6690, 0.5363, 0.5255]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6784, 0.6690, 0.5363, 0.5255]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 19 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 19, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 19
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6784, 0.6690, 0.5363, 0.5255]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0'), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(21, 0), (20, 1)]
inputting microbatch 21 into partition 0
before moving to cuda:0: tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0')
after: tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0')
********************
observing microbatch 21
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.0482, -1.1262, -0.4308]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 21
********************
inputting microbatch 20 into partition 1
before moving to cuda:1: tensor([[0.6784, 0.6690, 0.5363, 0.5255]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 20
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 20
********************
receiving microbatch 21 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 21, tensor([[0.4902, 0.5056, 0.4328, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 21
result is tensor([[0.4902, 0.5056, 0.4328, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4902, 0.5056, 0.4328, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 20 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 20, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 20
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4902, 0.5056, 0.4328, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0'), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(22, 0), (21, 1)]
inputting microbatch 22 into partition 0
before moving to cuda:0: tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0')
after: tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0')
********************
observing microbatch 22
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.5857,  0.8606, -1.0168]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 22
********************
inputting microbatch 21 into partition 1
before moving to cuda:1: tensor([[0.4902, 0.5056, 0.4328, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 21
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 21
********************
receiving microbatch 22 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 22, tensor([[0.8030, 0.6130, 0.6563, 0.2993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 22
result is tensor([[0.8030, 0.6130, 0.6563, 0.2993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8030, 0.6130, 0.6563, 0.2993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 21 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 21, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 21
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8030, 0.6130, 0.6563, 0.2993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0'), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(23, 0), (22, 1)]
inputting microbatch 23 into partition 0
before moving to cuda:0: tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0')
after: tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0')
********************
observing microbatch 23
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.1916, -1.3434, -0.6254]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 23
********************
inputting microbatch 22 into partition 1
before moving to cuda:1: tensor([[0.8030, 0.6130, 0.6563, 0.2993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 22
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 22
********************
receiving microbatch 23 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 23, tensor([[0.4539, 0.4800, 0.4146, 0.4514]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 23
result is tensor([[0.4539, 0.4800, 0.4146, 0.4514]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4539, 0.4800, 0.4146, 0.4514]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 22 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 22, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 22
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4539, 0.4800, 0.4146, 0.4514]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0'), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(24, 0), (23, 1)]
inputting microbatch 24 into partition 0
before moving to cuda:0: tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0')
after: tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0')
********************
observing microbatch 24
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.3258, -1.2107,  0.4140]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 24
********************
inputting microbatch 23 into partition 1
before moving to cuda:1: tensor([[0.4539, 0.4800, 0.4146, 0.4514]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 23
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 23
********************
receiving microbatch 24 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 24, tensor([[0.4845, 0.5483, 0.3959, 0.5155]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 24
result is tensor([[0.4845, 0.5483, 0.3959, 0.5155]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4845, 0.5483, 0.3959, 0.5155]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 23 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 23, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 23
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4845, 0.5483, 0.3959, 0.5155]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0'), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(25, 0), (24, 1)]
inputting microbatch 25 into partition 0
before moving to cuda:0: tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0')
after: tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0')
********************
observing microbatch 25
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.4363,  0.5154, -1.5411]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 25
********************
inputting microbatch 24 into partition 1
before moving to cuda:1: tensor([[0.4845, 0.5483, 0.3959, 0.5155]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 24
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 24
********************
receiving microbatch 25 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 25, tensor([[0.7769, 0.5659, 0.6279, 0.2676]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 25
result is tensor([[0.7769, 0.5659, 0.6279, 0.2676]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7769, 0.5659, 0.6279, 0.2676]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 24 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 24, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 24
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7769, 0.5659, 0.6279, 0.2676]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0'), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(26, 0), (25, 1)]
inputting microbatch 26 into partition 0
before moving to cuda:0: tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0')
after: tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0')
********************
observing microbatch 26
current batch shape is torch.Size([1, 3])
batch is tensor([[0.7854, 1.4965, 0.5160]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 26
********************
inputting microbatch 25 into partition 1
before moving to cuda:1: tensor([[0.7769, 0.5659, 0.6279, 0.2676]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 25
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 25
********************
receiving microbatch 26 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 26, tensor([[0.6977, 0.6818, 0.7617, 0.5931]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 26
result is tensor([[0.6977, 0.6818, 0.7617, 0.5931]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6977, 0.6818, 0.7617, 0.5931]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 25 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 25, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 25
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6977, 0.6818, 0.7617, 0.5931]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0'), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(27, 0), (26, 1)]
inputting microbatch 27 into partition 0
before moving to cuda:0: tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0')
after: tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0')
********************
observing microbatch 27
current batch shape is torch.Size([1, 3])
batch is tensor([[1.8744, 0.4982, 2.3495]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 27
********************
inputting microbatch 26 into partition 1
before moving to cuda:1: tensor([[0.6977, 0.6818, 0.7617, 0.5931]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 26
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 26
********************
receiving microbatch 27 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 27, tensor([[0.3732, 0.6790, 0.6853, 0.8509]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 27
result is tensor([[0.3732, 0.6790, 0.6853, 0.8509]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3732, 0.6790, 0.6853, 0.8509]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 26 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 26, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 26
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3732, 0.6790, 0.6853, 0.8509]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0'), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(28, 0), (27, 1)]
inputting microbatch 28 into partition 0
before moving to cuda:0: tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0')
after: tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0')
********************
observing microbatch 28
current batch shape is torch.Size([1, 3])
batch is tensor([[-2.3860,  0.3091, -1.0062]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 28
********************
inputting microbatch 27 into partition 1
before moving to cuda:1: tensor([[0.3732, 0.6790, 0.6853, 0.8509]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 27
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 27
********************
receiving microbatch 28 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 28, tensor([[0.8745, 0.6235, 0.5058, 0.1752]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 28
result is tensor([[0.8745, 0.6235, 0.5058, 0.1752]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8745, 0.6235, 0.5058, 0.1752]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 27 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 27, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 27
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8745, 0.6235, 0.5058, 0.1752]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0'), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(29, 0), (28, 1)]
inputting microbatch 29 into partition 0
before moving to cuda:0: tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0')
after: tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0')
********************
observing microbatch 29
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.1125, -0.4036, -0.7186]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 29
********************
inputting microbatch 28 into partition 1
before moving to cuda:1: tensor([[0.8745, 0.6235, 0.5058, 0.1752]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 28
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 28
********************
receiving microbatch 29 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 29, tensor([[0.5899, 0.5347, 0.5306, 0.4166]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 29
result is tensor([[0.5899, 0.5347, 0.5306, 0.4166]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5899, 0.5347, 0.5306, 0.4166]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 28 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 28, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 28
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5899, 0.5347, 0.5306, 0.4166]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0'), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(30, 0), (29, 1)]
inputting microbatch 30 into partition 0
before moving to cuda:0: tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0')
after: tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0')
********************
observing microbatch 30
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.8468,  0.7020,  0.5259]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 30
********************
inputting microbatch 29 into partition 1
before moving to cuda:1: tensor([[0.5899, 0.5347, 0.5306, 0.4166]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 29
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 29
********************
receiving microbatch 30 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 30, tensor([[0.8358, 0.6961, 0.5638, 0.3436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 30
result is tensor([[0.8358, 0.6961, 0.5638, 0.3436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8358, 0.6961, 0.5638, 0.3436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 29 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 29, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 29
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8358, 0.6961, 0.5638, 0.3436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0'), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(31, 0), (30, 1)]
inputting microbatch 31 into partition 0
before moving to cuda:0: tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0')
after: tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0')
********************
observing microbatch 31
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.1796,  2.0061,  2.6030]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 31
********************
inputting microbatch 30 into partition 1
before moving to cuda:1: tensor([[0.8358, 0.6961, 0.5638, 0.3436]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 30
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 30
********************
receiving microbatch 31 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 31, tensor([[0.8373, 0.8118, 0.7218, 0.6212]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 31
result is tensor([[0.8373, 0.8118, 0.7218, 0.6212]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8373, 0.8118, 0.7218, 0.6212]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 30 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 30, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 30
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8373, 0.8118, 0.7218, 0.6212]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0'), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(32, 0), (31, 1)]
inputting microbatch 32 into partition 0
before moving to cuda:0: tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0')
after: tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0')
********************
observing microbatch 32
current batch shape is torch.Size([1, 3])
batch is tensor([[1.5087, 0.5545, 0.6490]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 32
********************
inputting microbatch 31 into partition 1
before moving to cuda:1: tensor([[0.8373, 0.8118, 0.7218, 0.6212]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 31
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 31
********************
receiving microbatch 32 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 32, tensor([[0.4956, 0.6193, 0.6930, 0.6905]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 32
result is tensor([[0.4956, 0.6193, 0.6930, 0.6905]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4956, 0.6193, 0.6930, 0.6905]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 31 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 31, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 31
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4956, 0.6193, 0.6930, 0.6905]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0'), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(33, 0), (32, 1)]
inputting microbatch 33 into partition 0
before moving to cuda:0: tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0')
after: tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0')
********************
observing microbatch 33
current batch shape is torch.Size([1, 3])
batch is tensor([[0.9532, 0.3414, 0.5773]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 33
********************
inputting microbatch 32 into partition 1
before moving to cuda:1: tensor([[0.4956, 0.6193, 0.6930, 0.6905]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 32
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 32
********************
receiving microbatch 33 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 33, tensor([[0.5346, 0.6168, 0.6464, 0.6354]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 33
result is tensor([[0.5346, 0.6168, 0.6464, 0.6354]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5346, 0.6168, 0.6464, 0.6354]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 32 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 32, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 32
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5346, 0.6168, 0.6464, 0.6354]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0'), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(34, 0), (33, 1)]
inputting microbatch 34 into partition 0
before moving to cuda:0: tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0')
after: tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0')
********************
observing microbatch 34
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.0121,  0.2628, -0.1375]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 34
********************
inputting microbatch 33 into partition 1
before moving to cuda:1: tensor([[0.5346, 0.6168, 0.6464, 0.6354]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 33
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 33
********************
receiving microbatch 34 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 34, tensor([[0.6613, 0.6035, 0.6016, 0.4584]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 34
result is tensor([[0.6613, 0.6035, 0.6016, 0.4584]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6613, 0.6035, 0.6016, 0.4584]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 33 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 33, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 33
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6613, 0.6035, 0.6016, 0.4584]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0'), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(35, 0), (34, 1)]
inputting microbatch 35 into partition 0
before moving to cuda:0: tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0')
after: tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0')
********************
observing microbatch 35
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.9586,  0.5137, -0.8663]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 35
********************
inputting microbatch 34 into partition 1
before moving to cuda:1: tensor([[0.6613, 0.6035, 0.6016, 0.4584]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 34
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 34
********************
receiving microbatch 35 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 35, tensor([[0.6187, 0.5626, 0.6807, 0.4698]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 35
result is tensor([[0.6187, 0.5626, 0.6807, 0.4698]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6187, 0.5626, 0.6807, 0.4698]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 34 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 34, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 34
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6187, 0.5626, 0.6807, 0.4698]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0'), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(36, 0), (35, 1)]
inputting microbatch 36 into partition 0
before moving to cuda:0: tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0')
after: tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0')
********************
observing microbatch 36
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.8615, -1.3925, -0.7509]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 36
********************
inputting microbatch 35 into partition 1
before moving to cuda:1: tensor([[0.6187, 0.5626, 0.6807, 0.4698]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 35
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 35
********************
receiving microbatch 36 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 36, tensor([[0.6807, 0.5215, 0.3198, 0.2506]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 36
result is tensor([[0.6807, 0.5215, 0.3198, 0.2506]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6807, 0.5215, 0.3198, 0.2506]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 35 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 35, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 35
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6807, 0.5215, 0.3198, 0.2506]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0'), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(37, 0), (36, 1)]
inputting microbatch 37 into partition 0
before moving to cuda:0: tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0')
after: tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0')
********************
observing microbatch 37
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.5678,  1.1224,  1.1898]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 37
********************
inputting microbatch 36 into partition 1
before moving to cuda:1: tensor([[0.6807, 0.5215, 0.3198, 0.2506]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 36
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 36
********************
receiving microbatch 37 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 37, tensor([[0.8324, 0.7360, 0.6210, 0.4365]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 37
result is tensor([[0.8324, 0.7360, 0.6210, 0.4365]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8324, 0.7360, 0.6210, 0.4365]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 36 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 36, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 36
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8324, 0.7360, 0.6210, 0.4365]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0'), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(38, 0), (37, 1)]
inputting microbatch 38 into partition 0
before moving to cuda:0: tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0')
after: tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0')
********************
observing microbatch 38
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.8765,  0.3020, -0.0317]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 38
********************
inputting microbatch 37 into partition 1
before moving to cuda:1: tensor([[0.8324, 0.7360, 0.6210, 0.4365]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 37
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 37
********************
receiving microbatch 38 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 38, tensor([[0.8219, 0.6529, 0.5181, 0.2914]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 38
result is tensor([[0.8219, 0.6529, 0.5181, 0.2914]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8219, 0.6529, 0.5181, 0.2914]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 37 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 37, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 37
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8219, 0.6529, 0.5181, 0.2914]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0'), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(39, 0), (38, 1)]
inputting microbatch 39 into partition 0
before moving to cuda:0: tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0')
after: tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0')
********************
observing microbatch 39
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.1832,  1.6599, -0.7060]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 39
********************
inputting microbatch 38 into partition 1
before moving to cuda:1: tensor([[0.8219, 0.6529, 0.5181, 0.2914]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 38
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 38
********************
receiving microbatch 39 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 39, tensor([[0.8049, 0.6539, 0.7660, 0.3901]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 39
result is tensor([[0.8049, 0.6539, 0.7660, 0.3901]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8049, 0.6539, 0.7660, 0.3901]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 38 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 38, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 38
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8049, 0.6539, 0.7660, 0.3901]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0'), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(40, 0), (39, 1)]
inputting microbatch 40 into partition 0
before moving to cuda:0: tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0')
after: tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0')
********************
observing microbatch 40
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.0760, -0.1060, -0.0929]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 40
********************
inputting microbatch 39 into partition 1
before moving to cuda:1: tensor([[0.8049, 0.6539, 0.7660, 0.3901]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 39
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 39
********************
receiving microbatch 40 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 40, tensor([[0.6049, 0.5817, 0.5594, 0.4790]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 40
result is tensor([[0.6049, 0.5817, 0.5594, 0.4790]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6049, 0.5817, 0.5594, 0.4790]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 39 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 39, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 39
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6049, 0.5817, 0.5594, 0.4790]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0'), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(41, 0), (40, 1)]
inputting microbatch 41 into partition 0
before moving to cuda:0: tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0')
after: tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0')
********************
observing microbatch 41
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.0132, -2.4289, -0.8263]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 41
********************
inputting microbatch 40 into partition 1
before moving to cuda:1: tensor([[0.6049, 0.5817, 0.5594, 0.4790]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 40
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 40
********************
receiving microbatch 41 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 41, tensor([[0.4583, 0.4347, 0.2465, 0.3301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 41
result is tensor([[0.4583, 0.4347, 0.2465, 0.3301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4583, 0.4347, 0.2465, 0.3301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 40 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 40, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 40
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4583, 0.4347, 0.2465, 0.3301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0'), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(42, 0), (41, 1)]
inputting microbatch 42 into partition 0
before moving to cuda:0: tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0')
after: tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0')
********************
observing microbatch 42
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.9581,  0.3029,  0.6847]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 42
********************
inputting microbatch 41 into partition 1
before moving to cuda:1: tensor([[0.4583, 0.4347, 0.2465, 0.3301]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 41
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 41
********************
receiving microbatch 42 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 42, tensor([[0.7270, 0.6623, 0.5536, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 42
result is tensor([[0.7270, 0.6623, 0.5536, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7270, 0.6623, 0.5536, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 41 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 41, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 41
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7270, 0.6623, 0.5536, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0'), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(43, 0), (42, 1)]
inputting microbatch 43 into partition 0
before moving to cuda:0: tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0')
after: tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0')
********************
observing microbatch 43
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.5770, -1.2722, -0.5180]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 43
********************
inputting microbatch 42 into partition 1
before moving to cuda:1: tensor([[0.7270, 0.6623, 0.5536, 0.4552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 42
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 42
********************
receiving microbatch 43 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 43, tensor([[0.4148, 0.4798, 0.4402, 0.5021]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 43
result is tensor([[0.4148, 0.4798, 0.4402, 0.5021]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4148, 0.4798, 0.4402, 0.5021]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 42 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 42, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 42
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4148, 0.4798, 0.4402, 0.5021]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0'), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(44, 0), (43, 1)]
inputting microbatch 44 into partition 0
before moving to cuda:0: tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0')
after: tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0')
********************
observing microbatch 44
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.3416,  1.2973, -0.6367]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 44
********************
inputting microbatch 43 into partition 1
before moving to cuda:1: tensor([[0.4148, 0.4798, 0.4402, 0.5021]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 43
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 43
********************
receiving microbatch 44 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 44, tensor([[0.8717, 0.6704, 0.6700, 0.2655]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 44
result is tensor([[0.8717, 0.6704, 0.6700, 0.2655]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8717, 0.6704, 0.6700, 0.2655]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 43 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 43, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 43
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8717, 0.6704, 0.6700, 0.2655]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0'), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(45, 0), (44, 1)]
inputting microbatch 45 into partition 0
before moving to cuda:0: tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0')
after: tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0')
********************
observing microbatch 45
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.0651, -1.2424, -0.6682]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 45
********************
inputting microbatch 44 into partition 1
before moving to cuda:1: tensor([[0.8717, 0.6704, 0.6700, 0.2655]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 44
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 44
********************
receiving microbatch 45 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 45, tensor([[0.3713, 0.4628, 0.4687, 0.5344]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 45
result is tensor([[0.3713, 0.4628, 0.4687, 0.5344]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3713, 0.4628, 0.4687, 0.5344]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 44 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 44, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 44
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3713, 0.4628, 0.4687, 0.5344]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0'), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(46, 0), (45, 1)]
inputting microbatch 46 into partition 0
before moving to cuda:0: tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0')
after: tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0')
********************
observing microbatch 46
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.4981,  0.6401,  0.9398]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 46
********************
inputting microbatch 45 into partition 1
before moving to cuda:1: tensor([[0.3713, 0.4628, 0.4687, 0.5344]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 45
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 45
********************
receiving microbatch 46 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 46, tensor([[0.7110, 0.6808, 0.6137, 0.5259]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 46
result is tensor([[0.7110, 0.6808, 0.6137, 0.5259]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7110, 0.6808, 0.6137, 0.5259]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 45 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 45, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 45
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7110, 0.6808, 0.6137, 0.5259]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0'), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(47, 0), (46, 1)]
inputting microbatch 47 into partition 0
before moving to cuda:0: tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0')
after: tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0')
********************
observing microbatch 47
current batch shape is torch.Size([1, 3])
batch is tensor([[1.5256, 0.6780, 0.6142]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 47
********************
inputting microbatch 46 into partition 1
before moving to cuda:1: tensor([[0.7110, 0.6808, 0.6137, 0.5259]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 46
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 46
********************
receiving microbatch 47 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 47, tensor([[0.5115, 0.6244, 0.7072, 0.6867]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 47
result is tensor([[0.5115, 0.6244, 0.7072, 0.6867]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5115, 0.6244, 0.7072, 0.6867]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 46 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 46, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 46
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5115, 0.6244, 0.7072, 0.6867]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0'), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(48, 0), (47, 1)]
inputting microbatch 48 into partition 0
before moving to cuda:0: tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0')
after: tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0')
********************
observing microbatch 48
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.2341, -0.3172, -0.9975]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 48
********************
inputting microbatch 47 into partition 1
before moving to cuda:1: tensor([[0.5115, 0.6244, 0.7072, 0.6867]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 47
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 47
********************
receiving microbatch 48 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 48, tensor([[0.5994, 0.5242, 0.5504, 0.3962]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 48
result is tensor([[0.5994, 0.5242, 0.5504, 0.3962]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5994, 0.5242, 0.5504, 0.3962]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 47 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 47, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 47
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5994, 0.5242, 0.5504, 0.3962]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0'), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(49, 0), (48, 1)]
inputting microbatch 49 into partition 0
before moving to cuda:0: tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0')
after: tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0')
********************
observing microbatch 49
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.8977,  0.4598,  0.4726]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 49
********************
inputting microbatch 48 into partition 1
before moving to cuda:1: tensor([[0.5994, 0.5242, 0.5504, 0.3962]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 48
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 48
********************
receiving microbatch 49 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 49, tensor([[0.8224, 0.6824, 0.5315, 0.3372]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 49
result is tensor([[0.8224, 0.6824, 0.5315, 0.3372]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8224, 0.6824, 0.5315, 0.3372]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 48 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 48, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 48
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8224, 0.6824, 0.5315, 0.3372]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0'), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(50, 0), (49, 1)]
inputting microbatch 50 into partition 0
before moving to cuda:0: tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0')
after: tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0')
********************
observing microbatch 50
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.8929, -0.1905, -0.0220]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 50
********************
inputting microbatch 49 into partition 1
before moving to cuda:1: tensor([[0.8224, 0.6824, 0.5315, 0.3372]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 49
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 49
********************
receiving microbatch 50 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 50, tensor([[0.4982, 0.5603, 0.5861, 0.5723]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 50
result is tensor([[0.4982, 0.5603, 0.5861, 0.5723]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4982, 0.5603, 0.5861, 0.5723]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 49 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 49, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 49
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4982, 0.5603, 0.5861, 0.5723]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0'), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(51, 0), (50, 1)]
inputting microbatch 51 into partition 0
before moving to cuda:0: tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0')
after: tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0')
********************
observing microbatch 51
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.1697, -1.0913, -0.4163]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 51
********************
inputting microbatch 50 into partition 1
before moving to cuda:1: tensor([[0.4982, 0.5603, 0.5861, 0.5723]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 50
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 50
********************
receiving microbatch 51 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 51, tensor([[0.3682, 0.4809, 0.4900, 0.5712]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 51
result is tensor([[0.3682, 0.4809, 0.4900, 0.5712]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3682, 0.4809, 0.4900, 0.5712]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 50 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 50, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 50
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3682, 0.4809, 0.4900, 0.5712]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0'), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(52, 0), (51, 1)]
inputting microbatch 52 into partition 0
before moving to cuda:0: tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0')
after: tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0')
********************
observing microbatch 52
current batch shape is torch.Size([1, 3])
batch is tensor([[ 9.5126e-01, -6.8164e-04, -1.8829e+00]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 52
********************
inputting microbatch 51 into partition 1
before moving to cuda:1: tensor([[0.3682, 0.4809, 0.4900, 0.5712]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 51
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 51
********************
receiving microbatch 52 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 52, tensor([[0.5981, 0.4852, 0.6318, 0.3643]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 52
result is tensor([[0.5981, 0.4852, 0.6318, 0.3643]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5981, 0.4852, 0.6318, 0.3643]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 51 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 51, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 51
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5981, 0.4852, 0.6318, 0.3643]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0'), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(53, 0), (52, 1)]
inputting microbatch 53 into partition 0
before moving to cuda:0: tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0')
after: tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0')
********************
observing microbatch 53
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.4066, -0.1209, -0.3743]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 53
********************
inputting microbatch 52 into partition 1
before moving to cuda:1: tensor([[0.5981, 0.4852, 0.6318, 0.3643]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 52
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 52
********************
receiving microbatch 53 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 53, tensor([[0.6661, 0.5798, 0.5380, 0.3985]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 53
result is tensor([[0.6661, 0.5798, 0.5380, 0.3985]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6661, 0.5798, 0.5380, 0.3985]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 52 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 52, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 52
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6661, 0.5798, 0.5380, 0.3985]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0'), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(54, 0), (53, 1)]
inputting microbatch 54 into partition 0
before moving to cuda:0: tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0')
after: tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0')
********************
observing microbatch 54
current batch shape is torch.Size([1, 3])
batch is tensor([[1.2703, 1.1493, 0.7004]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 54
********************
inputting microbatch 53 into partition 1
before moving to cuda:1: tensor([[0.6661, 0.5798, 0.5380, 0.3985]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 53
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 53
********************
receiving microbatch 54 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 54, tensor([[0.5979, 0.6601, 0.7445, 0.6651]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 54
result is tensor([[0.5979, 0.6601, 0.7445, 0.6651]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5979, 0.6601, 0.7445, 0.6651]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 53 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 53, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 53
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5979, 0.6601, 0.7445, 0.6651]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0'), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(55, 0), (54, 1)]
inputting microbatch 55 into partition 0
before moving to cuda:0: tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0')
after: tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0')
********************
observing microbatch 55
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.3008,  0.1416, -1.4171]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 55
********************
inputting microbatch 54 into partition 1
before moving to cuda:1: tensor([[0.5979, 0.6601, 0.7445, 0.6651]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 54
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 54
********************
receiving microbatch 55 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 55, tensor([[0.6657, 0.5311, 0.6148, 0.3498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 55
result is tensor([[0.6657, 0.5311, 0.6148, 0.3498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6657, 0.5311, 0.6148, 0.3498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 54 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 54, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 54
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6657, 0.5311, 0.6148, 0.3498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0'), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(56, 0), (55, 1)]
inputting microbatch 56 into partition 0
before moving to cuda:0: tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0')
after: tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0')
********************
observing microbatch 56
current batch shape is torch.Size([1, 3])
batch is tensor([[ 2.3357,  0.1047, -0.0927]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 56
********************
inputting microbatch 55 into partition 1
before moving to cuda:1: tensor([[0.6657, 0.5311, 0.6148, 0.3498]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 55
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 55
********************
receiving microbatch 56 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 56, tensor([[0.3767, 0.5398, 0.6848, 0.6968]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 56
result is tensor([[0.3767, 0.5398, 0.6848, 0.6968]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3767, 0.5398, 0.6848, 0.6968]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 55 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 55, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 55
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3767, 0.5398, 0.6848, 0.6968]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0'), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(57, 0), (56, 1)]
inputting microbatch 57 into partition 0
before moving to cuda:0: tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0')
after: tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0')
********************
observing microbatch 57
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.9126, -0.2556,  0.8186]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 57
********************
inputting microbatch 56 into partition 1
before moving to cuda:1: tensor([[0.3767, 0.5398, 0.6848, 0.6968]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 56
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 56
********************
receiving microbatch 57 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 57, tensor([[0.4500, 0.5936, 0.5697, 0.6664]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 57
result is tensor([[0.4500, 0.5936, 0.5697, 0.6664]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4500, 0.5936, 0.5697, 0.6664]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 56 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 56, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 56
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4500, 0.5936, 0.5697, 0.6664]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0'), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(58, 0), (57, 1)]
inputting microbatch 58 into partition 0
before moving to cuda:0: tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0')
after: tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0')
********************
observing microbatch 58
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.4345, -1.4330, -1.2299]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 58
********************
inputting microbatch 57 into partition 1
before moving to cuda:1: tensor([[0.4500, 0.5936, 0.5697, 0.6664]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 57
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 57
********************
receiving microbatch 58 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 58, tensor([[0.5408, 0.4622, 0.3817, 0.3261]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 58
result is tensor([[0.5408, 0.4622, 0.3817, 0.3261]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5408, 0.4622, 0.3817, 0.3261]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 57 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 57, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 57
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5408, 0.4622, 0.3817, 0.3261]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0'), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(59, 0), (58, 1)]
inputting microbatch 59 into partition 0
before moving to cuda:0: tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0')
after: tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0')
********************
observing microbatch 59
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.8053, -0.7028, -1.1817]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 59
********************
inputting microbatch 58 into partition 1
before moving to cuda:1: tensor([[0.5408, 0.4622, 0.3817, 0.3261]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 58
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 58
********************
receiving microbatch 59 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 59, tensor([[0.4923, 0.4783, 0.5307, 0.4393]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 59
result is tensor([[0.4923, 0.4783, 0.5307, 0.4393]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4923, 0.4783, 0.5307, 0.4393]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 58 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 58, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 58
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4923, 0.4783, 0.5307, 0.4393]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0'), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(60, 0), (59, 1)]
inputting microbatch 60 into partition 0
before moving to cuda:0: tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0')
after: tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0')
********************
observing microbatch 60
current batch shape is torch.Size([1, 3])
batch is tensor([[ 0.2568,  0.1704, -0.0362]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 60
********************
inputting microbatch 59 into partition 1
before moving to cuda:1: tensor([[0.4923, 0.4783, 0.5307, 0.4393]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 59
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 59
********************
receiving microbatch 60 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 60, tensor([[0.6174, 0.5962, 0.6014, 0.4993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 60
result is tensor([[0.6174, 0.5962, 0.6014, 0.4993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6174, 0.5962, 0.6014, 0.4993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 59 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 59, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 59
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6174, 0.5962, 0.6014, 0.4993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0'), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(61, 0), (60, 1)]
inputting microbatch 61 into partition 0
before moving to cuda:0: tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0')
after: tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0')
********************
observing microbatch 61
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.4467,  1.2972,  0.0741]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 61
********************
inputting microbatch 60 into partition 1
before moving to cuda:1: tensor([[0.6174, 0.5962, 0.6014, 0.4993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 60
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 60
********************
receiving microbatch 61 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 61, tensor([[0.7986, 0.6798, 0.6998, 0.4205]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 61
result is tensor([[0.7986, 0.6798, 0.6998, 0.4205]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7986, 0.6798, 0.6998, 0.4205]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 60 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 60, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 60
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7986, 0.6798, 0.6998, 0.4205]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0'), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(62, 0), (61, 1)]
inputting microbatch 62 into partition 0
before moving to cuda:0: tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0')
after: tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0')
********************
observing microbatch 62
current batch shape is torch.Size([1, 3])
batch is tensor([[-0.5871,  0.5863, -1.4919]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 62
********************
inputting microbatch 61 into partition 1
before moving to cuda:1: tensor([[0.7986, 0.6798, 0.6998, 0.4205]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 61
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 61
********************
receiving microbatch 62 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 62, tensor([[0.7935, 0.5759, 0.6291, 0.2589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 62
result is tensor([[0.7935, 0.5759, 0.6291, 0.2589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7935, 0.5759, 0.6291, 0.2589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 61 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 61, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 61
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7935, 0.5759, 0.6291, 0.2589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')]
====================
schedule for this step is
[(63, 0), (62, 1)]
inputting microbatch 63 into partition 0
before moving to cuda:0: tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')
after: tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')
********************
observing microbatch 63
current batch shape is torch.Size([1, 3])
batch is tensor([[-1.8967,  0.3591, -0.8226]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 63
********************
inputting microbatch 62 into partition 1
before moving to cuda:1: tensor([[0.7935, 0.5759, 0.6291, 0.2589]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 62
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 62
********************
receiving microbatch 63 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 63, tensor([[0.8468, 0.6230, 0.5333, 0.2199]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 63
result is tensor([[0.8468, 0.6230, 0.5333, 0.2199]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8468, 0.6230, 0.5333, 0.2199]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 62 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 62, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 62
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8468, 0.6230, 0.5333, 0.2199]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(63, 1)]
inputting microbatch 63 into partition 1
before moving to cuda:1: tensor([[0.8468, 0.6230, 0.5333, 0.2199]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 63
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9654, 0.9942, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 63
********************
receiving microbatch 63 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 63, tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 63
result is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9451, 0.9962, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9648, 0.9941, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9654, 0.9942, 0.7311, 0.7311, 0.7311]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[2-1] ______________________________

batch_size = 1, split_size = 2

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5893, 0.6656, 0.5038, 0.3590, 0.5206]], grad_fn=<ToCopyBackward0>), tensor([[0.9783, 0.0000, 0.6750, 0.6750, 0.6750]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 1
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 2
x          = tensor([[0.6887, 0.2851, 0.1558]], device='cuda:0')
y0         = tensor([[0.5893, 0.6656, 0.5038, 0.3590, 0.5206]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9783, 0.0000, 0.6750, 0.6750, 0.6750]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[0.6887, 0.2851, 0.1558]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[0.6887, 0.2851, 0.1558]], device='cuda:0')
after: tensor([[0.6887, 0.2851, 0.1558]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[0.6887, 0.2851, 0.1558]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.6310, 0.3149, 0.5899, 0.3392]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.6310, 0.3149, 0.5899, 0.3392]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6310, 0.3149, 0.5899, 0.3392]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.6310, 0.3149, 0.5899, 0.3392]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(0, 1)]
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.6310, 0.3149, 0.5899, 0.3392]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.7311, 0.7311, 0.9654, 0.9942]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[0.7311, 0.7311, 0.9654, 0.9942]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9783, 0.0000, 0.6750, 0.6750, 0.6750]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9783, 0.0000, 0.6750, 0.6750, 0.6750]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9783, 0.0000, 0.6750, 0.6750, 0.6750]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9783, 0.0000, 0.6750, 0.6750, 0.6750]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[2-16] _____________________________

batch_size = 16, split_size = 2

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4412, 0.5975, 0.6470, 0.3902, 0.3632],\n        [0.4286, 0.5671, 0.6185, 0.4270, 0.3965],\n        [0.4339, 0.5942, 0.6558, 0.4078, 0.3822],\n        [0.4317, 0.5908, 0.6540, 0.4157, 0.3894],\n        [0.4415, 0.6108, 0.6600, 0.3893, 0.3613],\n        [0.4311, 0.5843, 0.6457, 0.4092, 0.3848],\n        [0.4374, 0.5873, 0.6386, 0.4000, 0.3727],\n        [0.4418, 0.5923, 0.6373, 0.3942, 0.3648],\n        [0.4282, 0.5892, 0.6660, 0.3969, 0.3817],\n        [0.4342, 0.5847, 0.6451, 0.3915, 0.3709],\n        [0.4417, 0.5963, 0.6395, 0.3998, 0.3678],\n        [0.4310, 0.5893, 0.6510, 0.4235, 0.3948],\n        [0.4372, 0.5934, 0.6612, 0.3726, 0.3581],\n        [0.4280, 0.5793, 0.6509, 0.3926, 0.3776],\n        [0.4342, 0.5868, 0.6426, 0.4076, 0.3807],\n        [0.4283, 0.5904, 0.6676, 0.3980, 0.3825]], grad_fn=<ToCopyBackward0>), tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],\n        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508],\n        [0.9615, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.9133, 1.0000, 0.9996, 0.6508, 0.6508],\n        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508],\n        [0.9702, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.9605, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508],\n        [0.9580, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.9593, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508],\n        [0.9580, 0.0000, 0.0000, 0.6508, 0.6508],\n        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 16
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 2
x          = tensor([[ 1.5412,  0.2887,  0.6104],
        [ 0.5638, -1.5963, -1.9234],
        [-0.0050, -0.1067,  0.5389],
       ...-0.5696,  0.9331, -1.6955],
        [ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')
y0         = tensor([[0.4412, 0.5975, 0.6470, 0.3902, 0.3632],
        [0.4286, 0.5671, 0.6185, 0.4270, 0.3965],
        [0.4339, 0...[0.4342, 0.5868, 0.6426, 0.4076, 0.3807],
        [0.4283, 0.5904, 0.6676, 0.3980, 0.3825]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508],
        [0.9615, 0...[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 1.5412,  0.2887,  0.6104],
        [ 0.5638, -1.5963, -1.9234]], device='cuda:0'), tensor([[-0.0050, -0.1067,  0.5389],
        [-0.3253, -0.4273,  0.3574]], device='cuda:0'), tensor([[ 1.7444,  0.3595,  2.1052],
        [-0.0327, -0.1902, -0.6004]], device='cuda:0'), tensor([[ 1.0991, -0.1600, -0.3394],
        [ 1.8957, -0.1652,  0.2219]], device='cuda:0'), tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0'), tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0'), tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0'), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 1.5412,  0.2887,  0.6104],
        [ 0.5638, -1.5963, -1.9234]], device='cuda:0')
after: tensor([[ 1.5412,  0.2887,  0.6104],
        [ 0.5638, -1.5963, -1.9234]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.5412,  0.2887,  0.6104],
        [ 0.5638, -1.5963, -1.9234]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.7553, 0.5496, 0.6729, 0.6868],
        [0.4659, 0.4621, 0.3523, 0.7787]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.7553, 0.5496, 0.6729, 0.6868],
        [0.4659, 0.4621, 0.3523, 0.7787]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7553, 0.5496, 0.6729, 0.6868],
        [0.4659, 0.4621, 0.3523, 0.7787]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.7553, 0.5496, 0.6729, 0.6868],
        [0.4659, 0.4621, 0.3523, 0.7787]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.0050, -0.1067,  0.5389],
        [-0.3253, -0.4273,  0.3574]], device='cuda:0'), tensor([[ 1.7444,  0.3595,  2.1052],
        [-0.0327, -0.1902, -0.6004]], device='cuda:0'), tensor([[ 1.0991, -0.1600, -0.3394],
        [ 1.8957, -0.1652,  0.2219]], device='cuda:0'), tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0'), tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0'), tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0'), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-0.0050, -0.1067,  0.5389],
        [-0.3253, -0.4273,  0.3574]], device='cuda:0')
after: tensor([[-0.0050, -0.1067,  0.5389],
        [-0.3253, -0.4273,  0.3574]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.0050, -0.1067,  0.5389],
        [-0.3253, -0.4273,  0.3574]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.7553, 0.5496, 0.6729, 0.6868],
        [0.4659, 0.4621, 0.3523, 0.7787]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.0000e+00, 9.9054e-01, 9.7044e-01, 9.6185e-01],
        [9.6490e-01, 1.8655e+00, 1.0842e-19, 1.8662e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([2, 4])
batch is tensor([[0.0000e+00, 9.9054e-01, 9.7044e-01, 9.6185e-01],
        [9.6490e-01, 1.8655e+00, 1.0842e-19, 1.8662e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.6800, 0.6652, 0.5279, 0.5466],
        [0.6460, 0.6825, 0.4678, 0.5386]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.6800, 0.6652, 0.5279, 0.5466],
        [0.6460, 0.6825, 0.4678, 0.5386]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6800, 0.6652, 0.5279, 0.5466],
        [0.6460, 0.6825, 0.4678, 0.5386]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6800, 0.6652, 0.5279, 0.5466],
        [0.6460, 0.6825, 0.4678, 0.5386]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.7444,  0.3595,  2.1052],
        [-0.0327, -0.1902, -0.6004]], device='cuda:0'), tensor([[ 1.0991, -0.1600, -0.3394],
        [ 1.8957, -0.1652,  0.2219]], device='cuda:0'), tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0'), tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0'), tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0'), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[ 1.7444,  0.3595,  2.1052],
        [-0.0327, -0.1902, -0.6004]], device='cuda:0')
after: tensor([[ 1.7444,  0.3595,  2.1052],
        [-0.0327, -0.1902, -0.6004]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.7444,  0.3595,  2.1052],
        [-0.0327, -0.1902, -0.6004]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.6800, 0.6652, 0.5279, 0.5466],
        [0.6460, 0.6825, 0.4678, 0.5386]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9481, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9481, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.8518, 0.6662, 0.7289, 0.6480],
        [0.5759, 0.5694, 0.4831, 0.5955]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.8518, 0.6662, 0.7289, 0.6480],
        [0.5759, 0.5694, 0.4831, 0.5955]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8518, 0.6662, 0.7289, 0.6480],
        [0.5759, 0.5694, 0.4831, 0.5955]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8518, 0.6662, 0.7289, 0.6480],
        [0.5759, 0.5694, 0.4831, 0.5955]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0991, -0.1600, -0.3394],
        [ 1.8957, -0.1652,  0.2219]], device='cuda:0'), tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0'), tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0'), tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0'), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[ 1.0991, -0.1600, -0.3394],
        [ 1.8957, -0.1652,  0.2219]], device='cuda:0')
after: tensor([[ 1.0991, -0.1600, -0.3394],
        [ 1.8957, -0.1652,  0.2219]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.0991, -0.1600, -0.3394],
        [ 1.8957, -0.1652,  0.2219]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.8518, 0.6662, 0.7289, 0.6480],
        [0.5759, 0.5694, 0.4831, 0.5955]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[-1.0842e-19,  1.8654e+00, -2.0000e+00,  1.7877e+00],
        [-2.0000e+00,  1.7877e+00,  3.6893e+19,  1.8662e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([2, 4])
batch is tensor([[-1.0842e-19,  1.8654e+00, -2.0000e+00,  1.7877e+00],
        [-2.0000e+00,  1.7877e+00,  3.6893e+19,  1.8662e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.6567, 0.5114, 0.5750, 0.7024],
        [0.7376, 0.5068, 0.6451, 0.7567]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.6567, 0.5114, 0.5750, 0.7024],
        [0.7376, 0.5068, 0.6451, 0.7567]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6567, 0.5114, 0.5750, 0.7024],
        [0.7376, 0.5068, 0.6451, 0.7567]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6567, 0.5114, 0.5750, 0.7024],
        [0.7376, 0.5068, 0.6451, 0.7567]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0'), tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0'), tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0'), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0')
after: tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.1209,  0.9550, -0.5096],
        [ 0.4320,  0.6014, -0.9680]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.6567, 0.5114, 0.5750, 0.7024],
        [0.7376, 0.5068, 0.6451, 0.7567]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9133, 1.0000, 0.9996, 0.6508],
        [0.6508, 1.0000, 1.0000, 0.6508]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9133, 1.0000, 0.9996, 0.6508],
        [0.6508, 1.0000, 1.0000, 0.6508]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.5395, 0.6067, 0.5201, 0.3927],
        [0.5738, 0.4681, 0.5825, 0.6113]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.5395, 0.6067, 0.5201, 0.3927],
        [0.5738, 0.4681, 0.5825, 0.6113]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5395, 0.6067, 0.5201, 0.3927],
        [0.5738, 0.4681, 0.5825, 0.6113]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5395, 0.6067, 0.5201, 0.3927],
        [0.5738, 0.4681, 0.5825, 0.6113]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0'), tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0'), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0')
after: tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.9813, -0.5104,  0.7906],
        [-0.3678, -0.8630,  0.4378]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.5395, 0.6067, 0.5201, 0.3927],
        [0.5738, 0.4681, 0.5825, 0.6113]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9702, 0.6508, 0.6508, 0.9633],
        [0.6508, 0.6508, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9702, 0.6508, 0.6508, 0.9633],
        [0.6508, 0.6508, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.7783, 0.5684, 0.6354, 0.7633],
        [0.6467, 0.7072, 0.4249, 0.5591]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.7783, 0.5684, 0.6354, 0.7633],
        [0.6467, 0.7072, 0.4249, 0.5591]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7783, 0.5684, 0.6354, 0.7633],
        [0.6467, 0.7072, 0.4249, 0.5591]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.9605, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.9605, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9605, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9605, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7783, 0.5684, 0.6354, 0.7633],
        [0.6467, 0.7072, 0.4249, 0.5591]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0'), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0')
after: tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.2376,  1.8576, -0.4422],
        [-0.5696,  0.9331, -1.6955]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.7783, 0.5684, 0.6354, 0.7633],
        [0.6467, 0.7072, 0.4249, 0.5591]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9605, 0.6508, 0.6508, 0.8730],
        [0.9213, 0.6508, 0.6508, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9605, 0.6508, 0.6508, 0.8730],
        [0.9213, 0.6508, 0.6508, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.6254, 0.4782, 0.6974, 0.4852],
        [0.4548, 0.4579, 0.5217, 0.5057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.6254, 0.4782, 0.6974, 0.4852],
        [0.4548, 0.4579, 0.5217, 0.5057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6254, 0.4782, 0.6974, 0.4852],
        [0.4548, 0.4579, 0.5217, 0.5057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9605, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6254, 0.4782, 0.6974, 0.4852],
        [0.4548, 0.4579, 0.5217, 0.5057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')
after: tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.5043, -0.3262, -0.2837],
        [-1.1878,  0.9242, -0.3421]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.6254, 0.4782, 0.6974, 0.4852],
        [0.4548, 0.4579, 0.5217, 0.5057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9580, 0.6508, 0.6508, 0.9278],
        [0.6508, 0.6508, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9580, 0.6508, 0.6508, 0.9278],
        [0.6508, 0.6508, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.6309, 0.5663, 0.5180, 0.6499],
        [0.5517, 0.6275, 0.5173, 0.3806]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.6309, 0.5663, 0.5180, 0.6499],
        [0.5517, 0.6275, 0.5173, 0.3806]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6309, 0.5663, 0.5180, 0.6499],
        [0.5517, 0.6275, 0.5173, 0.3806]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.9593, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.9593, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9593, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9605, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9593, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6309, 0.5663, 0.5180, 0.6499],
        [0.5517, 0.6275, 0.5173, 0.3806]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(7, 1)]
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.6309, 0.5663, 0.5180, 0.6499],
        [0.5517, 0.6275, 0.5173, 0.3806]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9593, 0.6508, 0.6508, 0.8730],
        [0.9213, 0.6508, 0.6508, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9593, 0.6508, 0.6508, 0.8730],
        [0.9213, 0.6508, 0.6508, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9481, 0.0000, 0.9158, 0.6508, 0.6508],
        [0.9883, 0.9844, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9615, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9648, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9133, 1.0000, 0.9996, 0.6508, 0.6508],
        [1.0000, 0.0000, 1.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9702, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9633, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9605, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9593, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.8730, 0.9213, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9580, 0.0000, 0.0000, 0.6508, 0.6508],
        [0.9278, 0.0000, 0.0000, 0.6508, 0.6508]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[2-32] _____________________________

batch_size = 32, split_size = 2

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4358, 0.4282, 0.5066, 0.4210, 0.5721],\n        [0.4561, 0.4338, 0.5034, 0.4239, 0.5656],\n        [0.4288, 0.4208, 0.4859, 0.4195, 0.5810],\n        [0.4105, 0.4272, 0.5324, 0.4183, 0.5643],\n        [0.4507, 0.4315, 0.4996, 0.4228, 0.5677],\n        [0.4522, 0.4437, 0.5295, 0.4207, 0.5469],\n        [0.4286, 0.4261, 0.5081, 0.4201, 0.5746],\n        [0.4641, 0.4532, 0.5375, 0.4200, 0.5313],\n        [0.3974, 0.4086, 0.4891, 0.4170, 0.5993],\n        [0.4364, 0.4352, 0.5187, 0.4188, 0.5580],\n        [0.4344, 0.4290, 0.5091, 0.4204, 0.5702],\n        [0.4629, 0.4387, 0.5065, 0.4237, 0.5561],\n        [0.4176, 0.4121, 0.4777, 0.4198, 0.5960],\n        [0.4486, 0.4353, 0.5060, 0.4207, 0.5584],\n        [0.4050, 0.4138, 0.4962, 0.4176, 0.5918],\n        [0.3802, 0.4047, 0.4885, 0.4132, 0.6000],\n        [0.4530, 0.4382, 0.5119, 0.4214, 0.5552],\n        [0.4098, 0.4174, 0.4974, 0.4171, 0.5850],\n        [0.4429, 0.4337, 0.5095, 0.4203, 0.5617],\n        [0.4231, 0.4274, 0.5049, 0.4165, 0.5678],\n        [0.4442, 0.4314, 0.5046, 0.4215, 0.5669],\n        [0.4515, 0.4401, 0.5177, 0.4207, 0.5518],\n        [0.3658, 0.3943, 0.4805, 0.4137, 0.6163],\n        [0.4113, 0.4186, 0.5038, 0.4182, 0.5846],\n        [0.4644, 0.4431, 0.5197, 0.4236, 0.5511],\n        [0.4480, 0.4324, 0.5048, 0.4222, 0.5660],\n        [0.4329, 0.4266, 0.4991, 0.4195, 0.5722],\n        [0.4444, 0.4397, 0.5221, 0.4192, 0.5510],\n        [0.4365, 0.4318, 0.5066, 0.4187, 0.5628],\n        [0.4120, 0.4207, 0.4986, 0.4158, 0.5779],\n        [0.4467, 0.4220, 0.4802, 0.4239, 0.5861],\n        [0.4353, 0.4231, 0.4901, 0.4211, 0.5796]], grad_fn=<ToCopyBackward0>), tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],\n        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.3739, 0.9530, 0.8405, 0.9030, 0.7782],\n        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572],\n        [0.4285, 0.9781, 0.9107, 0.9510, 0.8564],\n        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480],\n        [0.4648, 0.9807, 0.9200, 0.9558, 0.8656],\n        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656],\n        [0.4763, 0.9814, 0.9224, 0.9563, 0.8666],\n        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685],\n        [0.4797, 0.9816, 0.9232, 0.9565, 0.8669],\n        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689],\n        [0.4807, 0.9816, 0.9234, 0.9565, 0.8669],\n        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689],\n        [0.4810, 0.9816, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4810, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4811, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4811, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4811, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4811, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4811, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4811, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689],\n        [0.4811, 0.9817, 0.9235, 0.9565, 0.8669],\n        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 32
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 2
x          = tensor([[ 0.1653, -0.8375, -0.9253],
        [-0.7734, -0.9315, -0.9884],
        [-0.5658, -0.3741,  1.0388],
       ... 0.5089,  0.5489,  1.2344],
        [-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')
y0         = tensor([[0.4358, 0.4282, 0.5066, 0.4210, 0.5721],
        [0.4561, 0.4338, 0.5034, 0.4239, 0.5656],
        [0.4288, 0...[0.4467, 0.4220, 0.4802, 0.4239, 0.5861],
        [0.4353, 0.4231, 0.4901, 0.4211, 0.5796]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.3739, 0...[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 0.1653, -0.8375, -0.9253],
        [-0.7734, -0.9315, -0.9884]], device='cuda:0'), tensor([[-0.5658, -0.3741,  1.0388],
        [ 2.2365,  1.0455, -0.8273]], device='cuda:0'), tensor([[-0.7928, -0.6348, -0.3674],
        [ 0.2483,  0.5633, -1.3504]], device='cuda:0'), tensor([[ 0.5185, -0.8240, -0.9555],
        [-0.1114,  1.7428, -1.0153]], device='cuda:0'), tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0'), tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0'), tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0'), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 0.1653, -0.8375, -0.9253],
        [-0.7734, -0.9315, -0.9884]], device='cuda:0')
after: tensor([[ 0.1653, -0.8375, -0.9253],
        [-0.7734, -0.9315, -0.9884]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.1653, -0.8375, -0.9253],
        [-0.7734, -0.9315, -0.9884]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.4528, 0.5365, 0.4404, 0.3926],
        [0.3936, 0.6494, 0.5586, 0.4544]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.4528, 0.5365, 0.4404, 0.3926],
        [0.3936, 0.6494, 0.5586, 0.4544]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4528, 0.5365, 0.4404, 0.3926],
        [0.3936, 0.6494, 0.5586, 0.4544]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.4528, 0.5365, 0.4404, 0.3926],
        [0.3936, 0.6494, 0.5586, 0.4544]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5658, -0.3741,  1.0388],
        [ 2.2365,  1.0455, -0.8273]], device='cuda:0'), tensor([[-0.7928, -0.6348, -0.3674],
        [ 0.2483,  0.5633, -1.3504]], device='cuda:0'), tensor([[ 0.5185, -0.8240, -0.9555],
        [-0.1114,  1.7428, -1.0153]], device='cuda:0'), tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0'), tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0'), tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0'), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-0.5658, -0.3741,  1.0388],
        [ 2.2365,  1.0455, -0.8273]], device='cuda:0')
after: tensor([[-0.5658, -0.3741,  1.0388],
        [ 2.2365,  1.0455, -0.8273]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.5658, -0.3741,  1.0388],
        [ 2.2365,  1.0455, -0.8273]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.4528, 0.5365, 0.4404, 0.3926],
        [0.3936, 0.6494, 0.5586, 0.4544]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[-3.6893e+19,  1.8645e+00, -2.0000e+00,  1.7877e+00],
        [-2.0000e+00,  1.7877e+00, -3.6893e+19,  1.8569e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([2, 4])
batch is tensor([[-3.6893e+19,  1.8645e+00, -2.0000e+00,  1.7877e+00],
        [-2.0000e+00,  1.7877e+00, -3.6893e+19,  1.8569e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.5962, 0.6151, 0.5561, 0.4169],
        [0.4166, 0.3271, 0.1594, 0.2181]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.5962, 0.6151, 0.5561, 0.4169],
        [0.4166, 0.3271, 0.1594, 0.2181]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5962, 0.6151, 0.5561, 0.4169],
        [0.4166, 0.3271, 0.1594, 0.2181]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5962, 0.6151, 0.5561, 0.4169],
        [0.4166, 0.3271, 0.1594, 0.2181]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.7928, -0.6348, -0.3674],
        [ 0.2483,  0.5633, -1.3504]], device='cuda:0'), tensor([[ 0.5185, -0.8240, -0.9555],
        [-0.1114,  1.7428, -1.0153]], device='cuda:0'), tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0'), tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0'), tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0'), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[-0.7928, -0.6348, -0.3674],
        [ 0.2483,  0.5633, -1.3504]], device='cuda:0')
after: tensor([[-0.7928, -0.6348, -0.3674],
        [ 0.2483,  0.5633, -1.3504]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.7928, -0.6348, -0.3674],
        [ 0.2483,  0.5633, -1.3504]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.5962, 0.6151, 0.5561, 0.4169],
        [0.4166, 0.3271, 0.1594, 0.2181]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9285, 0.6254, 0.0000, 0.9285],
        [0.6254, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9285, 0.6254, 0.0000, 0.9285],
        [0.6254, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.4372, 0.6516, 0.5610, 0.4428],
        [0.2831, 0.5659, 0.3463, 0.3339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.4372, 0.6516, 0.5610, 0.4428],
        [0.2831, 0.5659, 0.3463, 0.3339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4372, 0.6516, 0.5610, 0.4428],
        [0.2831, 0.5659, 0.3463, 0.3339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4372, 0.6516, 0.5610, 0.4428],
        [0.2831, 0.5659, 0.3463, 0.3339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5185, -0.8240, -0.9555],
        [-0.1114,  1.7428, -1.0153]], device='cuda:0'), tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0'), tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0'), tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0'), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[ 0.5185, -0.8240, -0.9555],
        [-0.1114,  1.7428, -1.0153]], device='cuda:0')
after: tensor([[ 0.5185, -0.8240, -0.9555],
        [-0.1114,  1.7428, -1.0153]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.5185, -0.8240, -0.9555],
        [-0.1114,  1.7428, -1.0153]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.4372, 0.6516, 0.5610, 0.4428],
        [0.2831, 0.5659, 0.3463, 0.3339]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.3739, 0.9530, 0.8405, 0.9030],
        [0.7782, 0.1967, 0.8998, 0.7423]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([2, 4])
batch is tensor([[0.3739, 0.9530, 0.8405, 0.9030],
        [0.7782, 0.1967, 0.8998, 0.7423]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.4711, 0.4925, 0.3967, 0.3709],
        [0.2094, 0.6340, 0.3354, 0.3104]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.4711, 0.4925, 0.3967, 0.3709],
        [0.2094, 0.6340, 0.3354, 0.3104]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4711, 0.4925, 0.3967, 0.3709],
        [0.2094, 0.6340, 0.3354, 0.3104]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4711, 0.4925, 0.3967, 0.3709],
        [0.2094, 0.6340, 0.3354, 0.3104]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0'), tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0'), tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0'), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0')
after: tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.0646, -1.3307,  0.1795],
        [ 0.3889,  0.6678, -0.2612]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.4711, 0.4925, 0.3967, 0.3709],
        [0.2094, 0.6340, 0.3354, 0.3104]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4285, 0.9781, 0.9107, 0.9510],
        [0.8564, 0.5112, 0.9669, 0.8957]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4285, 0.9781, 0.9107, 0.9510],
        [0.8564, 0.5112, 0.9669, 0.8957]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.6864, 0.3981, 0.3882, 0.3576],
        [0.4007, 0.5378, 0.3517, 0.3214]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.6864, 0.3981, 0.3882, 0.3576],
        [0.4007, 0.5378, 0.3517, 0.3214]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6864, 0.3981, 0.3882, 0.3576],
        [0.4007, 0.5378, 0.3517, 0.3214]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6864, 0.3981, 0.3882, 0.3576],
        [0.4007, 0.5378, 0.3517, 0.3214]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0'), tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0'), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0')
after: tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.2778, -0.5874, -0.8292],
        [-1.1325, -0.0069, -0.3275]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.6864, 0.3981, 0.3882, 0.3576],
        [0.4007, 0.5378, 0.3517, 0.3214]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4648, 0.9807, 0.9200, 0.9558],
        [0.8656, 0.5696, 0.9782, 0.9220]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4648, 0.9807, 0.9200, 0.9558],
        [0.8656, 0.5696, 0.9782, 0.9220]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.4473, 0.5274, 0.4158, 0.3758],
        [0.3608, 0.7025, 0.5689, 0.4381]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.4473, 0.5274, 0.4158, 0.3758],
        [0.3608, 0.7025, 0.5689, 0.4381]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4473, 0.5274, 0.4158, 0.3758],
        [0.3608, 0.7025, 0.5689, 0.4381]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4473, 0.5274, 0.4158, 0.3758],
        [0.3608, 0.7025, 0.5689, 0.4381]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0'), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0')
after: tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.2352, -1.4829,  0.6138],
        [-0.6823,  0.5745,  0.4387]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.4473, 0.5274, 0.4158, 0.3758],
        [0.3608, 0.7025, 0.5689, 0.4381]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4763, 0.9814, 0.9224, 0.9563],
        [0.8666, 0.5785, 0.9797, 0.9259]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4763, 0.9814, 0.9224, 0.9563],
        [0.8666, 0.5785, 0.9797, 0.9259]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.6703, 0.5524, 0.5654, 0.4422],
        [0.4233, 0.6574, 0.5023, 0.3863]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.6703, 0.5524, 0.5654, 0.4422],
        [0.4233, 0.6574, 0.5023, 0.3863]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6703, 0.5524, 0.5654, 0.4422],
        [0.4233, 0.6574, 0.5023, 0.3863]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6703, 0.5524, 0.5654, 0.4422],
        [0.4233, 0.6574, 0.5023, 0.3863]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0'), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0')
after: tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.0217, -1.1271, -0.2257],
        [ 1.5396,  0.0031,  1.8505]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.6703, 0.5524, 0.5654, 0.4422],
        [0.4233, 0.6574, 0.5023, 0.3863]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4797, 0.9816, 0.9232, 0.9565],
        [0.8669, 0.5797, 0.9799, 0.9264]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4797, 0.9816, 0.9232, 0.9565],
        [0.8669, 0.5797, 0.9799, 0.9264]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.6210, 0.4131, 0.3724, 0.3526],
        [0.7677, 0.3539, 0.3088, 0.2819]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.6210, 0.4131, 0.3724, 0.3526],
        [0.7677, 0.3539, 0.3088, 0.2819]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6210, 0.4131, 0.3724, 0.3526],
        [0.7677, 0.3539, 0.3088, 0.2819]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6210, 0.4131, 0.3724, 0.3526],
        [0.7677, 0.3539, 0.3088, 0.2819]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0'), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(8, 0), (7, 1)]
inputting microbatch 8 into partition 0
before moving to cuda:0: tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0')
after: tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0')
********************
observing microbatch 8
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.5521,  0.3706, -0.2293],
        [ 0.7376, -0.4332,  0.3437]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 8
********************
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.6210, 0.4131, 0.3724, 0.3526],
        [0.7677, 0.3539, 0.3088, 0.2819]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4807, 0.9816, 0.9234, 0.9565],
        [0.8669, 0.5798, 0.9799, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4807, 0.9816, 0.9234, 0.9565],
        [0.8669, 0.5798, 0.9799, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 8 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 8, tensor([[0.3730, 0.6452, 0.4799, 0.3871],
        [0.6037, 0.4588, 0.3834, 0.3422]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.3730, 0.6452, 0.4799, 0.3871],
        [0.6037, 0.4588, 0.3834, 0.3422]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3730, 0.6452, 0.4799, 0.3871],
        [0.6037, 0.4588, 0.3834, 0.3422]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3730, 0.6452, 0.4799, 0.3871],
        [0.6037, 0.4588, 0.3834, 0.3422]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0'), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(9, 0), (8, 1)]
inputting microbatch 9 into partition 0
before moving to cuda:0: tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0')
after: tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0')
********************
observing microbatch 9
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.2025,  0.1819, -0.1522],
        [ 0.2534,  0.9598,  1.1114]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 9
********************
inputting microbatch 8 into partition 1
before moving to cuda:1: tensor([[0.3730, 0.6452, 0.4799, 0.3871],
        [0.6037, 0.4588, 0.3834, 0.3422]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4810, 0.9816, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 8
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4810, 0.9816, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 8
********************
receiving microbatch 9 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 9, tensor([[0.4221, 0.5981, 0.4496, 0.3736],
        [0.5286, 0.5456, 0.3860, 0.3172]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.4221, 0.5981, 0.4496, 0.3736],
        [0.5286, 0.5456, 0.3860, 0.3172]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4221, 0.5981, 0.4496, 0.3736],
        [0.5286, 0.5456, 0.3860, 0.3172]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 8 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 8, tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4221, 0.5981, 0.4496, 0.3736],
        [0.5286, 0.5456, 0.3860, 0.3172]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0'), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(10, 0), (9, 1)]
inputting microbatch 10 into partition 0
before moving to cuda:0: tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0')
after: tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0')
********************
observing microbatch 10
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.3461, -0.4306, -0.4466],
        [-0.2779,  0.6245, -0.3719]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 10
********************
inputting microbatch 9 into partition 1
before moving to cuda:1: tensor([[0.4221, 0.5981, 0.4496, 0.3736],
        [0.5286, 0.5456, 0.3860, 0.3172]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4810, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 9
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4810, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 9
********************
receiving microbatch 10 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 10, tensor([[0.4370, 0.6043, 0.4931, 0.4069],
        [0.3506, 0.6203, 0.4288, 0.3610]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.4370, 0.6043, 0.4931, 0.4069],
        [0.3506, 0.6203, 0.4288, 0.3610]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4370, 0.6043, 0.4931, 0.4069],
        [0.3506, 0.6203, 0.4288, 0.3610]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 9 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 9, tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4370, 0.6043, 0.4931, 0.4069],
        [0.3506, 0.6203, 0.4288, 0.3610]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0'), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(11, 0), (10, 1)]
inputting microbatch 11 into partition 0
before moving to cuda:0: tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0')
after: tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0')
********************
observing microbatch 11
current batch shape is torch.Size([2, 3])
batch is tensor([[ 2.1009, -1.2387,  1.6976],
        [ 1.0619, -0.8995, -0.5993]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 11
********************
inputting microbatch 10 into partition 1
before moving to cuda:1: tensor([[0.4370, 0.6043, 0.4931, 0.4069],
        [0.3506, 0.6203, 0.4288, 0.3610]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 10
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 10
********************
receiving microbatch 11 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 11, tensor([[0.8534, 0.2682, 0.3051, 0.2955],
        [0.5578, 0.4180, 0.3472, 0.3420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.8534, 0.2682, 0.3051, 0.2955],
        [0.5578, 0.4180, 0.3472, 0.3420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8534, 0.2682, 0.3051, 0.2955],
        [0.5578, 0.4180, 0.3472, 0.3420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 10 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 10, tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8534, 0.2682, 0.3051, 0.2955],
        [0.5578, 0.4180, 0.3472, 0.3420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0'), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(12, 0), (11, 1)]
inputting microbatch 12 into partition 0
before moving to cuda:0: tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0')
after: tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0')
********************
observing microbatch 12
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.5166, -0.3195, -1.6593],
        [-0.4667, -0.5625, -0.6289]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 12
********************
inputting microbatch 11 into partition 1
before moving to cuda:1: tensor([[0.8534, 0.2682, 0.3051, 0.2955],
        [0.5578, 0.4180, 0.3472, 0.3420]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 11
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 11
********************
receiving microbatch 12 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 12, tensor([[0.2822, 0.6411, 0.4757, 0.4139],
        [0.4202, 0.6178, 0.5104, 0.4198]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.2822, 0.6411, 0.4757, 0.4139],
        [0.4202, 0.6178, 0.5104, 0.4198]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2822, 0.6411, 0.4757, 0.4139],
        [0.4202, 0.6178, 0.5104, 0.4198]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 11 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 11, tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2822, 0.6411, 0.4757, 0.4139],
        [0.4202, 0.6178, 0.5104, 0.4198]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0'), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(13, 0), (12, 1)]
inputting microbatch 13 into partition 0
before moving to cuda:0: tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0')
after: tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0')
********************
observing microbatch 13
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.1930, -0.1332,  0.3291],
        [ 0.1506,  0.9876, -0.2604]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 13
********************
inputting microbatch 12 into partition 1
before moving to cuda:1: tensor([[0.2822, 0.6411, 0.4757, 0.4139],
        [0.4202, 0.6178, 0.5104, 0.4198]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 12
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 12
********************
receiving microbatch 13 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 13, tensor([[0.5119, 0.5837, 0.4784, 0.3851],
        [0.3562, 0.5755, 0.3623, 0.3228]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.5119, 0.5837, 0.4784, 0.3851],
        [0.3562, 0.5755, 0.3623, 0.3228]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5119, 0.5837, 0.4784, 0.3851],
        [0.3562, 0.5755, 0.3623, 0.3228]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 12 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 12, tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5119, 0.5837, 0.4784, 0.3851],
        [0.3562, 0.5755, 0.3623, 0.3228]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0'), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(14, 0), (13, 1)]
inputting microbatch 14 into partition 0
before moving to cuda:0: tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0')
after: tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0')
********************
observing microbatch 14
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.1718,  0.6601,  0.5917],
        [ 0.5089,  0.5489,  1.2344]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 14
********************
inputting microbatch 13 into partition 1
before moving to cuda:1: tensor([[0.5119, 0.5837, 0.4784, 0.3851],
        [0.3562, 0.5755, 0.3623, 0.3228]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 13
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 13
********************
receiving microbatch 14 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 14, tensor([[0.4668, 0.5972, 0.4392, 0.3527],
        [0.5999, 0.5015, 0.3809, 0.3179]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.4668, 0.5972, 0.4392, 0.3527],
        [0.5999, 0.5015, 0.3809, 0.3179]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4668, 0.5972, 0.4392, 0.3527],
        [0.5999, 0.5015, 0.3809, 0.3179]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 13 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 13, tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4668, 0.5972, 0.4392, 0.3527],
        [0.5999, 0.5015, 0.3809, 0.3179]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')]
====================
schedule for this step is
[(15, 0), (14, 1)]
inputting microbatch 15 into partition 0
before moving to cuda:0: tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')
after: tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')
********************
observing microbatch 15
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.2180, -1.9816, -0.3576],
        [-0.5325, -0.8886,  0.1616]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 15
********************
inputting microbatch 14 into partition 1
before moving to cuda:1: tensor([[0.4668, 0.5972, 0.4392, 0.3527],
        [0.5999, 0.5015, 0.3809, 0.3179]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 14
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 14
********************
receiving microbatch 15 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 15, tensor([[0.5430, 0.6696, 0.6798, 0.5259],
        [0.5436, 0.6089, 0.5572, 0.4366]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.5430, 0.6696, 0.6798, 0.5259],
        [0.5436, 0.6089, 0.5572, 0.4366]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5430, 0.6696, 0.6798, 0.5259],
        [0.5436, 0.6089, 0.5572, 0.4366]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 14 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 14, tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5430, 0.6696, 0.6798, 0.5259],
        [0.5436, 0.6089, 0.5572, 0.4366]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(15, 1)]
inputting microbatch 15 into partition 1
before moving to cuda:1: tensor([[0.5430, 0.6696, 0.6798, 0.5259],
        [0.5436, 0.6089, 0.5572, 0.4366]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 15
current batch shape is torch.Size([2, 4])
batch is tensor([[0.4811, 0.9817, 0.9235, 0.9565],
        [0.8669, 0.5799, 0.9800, 0.9265]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 15
********************
receiving microbatch 15 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 15, tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.0000, 0.0000, 0.9285, 0.6254],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3739, 0.9530, 0.8405, 0.9030, 0.7782],
        [0.1967, 0.8998, 0.7423, 0.7166, 0.6572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4285, 0.9781, 0.9107, 0.9510, 0.8564],
        [0.5112, 0.9669, 0.8957, 0.9135, 0.8480]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4648, 0.9807, 0.9200, 0.9558, 0.8656],
        [0.5696, 0.9782, 0.9220, 0.9401, 0.8656]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4763, 0.9814, 0.9224, 0.9563, 0.8666],
        [0.5785, 0.9797, 0.9259, 0.9440, 0.8685]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4797, 0.9816, 0.9232, 0.9565, 0.8669],
        [0.5797, 0.9799, 0.9264, 0.9445, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4807, 0.9816, 0.9234, 0.9565, 0.8669],
        [0.5798, 0.9799, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9816, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4810, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4811, 0.9817, 0.9235, 0.9565, 0.8669],
        [0.5799, 0.9800, 0.9265, 0.9446, 0.8689]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[2-64] _____________________________

batch_size = 64, split_size = 2

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5829, 0.6384, 0.4916, 0.4783, 0.4564],\n        [0.5790, 0.6329, 0.4878, 0.4704, 0.4556],\n        [0.5858, 0.6353, 0.4883, 0.4878, 0.4543],\n        [0.5885, 0.6484, 0.5025, 0.4976, 0.4583],\n        [0.5674, 0.6069, 0.4760, 0.4729, 0.4472],\n        [0.5718, 0.6018, 0.4602, 0.4591, 0.4447],\n        [0.5808, 0.5954, 0.4422, 0.4577, 0.4393],\n        [0.5784, 0.6040, 0.4520, 0.4529, 0.4441],\n        [0.5737, 0.6331, 0.4995, 0.4837, 0.4560],\n        [0.5626, 0.6218, 0.4940, 0.4645, 0.4553],\n        [0.5675, 0.6113, 0.4790, 0.4692, 0.4493],\n        [0.5796, 0.6118, 0.4645, 0.4690, 0.4465],\n        [0.5681, 0.5813, 0.4433, 0.4569, 0.4373],\n        [0.5834, 0.5829, 0.4190, 0.4366, 0.4336],\n        [0.5869, 0.6247, 0.4747, 0.4846, 0.4498],\n        [0.5917, 0.6294, 0.4684, 0.4709, 0.4513],\n        [0.5768, 0.5812, 0.4280, 0.4441, 0.4352],\n        [0.5693, 0.6259, 0.4926, 0.4710, 0.4549],\n        [0.5858, 0.6192, 0.4654, 0.4712, 0.4481],\n        [0.5829, 0.5919, 0.4329, 0.4489, 0.4373],\n        [0.5900, 0.6106, 0.4481, 0.4623, 0.4431],\n        [0.5731, 0.5913, 0.4431, 0.4459, 0.4404],\n        [0.5800, 0.5749, 0.4147, 0.4353, 0.4319],\n        [0.5701, 0.6321, 0.5038, 0.4862, 0.4562]...990, 0.4788, 0.4561],\n        [0.5604, 0.5907, 0.4589, 0.4482, 0.4431],\n        [0.5713, 0.5979, 0.4554, 0.4548, 0.4433],\n        [0.5685, 0.6240, 0.4908, 0.4691, 0.4545],\n        [0.5706, 0.6385, 0.5069, 0.4780, 0.4587],\n        [0.5751, 0.6272, 0.4879, 0.4742, 0.4540],\n        [0.5690, 0.6161, 0.4837, 0.4737, 0.4508],\n        [0.5783, 0.6148, 0.4682, 0.4665, 0.4483],\n        [0.5778, 0.6220, 0.4803, 0.4772, 0.4510],\n        [0.5848, 0.5940, 0.4371, 0.4604, 0.4374],\n        [0.5798, 0.6316, 0.4905, 0.4839, 0.4542],\n        [0.5689, 0.6092, 0.4712, 0.4590, 0.4487],\n        [0.5889, 0.6251, 0.4712, 0.4808, 0.4497],\n        [0.5565, 0.6277, 0.5098, 0.4701, 0.4585],\n        [0.5706, 0.6321, 0.4997, 0.4768, 0.4566],\n        [0.5767, 0.6339, 0.4942, 0.4773, 0.4560],\n        [0.5805, 0.5934, 0.4377, 0.4497, 0.4388],\n        [0.5757, 0.6312, 0.4927, 0.4775, 0.4552],\n        [0.5813, 0.5950, 0.4401, 0.4546, 0.4391],\n        [0.5627, 0.6092, 0.4805, 0.4636, 0.4499],\n        [0.5714, 0.6014, 0.4589, 0.4556, 0.4448],\n        [0.5848, 0.6109, 0.4508, 0.4522, 0.4453],\n        [0.5773, 0.6403, 0.5024, 0.4829, 0.4578],\n        [0.5864, 0.6311, 0.4818, 0.4841, 0.4527]], grad_fn=<ToCopyBackward0>), tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],\n        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515],\n        [0.9622, 0.9626, 0.9957, 0.9984, 0.6515],\n        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515],\n        [0.9638, 0.9642, 0.9959, 0.9985, 0.6515],\n        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]...960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515],\n        [0.9639, 0.9643, 0.9960, 0.9985, 0.6515],\n        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 64
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 2
x          = tensor([[-1.9652,  0.7930, -0.4078],
        [-1.6196,  1.3155, -0.4911],
        [-1.5206, -0.7315,  0.0798],
       ...-1.2193,  1.8877,  0.9821],
        [-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')
y0         = tensor([[0.5829, 0.6384, 0.4916, 0.4783, 0.4564],
        [0.5790, 0.6329, 0.4878, 0.4704, 0.4556],
        [0.5858, 0...[0.5773, 0.6403, 0.5024, 0.4829, 0.4578],
        [0.5864, 0.6311, 0.4818, 0.4841, 0.4527]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515],
        [0.9622, 0...[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-1.9652,  0.7930, -0.4078],
        [-1.6196,  1.3155, -0.4911]], device='cuda:0'), tensor([[-1.5206, -0.7315,  0.0798],
        [-2.5626, -0.6349, -0.3193]], device='cuda:0'), tensor([[ 1.3149, -1.8406, -0.0137],
        [ 0.7046, -0.2334,  0.4535]], device='cuda:0'), tensor([[ 0.5718, -0.6503,  1.5409],
        [-0.2325,  1.0137,  0.8257]], device='cuda:0'), tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0'), tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0'), tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0'), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-1.9652,  0.7930, -0.4078],
        [-1.6196,  1.3155, -0.4911]], device='cuda:0')
after: tensor([[-1.9652,  0.7930, -0.4078],
        [-1.6196,  1.3155, -0.4911]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.9652,  0.7930, -0.4078],
        [-1.6196,  1.3155, -0.4911]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.2772, 0.4361, 0.6769, 0.5258],
        [0.3162, 0.4200, 0.6132, 0.6014]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.2772, 0.4361, 0.6769, 0.5258],
        [0.3162, 0.4200, 0.6132, 0.6014]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2772, 0.4361, 0.6769, 0.5258],
        [0.3162, 0.4200, 0.6132, 0.6014]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.2772, 0.4361, 0.6769, 0.5258],
        [0.3162, 0.4200, 0.6132, 0.6014]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.5206, -0.7315,  0.0798],
        [-2.5626, -0.6349, -0.3193]], device='cuda:0'), tensor([[ 1.3149, -1.8406, -0.0137],
        [ 0.7046, -0.2334,  0.4535]], device='cuda:0'), tensor([[ 0.5718, -0.6503,  1.5409],
        [-0.2325,  1.0137,  0.8257]], device='cuda:0'), tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0'), tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0'), tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0'), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-1.5206, -0.7315,  0.0798],
        [-2.5626, -0.6349, -0.3193]], device='cuda:0')
after: tensor([[-1.5206, -0.7315,  0.0798],
        [-2.5626, -0.6349, -0.3193]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.5206, -0.7315,  0.0798],
        [-2.5626, -0.6349, -0.3193]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.2772, 0.4361, 0.6769, 0.5258],
        [0.3162, 0.4200, 0.6132, 0.6014]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9446, 0.8689, 0.4811, 0.9817],
        [0.9235, 0.9565, 0.8669, 0.5799]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9446, 0.8689, 0.4811, 0.9817],
        [0.9235, 0.9565, 0.8669, 0.5799]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.3074, 0.4262, 0.6968, 0.4148],
        [0.1991, 0.4874, 0.7920, 0.3462]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.3074, 0.4262, 0.6968, 0.4148],
        [0.1991, 0.4874, 0.7920, 0.3462]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3074, 0.4262, 0.6968, 0.4148],
        [0.1991, 0.4874, 0.7920, 0.3462]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3074, 0.4262, 0.6968, 0.4148],
        [0.1991, 0.4874, 0.7920, 0.3462]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.3149, -1.8406, -0.0137],
        [ 0.7046, -0.2334,  0.4535]], device='cuda:0'), tensor([[ 0.5718, -0.6503,  1.5409],
        [-0.2325,  1.0137,  0.8257]], device='cuda:0'), tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0'), tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0'), tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0'), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[ 1.3149, -1.8406, -0.0137],
        [ 0.7046, -0.2334,  0.4535]], device='cuda:0')
after: tensor([[ 1.3149, -1.8406, -0.0137],
        [ 0.7046, -0.2334,  0.4535]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.3149, -1.8406, -0.0137],
        [ 0.7046, -0.2334,  0.4535]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.3074, 0.4262, 0.6968, 0.4148],
        [0.1991, 0.4874, 0.7920, 0.3462]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9365, 0.9372, 0.9872, 0.9981],
        [0.6515, 0.9393, 0.9395, 0.9886]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9365, 0.9372, 0.9872, 0.9981],
        [0.6515, 0.9393, 0.9395, 0.9886]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.5266, 0.4096, 0.4229, 0.5222],
        [0.5814, 0.3276, 0.4063, 0.6322]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.5266, 0.4096, 0.4229, 0.5222],
        [0.5814, 0.3276, 0.4063, 0.6322]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5266, 0.4096, 0.4229, 0.5222],
        [0.5814, 0.3276, 0.4063, 0.6322]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5266, 0.4096, 0.4229, 0.5222],
        [0.5814, 0.3276, 0.4063, 0.6322]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5718, -0.6503,  1.5409],
        [-0.2325,  1.0137,  0.8257]], device='cuda:0'), tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0'), tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0'), tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0'), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[ 0.5718, -0.6503,  1.5409],
        [-0.2325,  1.0137,  0.8257]], device='cuda:0')
after: tensor([[ 0.5718, -0.6503,  1.5409],
        [-0.2325,  1.0137,  0.8257]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.5718, -0.6503,  1.5409],
        [-0.2325,  1.0137,  0.8257]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.5266, 0.4096, 0.4229, 0.5222],
        [0.5814, 0.3276, 0.4063, 0.6322]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9622, 0.9626, 0.9957, 0.9984],
        [0.6515, 0.9547, 0.9501, 0.9937]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9622, 0.9626, 0.9957, 0.9984],
        [0.6515, 0.9547, 0.9501, 0.9937]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.6654, 0.2489, 0.4332, 0.5904],
        [0.5791, 0.2778, 0.4486, 0.6795]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.6654, 0.2489, 0.4332, 0.5904],
        [0.5791, 0.2778, 0.4486, 0.6795]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6654, 0.2489, 0.4332, 0.5904],
        [0.5791, 0.2778, 0.4486, 0.6795]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6654, 0.2489, 0.4332, 0.5904],
        [0.5791, 0.2778, 0.4486, 0.6795]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0'), tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0'), tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0'), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0')
after: tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.5830, -0.7515, -0.7676],
        [-0.0056,  0.9246, -1.1863]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.6654, 0.2489, 0.4332, 0.5904],
        [0.5791, 0.2778, 0.4486, 0.6795]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9638, 0.9642, 0.9959, 0.9985],
        [0.6515, 0.9560, 0.9512, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9638, 0.9642, 0.9959, 0.9985],
        [0.6515, 0.9560, 0.9512, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.3073, 0.4935, 0.6017, 0.4785],
        [0.3793, 0.4685, 0.4464, 0.6760]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.3073, 0.4935, 0.6017, 0.4785],
        [0.3793, 0.4685, 0.4464, 0.6760]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3073, 0.4935, 0.6017, 0.4785],
        [0.3793, 0.4685, 0.4464, 0.6760]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3073, 0.4935, 0.6017, 0.4785],
        [0.3793, 0.4685, 0.4464, 0.6760]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0'), tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0'), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0')
after: tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.7745, -0.8492, -0.2546],
        [-0.0735, -0.5982,  0.6384]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.3073, 0.4935, 0.6017, 0.4785],
        [0.3793, 0.4685, 0.4464, 0.6760]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.4860, 0.4138, 0.4375, 0.5756],
        [0.5095, 0.3368, 0.5181, 0.5413]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.4860, 0.4138, 0.4375, 0.5756],
        [0.5095, 0.3368, 0.5181, 0.5413]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4860, 0.4138, 0.4375, 0.5756],
        [0.5095, 0.3368, 0.5181, 0.5413]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4860, 0.4138, 0.4375, 0.5756],
        [0.5095, 0.3368, 0.5181, 0.5413]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0'), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0')
after: tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([2, 3])
batch is tensor([[ 2.5507, -2.1061,  1.2541],
        [ 0.2266,  1.3600,  2.5832]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.4860, 0.4138, 0.4375, 0.5756],
        [0.5095, 0.3368, 0.5181, 0.5413]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.7540, 0.2750, 0.2870, 0.5977],
        [0.7918, 0.1450, 0.3594, 0.7450]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.7540, 0.2750, 0.2870, 0.5977],
        [0.7918, 0.1450, 0.3594, 0.7450]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7540, 0.2750, 0.2870, 0.5977],
        [0.7918, 0.1450, 0.3594, 0.7450]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7540, 0.2750, 0.2870, 0.5977],
        [0.7918, 0.1450, 0.3594, 0.7450]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0'), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0')
after: tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.8589, -1.3491,  0.6739],
        [-2.2816,  1.2141,  0.7146]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.7540, 0.2750, 0.2870, 0.5977],
        [0.7918, 0.1450, 0.3594, 0.7450]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.4050, 0.3724, 0.6497, 0.4091],
        [0.3725, 0.3204, 0.6807, 0.5496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.4050, 0.3724, 0.6497, 0.4091],
        [0.3725, 0.3204, 0.6807, 0.5496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4050, 0.3724, 0.6497, 0.4091],
        [0.3725, 0.3204, 0.6807, 0.5496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4050, 0.3724, 0.6497, 0.4091],
        [0.3725, 0.3204, 0.6807, 0.5496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0'), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(8, 0), (7, 1)]
inputting microbatch 8 into partition 0
before moving to cuda:0: tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0')
after: tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0')
********************
observing microbatch 8
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.2317, -0.0220,  2.0215],
        [-0.3771,  0.3545, -0.8337]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 8
********************
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.4050, 0.3724, 0.6497, 0.4091],
        [0.3725, 0.3204, 0.6807, 0.5496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 8 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 8, tensor([[0.7803, 0.1904, 0.3214, 0.6954],
        [0.3592, 0.4591, 0.5188, 0.6005]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.7803, 0.1904, 0.3214, 0.6954],
        [0.3592, 0.4591, 0.5188, 0.6005]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7803, 0.1904, 0.3214, 0.6954],
        [0.3592, 0.4591, 0.5188, 0.6005]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7803, 0.1904, 0.3214, 0.6954],
        [0.3592, 0.4591, 0.5188, 0.6005]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0'), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(9, 0), (8, 1)]
inputting microbatch 9 into partition 0
before moving to cuda:0: tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0')
after: tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0')
********************
observing microbatch 9
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.9625, -0.0630,  0.7564],
        [ 0.2674,  0.2782,  1.9062]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 9
********************
inputting microbatch 8 into partition 1
before moving to cuda:1: tensor([[0.7803, 0.1904, 0.3214, 0.6954],
        [0.3592, 0.4591, 0.5188, 0.6005]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 8
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 8
********************
receiving microbatch 9 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 9, tensor([[0.4550, 0.3278, 0.5955, 0.5263],
        [0.7062, 0.2054, 0.4168, 0.6558]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.4550, 0.3278, 0.5955, 0.5263],
        [0.7062, 0.2054, 0.4168, 0.6558]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4550, 0.3278, 0.5955, 0.5263],
        [0.7062, 0.2054, 0.4168, 0.6558]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 8 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 8, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4550, 0.3278, 0.5955, 0.5263],
        [0.7062, 0.2054, 0.4168, 0.6558]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0'), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(10, 0), (9, 1)]
inputting microbatch 10 into partition 0
before moving to cuda:0: tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0')
after: tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0')
********************
observing microbatch 10
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.9613,  0.2905,  1.4942],
        [ 0.7311,  0.7961,  1.0210]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 10
********************
inputting microbatch 9 into partition 1
before moving to cuda:1: tensor([[0.4550, 0.3278, 0.5955, 0.5263],
        [0.7062, 0.2054, 0.4168, 0.6558]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 9
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 9
********************
receiving microbatch 10 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 10, tensor([[0.5506, 0.2550, 0.5694, 0.5652],
        [0.6808, 0.2508, 0.3456, 0.7245]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.5506, 0.2550, 0.5694, 0.5652],
        [0.6808, 0.2508, 0.3456, 0.7245]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5506, 0.2550, 0.5694, 0.5652],
        [0.6808, 0.2508, 0.3456, 0.7245]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 9 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 9, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5506, 0.2550, 0.5694, 0.5652],
        [0.6808, 0.2508, 0.3456, 0.7245]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0'), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(11, 0), (10, 1)]
inputting microbatch 11 into partition 0
before moving to cuda:0: tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0')
after: tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0')
********************
observing microbatch 11
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.9880,  0.8215,  2.9195],
        [-0.1252, -1.2936, -0.9519]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 11
********************
inputting microbatch 10 into partition 1
before moving to cuda:1: tensor([[0.5506, 0.2550, 0.5694, 0.5652],
        [0.6808, 0.2508, 0.3456, 0.7245]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 10
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 10
********************
receiving microbatch 11 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 11, tensor([[0.8459, 0.1288, 0.2999, 0.7509],
        [0.3105, 0.5204, 0.5778, 0.4595]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.8459, 0.1288, 0.2999, 0.7509],
        [0.3105, 0.5204, 0.5778, 0.4595]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8459, 0.1288, 0.2999, 0.7509],
        [0.3105, 0.5204, 0.5778, 0.4595]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 10 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 10, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8459, 0.1288, 0.2999, 0.7509],
        [0.3105, 0.5204, 0.5778, 0.4595]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0'), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(12, 0), (11, 1)]
inputting microbatch 12 into partition 0
before moving to cuda:0: tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0')
after: tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0')
********************
observing microbatch 12
current batch shape is torch.Size([2, 3])
batch is tensor([[ 1.0786,  0.3529,  0.0555],
        [ 0.9846, -0.3791, -0.1321]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 12
********************
inputting microbatch 11 into partition 1
before moving to cuda:1: tensor([[0.8459, 0.1288, 0.2999, 0.7509],
        [0.3105, 0.5204, 0.5778, 0.4595]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 11
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 11
********************
receiving microbatch 12 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 12, tensor([[0.5984, 0.3397, 0.3378, 0.7059],
        [0.5397, 0.3821, 0.3868, 0.6355]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.5984, 0.3397, 0.3378, 0.7059],
        [0.5397, 0.3821, 0.3868, 0.6355]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5984, 0.3397, 0.3378, 0.7059],
        [0.5397, 0.3821, 0.3868, 0.6355]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 11 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 11, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5984, 0.3397, 0.3378, 0.7059],
        [0.5397, 0.3821, 0.3868, 0.6355]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0'), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(13, 0), (12, 1)]
inputting microbatch 13 into partition 0
before moving to cuda:0: tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0')
after: tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0')
********************
observing microbatch 13
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.4175, -1.4943, -0.3694],
        [-0.1446, -1.8799, -0.4441]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 13
********************
inputting microbatch 12 into partition 1
before moving to cuda:1: tensor([[0.5984, 0.3397, 0.3378, 0.7059],
        [0.5397, 0.3821, 0.3868, 0.6355]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 12
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 12
********************
receiving microbatch 13 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 13, tensor([[0.2510, 0.4955, 0.7242, 0.3493],
        [0.3369, 0.4875, 0.6057, 0.4050]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.2510, 0.4955, 0.7242, 0.3493],
        [0.3369, 0.4875, 0.6057, 0.4050]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2510, 0.4955, 0.7242, 0.3493],
        [0.3369, 0.4875, 0.6057, 0.4050]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 12 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 12, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2510, 0.4955, 0.7242, 0.3493],
        [0.3369, 0.4875, 0.6057, 0.4050]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0'), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(14, 0), (13, 1)]
inputting microbatch 14 into partition 0
before moving to cuda:0: tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0')
after: tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0')
********************
observing microbatch 14
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.4528,  0.9633,  1.9467],
        [-0.7881,  0.1894,  1.1832]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 14
********************
inputting microbatch 13 into partition 1
before moving to cuda:1: tensor([[0.2510, 0.4955, 0.7242, 0.3493],
        [0.3369, 0.4875, 0.6057, 0.4050]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 13
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 13
********************
receiving microbatch 14 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 14, tensor([[0.6719, 0.1985, 0.4666, 0.6666],
        [0.5297, 0.2799, 0.5570, 0.5666]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.6719, 0.1985, 0.4666, 0.6666],
        [0.5297, 0.2799, 0.5570, 0.5666]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6719, 0.1985, 0.4666, 0.6666],
        [0.5297, 0.2799, 0.5570, 0.5666]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 13 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 13, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6719, 0.1985, 0.4666, 0.6666],
        [0.5297, 0.2799, 0.5570, 0.5666]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0'), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(15, 0), (14, 1)]
inputting microbatch 15 into partition 0
before moving to cuda:0: tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0')
after: tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0')
********************
observing microbatch 15
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.1321,  1.3053,  0.5812],
        [ 1.0853,  1.5861, -0.7594]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 15
********************
inputting microbatch 14 into partition 1
before moving to cuda:1: tensor([[0.6719, 0.1985, 0.4666, 0.6666],
        [0.5297, 0.2799, 0.5570, 0.5666]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 14
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 14
********************
receiving microbatch 15 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 15, tensor([[0.5999, 0.2839, 0.3923, 0.7253],
        [0.5603, 0.3800, 0.2871, 0.7923]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.5999, 0.2839, 0.3923, 0.7253],
        [0.5603, 0.3800, 0.2871, 0.7923]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5999, 0.2839, 0.3923, 0.7253],
        [0.5603, 0.3800, 0.2871, 0.7923]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 14 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 14, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5999, 0.2839, 0.3923, 0.7253],
        [0.5603, 0.3800, 0.2871, 0.7923]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0'), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(16, 0), (15, 1)]
inputting microbatch 16 into partition 0
before moving to cuda:0: tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0')
after: tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0')
********************
observing microbatch 16
current batch shape is torch.Size([2, 3])
batch is tensor([[ 2.4064, -0.9465, -0.3128],
        [ 0.7571,  0.1970,  1.0577]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 16
********************
inputting microbatch 15 into partition 1
before moving to cuda:1: tensor([[0.5999, 0.2839, 0.3923, 0.7253],
        [0.5603, 0.3800, 0.2871, 0.7923]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 15
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 15
********************
receiving microbatch 16 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 16, tensor([[0.6362, 0.3875, 0.2639, 0.6825],
        [0.6652, 0.2626, 0.3721, 0.6773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 16
result is tensor([[0.6362, 0.3875, 0.2639, 0.6825],
        [0.6652, 0.2626, 0.3721, 0.6773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6362, 0.3875, 0.2639, 0.6825],
        [0.6652, 0.2626, 0.3721, 0.6773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 15 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 15, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6362, 0.3875, 0.2639, 0.6825],
        [0.6652, 0.2626, 0.3721, 0.6773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0'), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(17, 0), (16, 1)]
inputting microbatch 17 into partition 0
before moving to cuda:0: tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0')
after: tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0')
********************
observing microbatch 17
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.3952, -0.7433,  0.9636],
        [-0.8199,  0.1174, -0.2538]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 17
********************
inputting microbatch 16 into partition 1
before moving to cuda:1: tensor([[0.6362, 0.3875, 0.2639, 0.6825],
        [0.6652, 0.2626, 0.3721, 0.6773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 16
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 16
********************
receiving microbatch 17 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 17, tensor([[0.5071, 0.3176, 0.5617, 0.5046],
        [0.3683, 0.4173, 0.5792, 0.5483]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 17
result is tensor([[0.5071, 0.3176, 0.5617, 0.5046],
        [0.3683, 0.4173, 0.5792, 0.5483]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5071, 0.3176, 0.5617, 0.5046],
        [0.3683, 0.4173, 0.5792, 0.5483]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 16 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 16, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 16
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5071, 0.3176, 0.5617, 0.5046],
        [0.3683, 0.4173, 0.5792, 0.5483]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0'), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(18, 0), (17, 1)]
inputting microbatch 18 into partition 0
before moving to cuda:0: tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0')
after: tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0')
********************
observing microbatch 18
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.3310, -0.4556, -1.1367],
        [ 1.1920,  0.0039,  1.8973]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 18
********************
inputting microbatch 17 into partition 1
before moving to cuda:1: tensor([[0.5071, 0.3176, 0.5617, 0.5046],
        [0.3683, 0.4173, 0.5792, 0.5483]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 17
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 17
********************
receiving microbatch 18 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 18, tensor([[0.3045, 0.5165, 0.5599, 0.5243],
        [0.7686, 0.1985, 0.3255, 0.6943]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 18
result is tensor([[0.3045, 0.5165, 0.5599, 0.5243],
        [0.7686, 0.1985, 0.3255, 0.6943]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3045, 0.5165, 0.5599, 0.5243],
        [0.7686, 0.1985, 0.3255, 0.6943]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 17 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 17, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 17
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3045, 0.5165, 0.5599, 0.5243],
        [0.7686, 0.1985, 0.3255, 0.6943]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0'), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(19, 0), (18, 1)]
inputting microbatch 19 into partition 0
before moving to cuda:0: tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0')
after: tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0')
********************
observing microbatch 19
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.3743, -2.0972,  0.6686],
        [ 0.1858,  0.0195, -0.5480]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 19
********************
inputting microbatch 18 into partition 1
before moving to cuda:1: tensor([[0.3045, 0.5165, 0.5599, 0.5243],
        [0.7686, 0.1985, 0.3255, 0.6943]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 18
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 18
********************
receiving microbatch 19 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 19, tensor([[0.4222, 0.3860, 0.6325, 0.3748],
        [0.4302, 0.4283, 0.4653, 0.6122]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 19
result is tensor([[0.4222, 0.3860, 0.6325, 0.3748],
        [0.4302, 0.4283, 0.4653, 0.6122]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4222, 0.3860, 0.6325, 0.3748],
        [0.4302, 0.4283, 0.4653, 0.6122]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 18 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 18, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 18
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4222, 0.3860, 0.6325, 0.3748],
        [0.4302, 0.4283, 0.4653, 0.6122]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0'), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(20, 0), (19, 1)]
inputting microbatch 20 into partition 0
before moving to cuda:0: tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0')
after: tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0')
********************
observing microbatch 20
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.4976, -0.2727, -0.9103],
        [ 1.9050,  0.1105, -0.0270]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 20
********************
inputting microbatch 19 into partition 1
before moving to cuda:1: tensor([[0.4222, 0.3860, 0.6325, 0.3748],
        [0.4302, 0.4283, 0.4653, 0.6122]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 19
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 19
********************
receiving microbatch 20 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 20, tensor([[0.3179, 0.4906, 0.5679, 0.5309],
        [0.6582, 0.3380, 0.2648, 0.7373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 20
result is tensor([[0.3179, 0.4906, 0.5679, 0.5309],
        [0.6582, 0.3380, 0.2648, 0.7373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3179, 0.4906, 0.5679, 0.5309],
        [0.6582, 0.3380, 0.2648, 0.7373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 19 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 19, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 19
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3179, 0.4906, 0.5679, 0.5309],
        [0.6582, 0.3380, 0.2648, 0.7373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0'), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(21, 0), (20, 1)]
inputting microbatch 21 into partition 0
before moving to cuda:0: tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0')
after: tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0')
********************
observing microbatch 21
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.8270,  0.0124,  0.5736],
        [-0.2873,  0.4635, -0.8126]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 21
********************
inputting microbatch 20 into partition 1
before moving to cuda:1: tensor([[0.3179, 0.4906, 0.5679, 0.5309],
        [0.6582, 0.3380, 0.2648, 0.7373]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 20
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 20
********************
receiving microbatch 21 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 21, tensor([[0.6156, 0.3073, 0.3781, 0.6634],
        [0.3738, 0.4514, 0.5017, 0.6173]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 21
result is tensor([[0.6156, 0.3073, 0.3781, 0.6634],
        [0.3738, 0.4514, 0.5017, 0.6173]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6156, 0.3073, 0.3781, 0.6634],
        [0.3738, 0.4514, 0.5017, 0.6173]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 20 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 20, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 20
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6156, 0.3073, 0.3781, 0.6634],
        [0.3738, 0.4514, 0.5017, 0.6173]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0'), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(22, 0), (21, 1)]
inputting microbatch 22 into partition 0
before moving to cuda:0: tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0')
after: tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0')
********************
observing microbatch 22
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.0176,  0.4340, -1.3527],
        [-0.7166,  0.1269, -0.4380]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 22
********************
inputting microbatch 21 into partition 1
before moving to cuda:1: tensor([[0.6156, 0.3073, 0.3781, 0.6634],
        [0.3738, 0.4514, 0.5017, 0.6173]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 21
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 21
********************
receiving microbatch 22 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 22, tensor([[0.2587, 0.5248, 0.5969, 0.5571],
        [0.3594, 0.4334, 0.5682, 0.5559]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 22
result is tensor([[0.2587, 0.5248, 0.5969, 0.5571],
        [0.3594, 0.4334, 0.5682, 0.5559]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2587, 0.5248, 0.5969, 0.5571],
        [0.3594, 0.4334, 0.5682, 0.5559]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 21 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 21, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 21
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2587, 0.5248, 0.5969, 0.5571],
        [0.3594, 0.4334, 0.5682, 0.5559]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0'), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(23, 0), (22, 1)]
inputting microbatch 23 into partition 0
before moving to cuda:0: tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0')
after: tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0')
********************
observing microbatch 23
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.5241, -0.9949, -0.3317],
        [-0.3503,  0.0576,  0.3680]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 23
********************
inputting microbatch 22 into partition 1
before moving to cuda:1: tensor([[0.2587, 0.5248, 0.5969, 0.5571],
        [0.3594, 0.4334, 0.5682, 0.5559]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 22
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 22
********************
receiving microbatch 23 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 23, tensor([[0.4466, 0.4318, 0.4765, 0.5422],
        [0.4785, 0.3481, 0.5193, 0.5818]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 23
result is tensor([[0.4466, 0.4318, 0.4765, 0.5422],
        [0.4785, 0.3481, 0.5193, 0.5818]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4466, 0.4318, 0.4765, 0.5422],
        [0.4785, 0.3481, 0.5193, 0.5818]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 22 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 22, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 22
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4466, 0.4318, 0.4765, 0.5422],
        [0.4785, 0.3481, 0.5193, 0.5818]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0'), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(24, 0), (23, 1)]
inputting microbatch 24 into partition 0
before moving to cuda:0: tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0')
after: tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0')
********************
observing microbatch 24
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.3447, -0.7642,  0.0523],
        [ 0.5641, -1.1642,  1.9785]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 24
********************
inputting microbatch 23 into partition 1
before moving to cuda:1: tensor([[0.4466, 0.4318, 0.4765, 0.5422],
        [0.4785, 0.3481, 0.5193, 0.5818]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 23
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 23
********************
receiving microbatch 24 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 24, tensor([[0.4117, 0.4044, 0.5659, 0.5007],
        [0.6886, 0.2283, 0.4572, 0.5433]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 24
result is tensor([[0.4117, 0.4044, 0.5659, 0.5007],
        [0.6886, 0.2283, 0.4572, 0.5433]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4117, 0.4044, 0.5659, 0.5007],
        [0.6886, 0.2283, 0.4572, 0.5433]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 23 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 23, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 23
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4117, 0.4044, 0.5659, 0.5007],
        [0.6886, 0.2283, 0.4572, 0.5433]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0'), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(25, 0), (24, 1)]
inputting microbatch 25 into partition 0
before moving to cuda:0: tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0')
after: tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0')
********************
observing microbatch 25
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.9161, -0.7419, -0.2314],
        [ 0.2803,  0.5686, -0.1431]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 25
********************
inputting microbatch 24 into partition 1
before moving to cuda:1: tensor([[0.4117, 0.4044, 0.5659, 0.5007],
        [0.6886, 0.2283, 0.4572, 0.5433]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 24
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 24
********************
receiving microbatch 25 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 25, tensor([[0.3300, 0.4451, 0.6345, 0.4574],
        [0.5063, 0.3684, 0.4204, 0.6704]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 25
result is tensor([[0.3300, 0.4451, 0.6345, 0.4574],
        [0.5063, 0.3684, 0.4204, 0.6704]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3300, 0.4451, 0.6345, 0.4574],
        [0.5063, 0.3684, 0.4204, 0.6704]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 24 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 24, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 24
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3300, 0.4451, 0.6345, 0.4574],
        [0.5063, 0.3684, 0.4204, 0.6704]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0'), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(26, 0), (25, 1)]
inputting microbatch 26 into partition 0
before moving to cuda:0: tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0')
after: tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0')
********************
observing microbatch 26
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.2271, -0.7124,  0.7823],
        [ 0.2860,  0.4414, -1.8749]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 26
********************
inputting microbatch 25 into partition 1
before moving to cuda:1: tensor([[0.3300, 0.4451, 0.6345, 0.4574],
        [0.5063, 0.3684, 0.4204, 0.6704]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 25
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 25
********************
receiving microbatch 26 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 26, tensor([[0.4058, 0.3501, 0.6583, 0.4430],
        [0.3192, 0.5495, 0.4440, 0.6499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 26
result is tensor([[0.4058, 0.3501, 0.6583, 0.4430],
        [0.3192, 0.5495, 0.4440, 0.6499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4058, 0.3501, 0.6583, 0.4430],
        [0.3192, 0.5495, 0.4440, 0.6499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 25 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 25, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 25
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4058, 0.3501, 0.6583, 0.4430],
        [0.3192, 0.5495, 0.4440, 0.6499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0'), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(27, 0), (26, 1)]
inputting microbatch 27 into partition 0
before moving to cuda:0: tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0')
after: tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0')
********************
observing microbatch 27
current batch shape is torch.Size([2, 3])
batch is tensor([[-0.6328,  0.0911, -1.0101],
        [-1.1772,  0.3273, -0.6459]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 27
********************
inputting microbatch 26 into partition 1
before moving to cuda:1: tensor([[0.4058, 0.3501, 0.6583, 0.4430],
        [0.3192, 0.5495, 0.4440, 0.6499]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 26
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 26
********************
receiving microbatch 27 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 27, tensor([[0.3095, 0.4919, 0.5658, 0.5552],
        [0.3053, 0.4585, 0.6142, 0.5391]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 27
result is tensor([[0.3095, 0.4919, 0.5658, 0.5552],
        [0.3053, 0.4585, 0.6142, 0.5391]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3095, 0.4919, 0.5658, 0.5552],
        [0.3053, 0.4585, 0.6142, 0.5391]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 26 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 26, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 26
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3095, 0.4919, 0.5658, 0.5552],
        [0.3053, 0.4585, 0.6142, 0.5391]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0'), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(28, 0), (27, 1)]
inputting microbatch 28 into partition 0
before moving to cuda:0: tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0')
after: tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0')
********************
observing microbatch 28
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.3300,  0.3418,  1.5844],
        [-0.8950,  0.0339, -0.5754]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 28
********************
inputting microbatch 27 into partition 1
before moving to cuda:1: tensor([[0.3095, 0.4919, 0.5658, 0.5552],
        [0.3053, 0.4585, 0.6142, 0.5391]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 27
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 27
********************
receiving microbatch 28 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 28, tensor([[0.6837, 0.2257, 0.4092, 0.6638],
        [0.3262, 0.4546, 0.5957, 0.5325]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 28
result is tensor([[0.6837, 0.2257, 0.4092, 0.6638],
        [0.3262, 0.4546, 0.5957, 0.5325]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6837, 0.2257, 0.4092, 0.6638],
        [0.3262, 0.4546, 0.5957, 0.5325]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 27 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 27, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 27
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6837, 0.2257, 0.4092, 0.6638],
        [0.3262, 0.4546, 0.5957, 0.5325]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0'), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(29, 0), (28, 1)]
inputting microbatch 29 into partition 0
before moving to cuda:0: tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0')
after: tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0')
********************
observing microbatch 29
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.4168, -0.2400,  1.5860],
        [ 0.9635, -0.2795, -0.5617]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 29
********************
inputting microbatch 28 into partition 1
before moving to cuda:1: tensor([[0.6837, 0.2257, 0.4092, 0.6638],
        [0.3262, 0.4546, 0.5957, 0.5325]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 28
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 28
********************
receiving microbatch 29 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 29, tensor([[0.6708, 0.2380, 0.4295, 0.6177],
        [0.4943, 0.4223, 0.3883, 0.6405]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 29
result is tensor([[0.6708, 0.2380, 0.4295, 0.6177],
        [0.4943, 0.4223, 0.3883, 0.6405]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6708, 0.2380, 0.4295, 0.6177],
        [0.4943, 0.4223, 0.3883, 0.6405]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 28 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 28, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 28
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6708, 0.2380, 0.4295, 0.6177],
        [0.4943, 0.4223, 0.3883, 0.6405]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0'), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(30, 0), (29, 1)]
inputting microbatch 30 into partition 0
before moving to cuda:0: tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0')
after: tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0')
********************
observing microbatch 30
current batch shape is torch.Size([2, 3])
batch is tensor([[ 0.5753,  0.2642,  0.4156],
        [-1.2193,  1.8877,  0.9821]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 30
********************
inputting microbatch 29 into partition 1
before moving to cuda:1: tensor([[0.6708, 0.2380, 0.4295, 0.6177],
        [0.4943, 0.4223, 0.3883, 0.6405]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 29
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 29
********************
receiving microbatch 30 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 30, tensor([[0.5844, 0.3192, 0.3960, 0.6672],
        [0.5333, 0.2596, 0.5202, 0.6888]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 30
result is tensor([[0.5844, 0.3192, 0.3960, 0.6672],
        [0.5333, 0.2596, 0.5202, 0.6888]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5844, 0.3192, 0.3960, 0.6672],
        [0.5333, 0.2596, 0.5202, 0.6888]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 29 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 29, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 29
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5844, 0.3192, 0.3960, 0.6672],
        [0.5333, 0.2596, 0.5202, 0.6888]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')]
====================
schedule for this step is
[(31, 0), (30, 1)]
inputting microbatch 31 into partition 0
before moving to cuda:0: tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')
after: tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')
********************
observing microbatch 31
current batch shape is torch.Size([2, 3])
batch is tensor([[-1.4297,  0.0937, -0.9030],
        [-1.3896, -0.6126,  0.3077]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 31
********************
inputting microbatch 30 into partition 1
before moving to cuda:1: tensor([[0.5844, 0.3192, 0.3960, 0.6672],
        [0.5333, 0.2596, 0.5202, 0.6888]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 30
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 30
********************
receiving microbatch 31 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 31, tensor([[0.2544, 0.4986, 0.6569, 0.4953],
        [0.3453, 0.3966, 0.6755, 0.4374]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 31
result is tensor([[0.2544, 0.4986, 0.6569, 0.4953],
        [0.3453, 0.3966, 0.6755, 0.4374]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2544, 0.4986, 0.6569, 0.4953],
        [0.3453, 0.3966, 0.6755, 0.4374]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 30 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 30, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 30
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2544, 0.4986, 0.6569, 0.4953],
        [0.3453, 0.3966, 0.6755, 0.4374]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(31, 1)]
inputting microbatch 31 into partition 1
before moving to cuda:1: tensor([[0.2544, 0.4986, 0.6569, 0.4953],
        [0.3453, 0.3966, 0.6755, 0.4374]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 31
current batch shape is torch.Size([2, 4])
batch is tensor([[0.9639, 0.9643, 0.9960, 0.9985],
        [0.6515, 0.9561, 0.9513, 0.9940]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 31
********************
receiving microbatch 31 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 31, tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 31
result is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9365, 0.9372, 0.9872, 0.9981, 0.6515],
        [0.9393, 0.9395, 0.9886, 0.9965, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9622, 0.9626, 0.9957, 0.9984, 0.6515],
        [0.9547, 0.9501, 0.9937, 0.9971, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9638, 0.9642, 0.9959, 0.9985, 0.6515],
        [0.9560, 0.9512, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9639, 0.9643, 0.9960, 0.9985, 0.6515],
        [0.9561, 0.9513, 0.9940, 0.9972, 0.6515]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[4-1] ______________________________

batch_size = 1, split_size = 4

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4360, 0.5026, 0.4493, 0.4492, 0.3511]], grad_fn=<ToCopyBackward0>), tensor([[0.9884, 0.9835, 0.9853, 0.9823, 0.6573]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 1
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 4
x          = tensor([[ 1.4380, -1.3380,  0.8274]], device='cuda:0')
y0         = tensor([[0.4360, 0.5026, 0.4493, 0.4492, 0.3511]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9884, 0.9835, 0.9853, 0.9823, 0.6573]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 1.4380, -1.3380,  0.8274]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 1.4380, -1.3380,  0.8274]], device='cuda:0')
after: tensor([[ 1.4380, -1.3380,  0.8274]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.4380, -1.3380,  0.8274]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.6165, 0.2890, 0.4804, 0.6993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.6165, 0.2890, 0.4804, 0.6993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6165, 0.2890, 0.4804, 0.6993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.6165, 0.2890, 0.4804, 0.6993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(0, 1)]
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.6165, 0.2890, 0.4804, 0.6993]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9972, 0.6515, 0.9639, 0.9643]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9972, 0.6515, 0.9639, 0.9643]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9884, 0.9835, 0.9853, 0.9823, 0.6573]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9884, 0.9835, 0.9853, 0.9823, 0.6573]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9884, 0.9835, 0.9853, 0.9823, 0.6573]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9884, 0.9835, 0.9853, 0.9823, 0.6573]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[4-16] _____________________________

batch_size = 16, split_size = 4

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.6548, 0.6952, 0.5565, 0.6508, 0.5223],\n        [0.6532, 0.7068, 0.5659, 0.6617, 0.5260],\n        [0.6351, 0.7165, 0.5333, 0.6541, 0.5082],\n        [0.6253, 0.7066, 0.5306, 0.6540, 0.4934],\n        [0.6441, 0.7207, 0.5244, 0.6449, 0.5194],\n        [0.6490, 0.6972, 0.5507, 0.6511, 0.5161],\n        [0.6529, 0.7081, 0.5395, 0.6454, 0.5245],\n        [0.6449, 0.7048, 0.5513, 0.6564, 0.5148],\n        [0.6306, 0.7033, 0.5282, 0.6485, 0.4974],\n        [0.6434, 0.6903, 0.5526, 0.6533, 0.5068],\n        [0.6504, 0.7033, 0.5509, 0.6525, 0.5203],\n        [0.6182, 0.7127, 0.5214, 0.6538, 0.4882],\n        [0.6537, 0.7099, 0.5512, 0.6531, 0.5269],\n        [0.6106, 0.7179, 0.5033, 0.6481, 0.4812],\n        [0.6361, 0.6986, 0.5429, 0.6536, 0.5019],\n        [0.6499, 0.6898, 0.5526, 0.6493, 0.5141]], grad_fn=<ToCopyBackward0>), tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],\n        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],\n        [0.0000, 0.9880, 0.9725, 0.9737, 0.9676],\n        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],\n        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],\n        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],\n        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],\n        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],\n        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],\n        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],\n        [0.0000, 0.9953, 0.9890, 0.9892, 0.9855],\n        [0.0000, 0.9953, 0.9890, 0.9892, 0.9855],\n        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],\n        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 16
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 4
x          = tensor([[-0.7794,  0.6939,  0.5675],
        [-0.7017,  1.0927, -1.6441],
        [ 0.0580, -0.1163, -1.1682],
       ... 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')
y0         = tensor([[0.6548, 0.6952, 0.5565, 0.6508, 0.5223],
        [0.6532, 0.7068, 0.5659, 0.6617, 0.5260],
        [0.6351, 0...[0.6361, 0.6986, 0.5429, 0.6536, 0.5019],
        [0.6499, 0.6898, 0.5526, 0.6493, 0.5141]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0...[0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-0.7794,  0.6939,  0.5675],
        [-0.7017,  1.0927, -1.6441],
        [ 0.0580, -0.1163, -1.1682],
        [ 1.0536,  0.1829, -0.8751]], device='cuda:0'), tensor([[-0.9501, -0.9290,  0.1639],
        [-0.3955,  0.5765,  0.3085],
        [-1.1505, -0.2755,  0.7460],
        [-0.1894,  0.6462, -0.8633]], device='cuda:0'), tensor([[ 0.6223, -0.0888,  0.2427],
        [ 0.3090,  1.0005,  0.1613],
        [-0.6422,  0.4537, -0.1279],
        [ 1.3593, -0.1934, -1.2319]], device='cuda:0'), tensor([[-1.0555,  0.2733, -0.4547],
        [ 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-0.7794,  0.6939,  0.5675],
        [-0.7017,  1.0927, -1.6441],
        [ 0.0580, -0.1163, -1.1682],
        [ 1.0536,  0.1829, -0.8751]], device='cuda:0')
after: tensor([[-0.7794,  0.6939,  0.5675],
        [-0.7017,  1.0927, -1.6441],
        [ 0.0580, -0.1163, -1.1682],
        [ 1.0536,  0.1829, -0.8751]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([4, 3])
batch is tensor([[-0.7794,  0.6939,  0.5675],
        [-0.7017,  1.0927, -1.6441],
        [ 0.0580, -0.1163, -1.1682],
        [ 1.0536,  0.1829, -0.8751]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.4416, 0.4918, 0.6740, 0.5117],
        [0.4655, 0.4588, 0.6421, 0.6249],
        [0.4733, 0.5979, 0.4276, 0.4390],
        [0.3422, 0.6802, 0.3859, 0.3435]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.4416, 0.4918, 0.6740, 0.5117],
        [0.4655, 0.4588, 0.6421, 0.6249],
        [0.4733, 0.5979, 0.4276, 0.4390],
        [0.3422, 0.6802, 0.3859, 0.3435]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4416, 0.4918, 0.6740, 0.5117],
        [0.4655, 0.4588, 0.6421, 0.6249],
        [0.4733, 0.5979, 0.4276, 0.4390],
        [0.3422, 0.6802, 0.3859, 0.3435]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.4416, 0.4918, 0.6740, 0.5117],
        [0.4655, 0.4588, 0.6421, 0.6249],
        [0.4733, 0.5979, 0.4276, 0.4390],
        [0.3422, 0.6802, 0.3859, 0.3435]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.9501, -0.9290,  0.1639],
        [-0.3955,  0.5765,  0.3085],
        [-1.1505, -0.2755,  0.7460],
        [-0.1894,  0.6462, -0.8633]], device='cuda:0'), tensor([[ 0.6223, -0.0888,  0.2427],
        [ 0.3090,  1.0005,  0.1613],
        [-0.6422,  0.4537, -0.1279],
        [ 1.3593, -0.1934, -1.2319]], device='cuda:0'), tensor([[-1.0555,  0.2733, -0.4547],
        [ 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-0.9501, -0.9290,  0.1639],
        [-0.3955,  0.5765,  0.3085],
        [-1.1505, -0.2755,  0.7460],
        [-0.1894,  0.6462, -0.8633]], device='cuda:0')
after: tensor([[-0.9501, -0.9290,  0.1639],
        [-0.3955,  0.5765,  0.3085],
        [-1.1505, -0.2755,  0.7460],
        [-0.1894,  0.6462, -0.8633]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([4, 3])
batch is tensor([[-0.9501, -0.9290,  0.1639],
        [-0.3955,  0.5765,  0.3085],
        [-1.1505, -0.2755,  0.7460],
        [-0.1894,  0.6462, -0.8633]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.4416, 0.4918, 0.6740, 0.5117],
        [0.4655, 0.4588, 0.6421, 0.6249],
        [0.4733, 0.5979, 0.4276, 0.4390],
        [0.3422, 0.6802, 0.3859, 0.3435]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[-2.0000e+00,  1.8721e+00, -2.0000e+00,  1.8709e+00],
        [ 0.0000e+00,  1.8713e+00, -3.6893e+19,  1.8706e+00],
        [-3.6893e+19,  1.7893e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([4, 4])
batch is tensor([[-2.0000e+00,  1.8721e+00, -2.0000e+00,  1.8709e+00],
        [ 0.0000e+00,  1.8713e+00, -3.6893e+19,  1.8706e+00],
        [-3.6893e+19,  1.7893e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.6044, 0.5491, 0.4623, 0.4340],
        [0.4197, 0.5339, 0.6172, 0.4727],
        [0.5549, 0.5029, 0.5908, 0.4762],
        [0.4270, 0.5400, 0.5653, 0.5061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.6044, 0.5491, 0.4623, 0.4340],
        [0.4197, 0.5339, 0.6172, 0.4727],
        [0.5549, 0.5029, 0.5908, 0.4762],
        [0.4270, 0.5400, 0.5653, 0.5061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6044, 0.5491, 0.4623, 0.4340],
        [0.4197, 0.5339, 0.6172, 0.4727],
        [0.5549, 0.5029, 0.5908, 0.4762],
        [0.4270, 0.5400, 0.5653, 0.5061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6044, 0.5491, 0.4623, 0.4340],
        [0.4197, 0.5339, 0.6172, 0.4727],
        [0.5549, 0.5029, 0.5908, 0.4762],
        [0.4270, 0.5400, 0.5653, 0.5061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.6223, -0.0888,  0.2427],
        [ 0.3090,  1.0005,  0.1613],
        [-0.6422,  0.4537, -0.1279],
        [ 1.3593, -0.1934, -1.2319]], device='cuda:0'), tensor([[-1.0555,  0.2733, -0.4547],
        [ 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[ 0.6223, -0.0888,  0.2427],
        [ 0.3090,  1.0005,  0.1613],
        [-0.6422,  0.4537, -0.1279],
        [ 1.3593, -0.1934, -1.2319]], device='cuda:0')
after: tensor([[ 0.6223, -0.0888,  0.2427],
        [ 0.3090,  1.0005,  0.1613],
        [-0.6422,  0.4537, -0.1279],
        [ 1.3593, -0.1934, -1.2319]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.6223, -0.0888,  0.2427],
        [ 0.3090,  1.0005,  0.1613],
        [-0.6422,  0.4537, -0.1279],
        [ 1.3593, -0.1934, -1.2319]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.6044, 0.5491, 0.4623, 0.4340],
        [0.4197, 0.5339, 0.6172, 0.4727],
        [0.5549, 0.5029, 0.5908, 0.4762],
        [0.4270, 0.5400, 0.5653, 0.5061]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8962, 0.8068, 0.5209, 0.7351],
        [0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([4, 4])
batch is tensor([[0.8962, 0.8068, 0.5209, 0.7351],
        [0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.3736, 0.6628, 0.4300, 0.3251],
        [0.3231, 0.5827, 0.6030, 0.4323],
        [0.4677, 0.5106, 0.6082, 0.5100],
        [0.3514, 0.7187, 0.3018, 0.3046]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.3736, 0.6628, 0.4300, 0.3251],
        [0.3231, 0.5827, 0.6030, 0.4323],
        [0.4677, 0.5106, 0.6082, 0.5100],
        [0.3514, 0.7187, 0.3018, 0.3046]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3736, 0.6628, 0.4300, 0.3251],
        [0.3231, 0.5827, 0.6030, 0.4323],
        [0.4677, 0.5106, 0.6082, 0.5100],
        [0.3514, 0.7187, 0.3018, 0.3046]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.0000, 0.9880, 0.9725, 0.9737, 0.9676],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.0000, 0.9880, 0.9725, 0.9737, 0.9676],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9880, 0.9725, 0.9737, 0.9676],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9880, 0.9725, 0.9737, 0.9676],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3736, 0.6628, 0.4300, 0.3251],
        [0.3231, 0.5827, 0.6030, 0.4323],
        [0.4677, 0.5106, 0.6082, 0.5100],
        [0.3514, 0.7187, 0.3018, 0.3046]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.0555,  0.2733, -0.4547],
        [ 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[-1.0555,  0.2733, -0.4547],
        [ 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')
after: tensor([[-1.0555,  0.2733, -0.4547],
        [ 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([4, 3])
batch is tensor([[-1.0555,  0.2733, -0.4547],
        [ 1.6668, -1.1301, -0.6100],
        [ 0.5601,  0.6075, -0.3406],
        [-0.2890,  0.7457,  0.9070]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.3736, 0.6628, 0.4300, 0.3251],
        [0.3231, 0.5827, 0.6030, 0.4323],
        [0.4677, 0.5106, 0.6082, 0.5100],
        [0.3514, 0.7187, 0.3018, 0.3046]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9880, 0.9725, 0.9737, 0.9676],
        [0.9883, 0.9731, 0.9746, 0.9658],
        [0.8568, 0.7282, 0.7276, 0.6587],
        [0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9880, 0.9725, 0.9737, 0.9676],
        [0.9883, 0.9731, 0.9746, 0.9658],
        [0.8568, 0.7282, 0.7276, 0.6587],
        [0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.5351, 0.4742, 0.6108, 0.5565],
        [0.3770, 0.7806, 0.2022, 0.2088],
        [0.3422, 0.6207, 0.5084, 0.4000],
        [0.3786, 0.5423, 0.6498, 0.4471]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.5351, 0.4742, 0.6108, 0.5565],
        [0.3770, 0.7806, 0.2022, 0.2088],
        [0.3422, 0.6207, 0.5084, 0.4000],
        [0.3786, 0.5423, 0.6498, 0.4471]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5351, 0.4742, 0.6108, 0.5565],
        [0.3770, 0.7806, 0.2022, 0.2088],
        [0.3422, 0.6207, 0.5084, 0.4000],
        [0.3786, 0.5423, 0.6498, 0.4471]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9880, 0.9725, 0.9737, 0.9676],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5351, 0.4742, 0.6108, 0.5565],
        [0.3770, 0.7806, 0.2022, 0.2088],
        [0.3422, 0.6207, 0.5084, 0.4000],
        [0.3786, 0.5423, 0.6498, 0.4471]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(3, 1)]
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.5351, 0.4742, 0.6108, 0.5565],
        [0.3770, 0.7806, 0.2022, 0.2088],
        [0.3422, 0.6207, 0.5084, 0.4000],
        [0.3786, 0.5423, 0.6498, 0.4471]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9951, 0.9884, 0.9887, 0.9848],
        [0.9951, 0.9884, 0.9887, 0.9848],
        [0.9883, 0.9731, 0.9746, 0.9658],
        [0.9883, 0.9731, 0.9746, 0.9658]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9951, 0.9884, 0.9887, 0.9848],
        [0.9951, 0.9884, 0.9887, 0.9848],
        [0.9883, 0.9731, 0.9746, 0.9658],
        [0.9883, 0.9731, 0.9746, 0.9658]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.0000, 0.8962, 0.8068, 0.5209, 0.7351],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9880, 0.9725, 0.9737, 0.9676],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587],
        [0.0000, 0.8568, 0.7282, 0.7276, 0.6587]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658],
        [0.0000, 0.9883, 0.9731, 0.9746, 0.9658]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9953, 0.9890, 0.9892, 0.9855],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848],
        [0.0000, 0.9951, 0.9884, 0.9887, 0.9848]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[4-32] _____________________________

batch_size = 32, split_size = 4

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4153, 0.4323, 0.7019, 0.3373, 0.5475],\n        [0.4191, 0.4541, 0.7237, 0.3358, 0.5565],\n        [0.4189, 0.4414, 0.7114, 0.3392, 0.5526],\n        [0.3989, 0.4473, 0.7390, 0.3142, 0.5590],\n        [0.3900, 0.4844, 0.7563, 0.2955, 0.5536],\n        [0.4161, 0.4606, 0.7430, 0.3318, 0.5665],\n        [0.4103, 0.4468, 0.7151, 0.3269, 0.5483],\n        [0.4211, 0.4321, 0.7145, 0.3466, 0.5599],\n        [0.3924, 0.4824, 0.7501, 0.2986, 0.5509],\n        [0.4203, 0.4585, 0.7268, 0.3361, 0.5577],\n        [0.4276, 0.4636, 0.7449, 0.3461, 0.5733],\n        [0.4020, 0.4545, 0.7347, 0.3159, 0.5550],\n        [0.4174, 0.4566, 0.7351, 0.3338, 0.5629],\n        [0.3894, 0.4779, 0.7548, 0.2963, 0.5545],\n        [0.3926, 0.4695, 0.7599, 0.3021, 0.5632],\n        [0.4061, 0.4657, 0.7404, 0.3182, 0.5573],\n        [0.4066, 0.4751, 0.7508, 0.3176, 0.5621],\n        [0.3967, 0.4513, 0.7447, 0.3108, 0.5605],\n        [0.4197, 0.4449, 0.7211, 0.3397, 0.5585],\n        [0.4122, 0.4768, 0.7576, 0.3261, 0.5702],\n        [0.3883, 0.4720, 0.7489, 0.2962, 0.5515],\n        [0.4092, 0.4911, 0.7423, 0.3161, 0.5513],\n        [0.3985, 0.4807, 0.7565, 0.3069, 0.5600],\n        [0.4021, 0.4547, 0.7443, 0.3165, 0.5620],\n        [0.3991, 0.4820, 0.7295, 0.3052, 0.5395],\n        [0.3845, 0.4761, 0.7280, 0.2900, 0.5324],\n        [0.4129, 0.4571, 0.7185, 0.3272, 0.5483],\n        [0.4028, 0.4767, 0.7592, 0.3137, 0.5661],\n        [0.4096, 0.4564, 0.7123, 0.3230, 0.5424],\n        [0.4115, 0.4442, 0.7197, 0.3295, 0.5532],\n        [0.4004, 0.4523, 0.7435, 0.3150, 0.5613],\n        [0.4144, 0.4592, 0.7394, 0.3298, 0.5634]], grad_fn=<ToCopyBackward0>), tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],\n        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],\n        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],\n        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984],\n        [0.9105, 0.7847, 0.7502, 0.5701, 0.5651],\n        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],\n        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],\n        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365],\n        [0.9005, 0.7893, 0.6507, 0.4382, 0.5579],\n        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],\n        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],\n        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427],\n        [0.8916, 0.7889, 0.6414, 0.4360, 0.5648],\n        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],\n        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],\n        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144],\n        [0.0000, 0.0000, 0.0000, 1.0000, 1.0000],\n        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],\n        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],\n        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966],\n        [0.8984, 0.8506, 0.9898, 0.9994, 0.9821],\n        [0.8948, 0.8468, 0.9884, 0.9992, 0.9810],\n        [0.8933, 0.8394, 0.9998, 1.0000, 0.9789],\n        [1.0000, 1.0000, 1.0000, 0.9812, 0.0000],\n        [0.9220, 0.7980, 0.7202, 0.5453, 0.5926],\n        [0.9271, 0.8130, 0.7850, 0.5890, 0.5711],\n        [0.9215, 0.8264, 0.7316, 0.5300, 0.6001],\n        [0.9288, 0.8290, 0.7561, 0.5668, 0.6080],\n        [0.9000, 0.7926, 0.6579, 0.4422, 0.5581],\n        [0.8847, 0.7766, 0.6827, 0.7110, 0.7546],\n        [0.8871, 0.7136, 0.5961, 0.5320, 0.6210],\n        [0.9059, 0.7247, 0.7826, 0.6445, 0.5337]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 32
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 4
x          = tensor([[ 0.5594,  2.0903,  0.2453],
        [-0.4568,  0.8191, -0.4287],
        [-0.0897,  1.5591, -0.0597],
       ... 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')
y0         = tensor([[0.4153, 0.4323, 0.7019, 0.3373, 0.5475],
        [0.4191, 0.4541, 0.7237, 0.3358, 0.5565],
        [0.4189, 0...[0.4004, 0.4523, 0.7435, 0.3150, 0.5613],
        [0.4144, 0.4592, 0.7394, 0.3298, 0.5634]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0...[0.8871, 0.7136, 0.5961, 0.5320, 0.6210],
        [0.9059, 0.7247, 0.7826, 0.6445, 0.5337]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 0.5594,  2.0903,  0.2453],
        [-0.4568,  0.8191, -0.4287],
        [-0.0897,  1.5591, -0.0597],
        [ 0.4537,  0.3799,  1.3185]], device='cuda:0'), tensor([[ 0.4918, -1.4334, -0.1287],
        [-1.1357,  0.0541,  0.2057],
        [ 0.6011,  1.1380, -0.2260],
        [-0.7525,  1.9145,  0.9857]], device='cuda:0'), tensor([[ 0.6253, -1.1378, -0.4669],
        [-0.6532,  0.6119, -0.6120],
        [-2.4501, -0.0266, -0.1050],
        [ 0.4430,  0.2968,  0.4413]], device='cuda:0'), tensor([[-0.8401,  0.4278,  0.0414],
        [ 0.6192, -1.1597,  0.3182],
        [ 0.0170, -0.9890,  1.2959],
        [-0.1021, -0.1564, -0.1309]], device='cuda:0'), tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0'), tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0'), tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0'), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 0.5594,  2.0903,  0.2453],
        [-0.4568,  0.8191, -0.4287],
        [-0.0897,  1.5591, -0.0597],
        [ 0.4537,  0.3799,  1.3185]], device='cuda:0')
after: tensor([[ 0.5594,  2.0903,  0.2453],
        [-0.4568,  0.8191, -0.4287],
        [-0.0897,  1.5591, -0.0597],
        [ 0.4537,  0.3799,  1.3185]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.5594,  2.0903,  0.2453],
        [-0.4568,  0.8191, -0.4287],
        [-0.0897,  1.5591, -0.0597],
        [ 0.4537,  0.3799,  1.3185]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.4039, 0.2925, 0.2372, 0.4550],
        [0.4254, 0.5480, 0.3304, 0.4971],
        [0.4020, 0.4144, 0.2636, 0.4656],
        [0.5301, 0.5050, 0.4193, 0.6637]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.4039, 0.2925, 0.2372, 0.4550],
        [0.4254, 0.5480, 0.3304, 0.4971],
        [0.4020, 0.4144, 0.2636, 0.4656],
        [0.5301, 0.5050, 0.4193, 0.6637]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4039, 0.2925, 0.2372, 0.4550],
        [0.4254, 0.5480, 0.3304, 0.4971],
        [0.4020, 0.4144, 0.2636, 0.4656],
        [0.5301, 0.5050, 0.4193, 0.6637]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.4039, 0.2925, 0.2372, 0.4550],
        [0.4254, 0.5480, 0.3304, 0.4971],
        [0.4020, 0.4144, 0.2636, 0.4656],
        [0.5301, 0.5050, 0.4193, 0.6637]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.4918, -1.4334, -0.1287],
        [-1.1357,  0.0541,  0.2057],
        [ 0.6011,  1.1380, -0.2260],
        [-0.7525,  1.9145,  0.9857]], device='cuda:0'), tensor([[ 0.6253, -1.1378, -0.4669],
        [-0.6532,  0.6119, -0.6120],
        [-2.4501, -0.0266, -0.1050],
        [ 0.4430,  0.2968,  0.4413]], device='cuda:0'), tensor([[-0.8401,  0.4278,  0.0414],
        [ 0.6192, -1.1597,  0.3182],
        [ 0.0170, -0.9890,  1.2959],
        [-0.1021, -0.1564, -0.1309]], device='cuda:0'), tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0'), tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0'), tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0'), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[ 0.4918, -1.4334, -0.1287],
        [-1.1357,  0.0541,  0.2057],
        [ 0.6011,  1.1380, -0.2260],
        [-0.7525,  1.9145,  0.9857]], device='cuda:0')
after: tensor([[ 0.4918, -1.4334, -0.1287],
        [-1.1357,  0.0541,  0.2057],
        [ 0.6011,  1.1380, -0.2260],
        [-0.7525,  1.9145,  0.9857]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.4918, -1.4334, -0.1287],
        [-1.1357,  0.0541,  0.2057],
        [ 0.6011,  1.1380, -0.2260],
        [-0.7525,  1.9145,  0.9857]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.4039, 0.2925, 0.2372, 0.4550],
        [0.4254, 0.5480, 0.3304, 0.4971],
        [0.4020, 0.4144, 0.2636, 0.4656],
        [0.5301, 0.5050, 0.4193, 0.6637]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[ 4.8107e-01,  9.8166e-01,  9.2348e-01,  9.5650e-01],
        [ 8.6695e-01,  5.7989e-01,  9.7996e-01,  9.2653e-01],
        [ 9.4463e-01,  8.6892e-01,  2.0000e+00,  1.7700e+00],
        [ 2.0000e+00,  1.8700e+00, -1.0842e-19,  1.8566e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([4, 4])
batch is tensor([[ 4.8107e-01,  9.8166e-01,  9.2348e-01,  9.5650e-01],
        [ 8.6695e-01,  5.7989e-01,  9.7996e-01,  9.2653e-01],
        [ 9.4463e-01,  8.6892e-01,  2.0000e+00,  1.7700e+00],
        [ 2.0000e+00,  1.8700e+00, -1.0842e-19,  1.8566e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.6219, 0.7291, 0.6691, 0.7192],
        [0.4544, 0.6980, 0.3809, 0.5870],
        [0.4587, 0.4036, 0.3468, 0.5082],
        [0.3680, 0.4250, 0.1955, 0.4859]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.6219, 0.7291, 0.6691, 0.7192],
        [0.4544, 0.6980, 0.3809, 0.5870],
        [0.4587, 0.4036, 0.3468, 0.5082],
        [0.3680, 0.4250, 0.1955, 0.4859]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6219, 0.7291, 0.6691, 0.7192],
        [0.4544, 0.6980, 0.3809, 0.5870],
        [0.4587, 0.4036, 0.3468, 0.5082],
        [0.3680, 0.4250, 0.1955, 0.4859]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6219, 0.7291, 0.6691, 0.7192],
        [0.4544, 0.6980, 0.3809, 0.5870],
        [0.4587, 0.4036, 0.3468, 0.5082],
        [0.3680, 0.4250, 0.1955, 0.4859]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.6253, -1.1378, -0.4669],
        [-0.6532,  0.6119, -0.6120],
        [-2.4501, -0.0266, -0.1050],
        [ 0.4430,  0.2968,  0.4413]], device='cuda:0'), tensor([[-0.8401,  0.4278,  0.0414],
        [ 0.6192, -1.1597,  0.3182],
        [ 0.0170, -0.9890,  1.2959],
        [-0.1021, -0.1564, -0.1309]], device='cuda:0'), tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0'), tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0'), tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0'), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[ 0.6253, -1.1378, -0.4669],
        [-0.6532,  0.6119, -0.6120],
        [-2.4501, -0.0266, -0.1050],
        [ 0.4430,  0.2968,  0.4413]], device='cuda:0')
after: tensor([[ 0.6253, -1.1378, -0.4669],
        [-0.6532,  0.6119, -0.6120],
        [-2.4501, -0.0266, -0.1050],
        [ 0.4430,  0.2968,  0.4413]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.6253, -1.1378, -0.4669],
        [-0.6532,  0.6119, -0.6120],
        [-2.4501, -0.0266, -0.1050],
        [ 0.4430,  0.2968,  0.4413]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.6219, 0.7291, 0.6691, 0.7192],
        [0.4544, 0.6980, 0.3809, 0.5870],
        [0.4587, 0.4036, 0.3468, 0.5082],
        [0.3680, 0.4250, 0.1955, 0.4859]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8852, 0.7727, 0.6931, 0.7869],
        [0.8090, 0.9163, 0.7507, 0.6543],
        [0.4134, 0.4884, 0.9533, 0.8055],
        [0.5853, 0.3726, 0.5781, 0.9834]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([4, 4])
batch is tensor([[0.8852, 0.7727, 0.6931, 0.7869],
        [0.8090, 0.9163, 0.7507, 0.6543],
        [0.4134, 0.4884, 0.9533, 0.8055],
        [0.5853, 0.3726, 0.5781, 0.9834]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.6036, 0.6885, 0.6438, 0.6822],
        [0.4262, 0.5943, 0.3462, 0.4985],
        [0.3922, 0.8021, 0.3225, 0.5428],
        [0.5187, 0.5228, 0.4379, 0.6182]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.6036, 0.6885, 0.6438, 0.6822],
        [0.4262, 0.5943, 0.3462, 0.4985],
        [0.3922, 0.8021, 0.3225, 0.5428],
        [0.5187, 0.5228, 0.4379, 0.6182]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6036, 0.6885, 0.6438, 0.6822],
        [0.4262, 0.5943, 0.3462, 0.4985],
        [0.3922, 0.8021, 0.3225, 0.5428],
        [0.5187, 0.5228, 0.4379, 0.6182]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6036, 0.6885, 0.6438, 0.6822],
        [0.4262, 0.5943, 0.3462, 0.4985],
        [0.3922, 0.8021, 0.3225, 0.5428],
        [0.5187, 0.5228, 0.4379, 0.6182]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.8401,  0.4278,  0.0414],
        [ 0.6192, -1.1597,  0.3182],
        [ 0.0170, -0.9890,  1.2959],
        [-0.1021, -0.1564, -0.1309]], device='cuda:0'), tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0'), tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0'), tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0'), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[-0.8401,  0.4278,  0.0414],
        [ 0.6192, -1.1597,  0.3182],
        [ 0.0170, -0.9890,  1.2959],
        [-0.1021, -0.1564, -0.1309]], device='cuda:0')
after: tensor([[-0.8401,  0.4278,  0.0414],
        [ 0.6192, -1.1597,  0.3182],
        [ 0.0170, -0.9890,  1.2959],
        [-0.1021, -0.1564, -0.1309]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([4, 3])
batch is tensor([[-0.8401,  0.4278,  0.0414],
        [ 0.6192, -1.1597,  0.3182],
        [ 0.0170, -0.9890,  1.2959],
        [-0.1021, -0.1564, -0.1309]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.6036, 0.6885, 0.6438, 0.6822],
        [0.4262, 0.5943, 0.3462, 0.4985],
        [0.3922, 0.8021, 0.3225, 0.5428],
        [0.5187, 0.5228, 0.4379, 0.6182]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9105, 0.7847, 0.7502, 0.5701],
        [0.5651, 0.8966, 0.7984, 0.6881],
        [0.5840, 0.6617, 0.8676, 0.6731],
        [0.5300, 0.5574, 0.6675, 0.8966]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9105, 0.7847, 0.7502, 0.5701],
        [0.5651, 0.8966, 0.7984, 0.6881],
        [0.5840, 0.6617, 0.8676, 0.6731],
        [0.5300, 0.5574, 0.6675, 0.8966]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.4412, 0.6301, 0.3526, 0.5519],
        [0.6185, 0.6869, 0.6391, 0.7258],
        [0.5975, 0.7118, 0.5744, 0.7516],
        [0.5117, 0.6353, 0.4712, 0.6079]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.4412, 0.6301, 0.3526, 0.5519],
        [0.6185, 0.6869, 0.6391, 0.7258],
        [0.5975, 0.7118, 0.5744, 0.7516],
        [0.5117, 0.6353, 0.4712, 0.6079]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4412, 0.6301, 0.3526, 0.5519],
        [0.6185, 0.6869, 0.6391, 0.7258],
        [0.5975, 0.7118, 0.5744, 0.7516],
        [0.5117, 0.6353, 0.4712, 0.6079]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4412, 0.6301, 0.3526, 0.5519],
        [0.6185, 0.6869, 0.6391, 0.7258],
        [0.5975, 0.7118, 0.5744, 0.7516],
        [0.5117, 0.6353, 0.4712, 0.6079]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0'), tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0'), tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0'), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0')
after: tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([4, 3])
batch is tensor([[-0.7778, -0.7771, -0.2044],
        [ 0.3934,  0.0804,  1.4544],
        [-0.5466,  1.2177,  0.1678],
        [-2.1246, -1.1520, -0.0974]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.4412, 0.6301, 0.3526, 0.5519],
        [0.6185, 0.6869, 0.6391, 0.7258],
        [0.5975, 0.7118, 0.5744, 0.7516],
        [0.5117, 0.6353, 0.4712, 0.6079]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9005, 0.7893, 0.6507, 0.4382],
        [0.5579, 0.8753, 0.7685, 0.6421],
        [0.6806, 0.7546, 0.8762, 0.7299],
        [0.5693, 0.5334, 0.6605, 0.8860]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9005, 0.7893, 0.6507, 0.4382],
        [0.5579, 0.8753, 0.7685, 0.6421],
        [0.6806, 0.7546, 0.8762, 0.7299],
        [0.5693, 0.5334, 0.6605, 0.8860]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.5186, 0.7583, 0.5143, 0.6387],
        [0.5493, 0.5488, 0.4537, 0.6928],
        [0.4065, 0.5009, 0.2763, 0.4988],
        [0.4804, 0.8652, 0.4833, 0.6448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.5186, 0.7583, 0.5143, 0.6387],
        [0.5493, 0.5488, 0.4537, 0.6928],
        [0.4065, 0.5009, 0.2763, 0.4988],
        [0.4804, 0.8652, 0.4833, 0.6448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5186, 0.7583, 0.5143, 0.6387],
        [0.5493, 0.5488, 0.4537, 0.6928],
        [0.4065, 0.5009, 0.2763, 0.4988],
        [0.4804, 0.8652, 0.4833, 0.6448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5186, 0.7583, 0.5143, 0.6387],
        [0.5493, 0.5488, 0.4537, 0.6928],
        [0.4065, 0.5009, 0.2763, 0.4988],
        [0.4804, 0.8652, 0.4833, 0.6448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0'), tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0'), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0')
after: tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.9952, -0.8099,  0.3893],
        [-0.5136, -1.0549, -1.9637],
        [-0.4001, -1.2328, -0.0568],
        [-0.0230,  0.0505,  1.0276]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.5186, 0.7583, 0.5143, 0.6387],
        [0.5493, 0.5488, 0.4537, 0.6928],
        [0.4065, 0.5009, 0.2763, 0.4988],
        [0.4804, 0.8652, 0.4833, 0.6448]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[-3.6893e+19,  1.7180e+00,  6.4144e-01,  4.3604e-01],
        [ 5.6483e-01,  8.7120e-01,  7.6407e-01,  6.3265e-01],
        [ 6.7056e-01,  7.5021e-01,  8.8957e-01,  7.5824e-01],
        [ 6.1927e-01,  5.4760e-01,  6.5443e-01,  8.8907e-01]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([4, 4])
batch is tensor([[-3.6893e+19,  1.7180e+00,  6.4144e-01,  4.3604e-01],
        [ 5.6483e-01,  8.7120e-01,  7.6407e-01,  6.3265e-01],
        [ 6.7056e-01,  7.5021e-01,  8.8957e-01,  7.5824e-01],
        [ 6.1927e-01,  5.4760e-01,  6.5443e-01,  8.8907e-01]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.6151, 0.6119, 0.6158, 0.7123],
        [0.5170, 0.7744, 0.5833, 0.5593],
        [0.5691, 0.7738, 0.5947, 0.6905],
        [0.5234, 0.5951, 0.4373, 0.6622]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.6151, 0.6119, 0.6158, 0.7123],
        [0.5170, 0.7744, 0.5833, 0.5593],
        [0.5691, 0.7738, 0.5947, 0.6905],
        [0.5234, 0.5951, 0.4373, 0.6622]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6151, 0.6119, 0.6158, 0.7123],
        [0.5170, 0.7744, 0.5833, 0.5593],
        [0.5691, 0.7738, 0.5947, 0.6905],
        [0.5234, 0.5951, 0.4373, 0.6622]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],
        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],
        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],
        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],
        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],
        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],
        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],
        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],
        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6151, 0.6119, 0.6158, 0.7123],
        [0.5170, 0.7744, 0.5833, 0.5593],
        [0.5691, 0.7738, 0.5947, 0.6905],
        [0.5234, 0.5951, 0.4373, 0.6622]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0'), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0')
after: tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([4, 3])
batch is tensor([[ 1.1053, -0.4866, -1.8254],
        [ 2.3434, -0.4788, -1.2264],
        [ 0.3314,  0.7498, -0.8615],
        [-1.0676, -1.1721,  0.3131]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.6151, 0.6119, 0.6158, 0.7123],
        [0.5170, 0.7744, 0.5833, 0.5593],
        [0.5691, 0.7738, 0.5947, 0.6905],
        [0.5234, 0.5951, 0.4373, 0.6622]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[ 0.0000e+00,  1.8750e+00,  0.0000e+00,  1.8750e+00],
        [-1.0842e-19,  1.8428e+00, -0.0000e+00,  1.8160e+00],
        [-0.0000e+00,  1.7828e+00, -2.0000e+00,  1.7910e+00],
        [ 3.6893e+19,  1.8116e+00, -3.6893e+19,  1.8476e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([4, 4])
batch is tensor([[ 0.0000e+00,  1.8750e+00,  0.0000e+00,  1.8750e+00],
        [-1.0842e-19,  1.8428e+00, -0.0000e+00,  1.8160e+00],
        [-0.0000e+00,  1.7828e+00, -2.0000e+00,  1.7910e+00],
        [ 3.6893e+19,  1.8116e+00, -3.6893e+19,  1.8476e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.5598, 0.5755, 0.6017, 0.5583],
        [0.6275, 0.4508, 0.6634, 0.6240],
        [0.4594, 0.4835, 0.3856, 0.4944],
        [0.5402, 0.8097, 0.5445, 0.6925]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.5598, 0.5755, 0.6017, 0.5583],
        [0.6275, 0.4508, 0.6634, 0.6240],
        [0.4594, 0.4835, 0.3856, 0.4944],
        [0.5402, 0.8097, 0.5445, 0.6925]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5598, 0.5755, 0.6017, 0.5583],
        [0.6275, 0.4508, 0.6634, 0.6240],
        [0.4594, 0.4835, 0.3856, 0.4944],
        [0.5402, 0.8097, 0.5445, 0.6925]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.8984, 0.8506, 0.9898, 0.9994, 0.9821],
        [0.8948, 0.8468, 0.9884, 0.9992, 0.9810],
        [0.8933, 0.8394, 0.9998, 1.0000, 0.9789],
        [1.0000, 1.0000, 1.0000, 0.9812, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.8984, 0.8506, 0.9898, 0.9994, 0.9821],
        [0.8948, 0.8468, 0.9884, 0.9992, 0.9810],
        [0.8933, 0.8394, 0.9998, 1.0000, 0.9789],
        [1.0000, 1.0000, 1.0000, 0.9812, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8984, 0.8506, 0.9898, 0.9994, 0.9821],
        [0.8948, 0.8468, 0.9884, 0.9992, 0.9810],
        [0.8933, 0.8394, 0.9998, 1.0000, 0.9789],
        [1.0000, 1.0000, 1.0000, 0.9812, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],
        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],
        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8984, 0.8506, 0.9898, 0.9994, 0.9821],
        [0.8948, 0.8468, 0.9884, 0.9992, 0.9810],
        [0.8933, 0.8394, 0.9998, 1.0000, 0.9789],
        [1.0000, 1.0000, 1.0000, 0.9812, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5598, 0.5755, 0.6017, 0.5583],
        [0.6275, 0.4508, 0.6634, 0.6240],
        [0.4594, 0.4835, 0.3856, 0.4944],
        [0.5402, 0.8097, 0.5445, 0.6925]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')
after: tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.8863,  0.8753, -1.0896],
        [ 0.2496,  1.1342,  0.2095],
        [ 0.1500,  0.1266,  1.1934],
        [-0.7883,  0.1832,  0.1348]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.5598, 0.5755, 0.6017, 0.5583],
        [0.6275, 0.4508, 0.6634, 0.6240],
        [0.4594, 0.4835, 0.3856, 0.4944],
        [0.5402, 0.8097, 0.5445, 0.6925]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.8984, 0.8506, 0.9898, 0.9994],
        [0.9821, 0.8948, 0.8468, 0.9884],
        [0.9992, 0.9810, 0.8933, 0.8394],
        [0.9998, 1.0000, 0.9789, 1.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([4, 4])
batch is tensor([[0.8984, 0.8506, 0.9898, 0.9994],
        [0.9821, 0.8948, 0.8468, 0.9884],
        [0.9992, 0.9810, 0.8933, 0.8394],
        [0.9998, 1.0000, 0.9789, 1.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.4736, 0.4156, 0.4032, 0.4824],
        [0.4502, 0.4345, 0.3249, 0.5280],
        [0.5298, 0.5680, 0.4359, 0.6696],
        [0.4613, 0.6542, 0.3848, 0.5799]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.4736, 0.4156, 0.4032, 0.4824],
        [0.4502, 0.4345, 0.3249, 0.5280],
        [0.5298, 0.5680, 0.4359, 0.6696],
        [0.4613, 0.6542, 0.3848, 0.5799]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4736, 0.4156, 0.4032, 0.4824],
        [0.4502, 0.4345, 0.3249, 0.5280],
        [0.5298, 0.5680, 0.4359, 0.6696],
        [0.4613, 0.6542, 0.3848, 0.5799]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.9220, 0.7980, 0.7202, 0.5453, 0.5926],
        [0.9271, 0.8130, 0.7850, 0.5890, 0.5711],
        [0.9215, 0.8264, 0.7316, 0.5300, 0.6001],
        [0.9288, 0.8290, 0.7561, 0.5668, 0.6080]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.9220, 0.7980, 0.7202, 0.5453, 0.5926],
        [0.9271, 0.8130, 0.7850, 0.5890, 0.5711],
        [0.9215, 0.8264, 0.7316, 0.5300, 0.6001],
        [0.9288, 0.8290, 0.7561, 0.5668, 0.6080]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9220, 0.7980, 0.7202, 0.5453, 0.5926],
        [0.9271, 0.8130, 0.7850, 0.5890, 0.5711],
        [0.9215, 0.8264, 0.7316, 0.5300, 0.6001],
        [0.9288, 0.8290, 0.7561, 0.5668, 0.6080]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],
        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],
        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8984, 0.8506, 0.9898, 0.9994, 0.9821],
        [0.8948, 0.8468, 0.9884, 0.9992, 0.9810],
        [0.8933, 0.8394, 0.9998, 1.0000, 0.9789],
        [1.0000, 1.0000, 1.0000, 0.9812, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9220, 0.7980, 0.7202, 0.5453, 0.5926],
        [0.9271, 0.8130, 0.7850, 0.5890, 0.5711],
        [0.9215, 0.8264, 0.7316, 0.5300, 0.6001],
        [0.9288, 0.8290, 0.7561, 0.5668, 0.6080]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4736, 0.4156, 0.4032, 0.4824],
        [0.4502, 0.4345, 0.3249, 0.5280],
        [0.5298, 0.5680, 0.4359, 0.6696],
        [0.4613, 0.6542, 0.3848, 0.5799]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(7, 1)]
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.4736, 0.4156, 0.4032, 0.4824],
        [0.4502, 0.4345, 0.3249, 0.5280],
        [0.5298, 0.5680, 0.4359, 0.6696],
        [0.4613, 0.6542, 0.3848, 0.5799]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9220, 0.7980, 0.7202, 0.5453],
        [0.5926, 0.9271, 0.8130, 0.7850],
        [0.5890, 0.5711, 0.9215, 0.8264],
        [0.7316, 0.5300, 0.6001, 0.9288]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9220, 0.7980, 0.7202, 0.5453],
        [0.5926, 0.9271, 0.8130, 0.7850],
        [0.5890, 0.5711, 0.9215, 0.8264],
        [0.7316, 0.5300, 0.6001, 0.9288]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.9000, 0.7926, 0.6579, 0.4422, 0.5581],
        [0.8847, 0.7766, 0.6827, 0.7110, 0.7546],
        [0.8871, 0.7136, 0.5961, 0.5320, 0.6210],
        [0.9059, 0.7247, 0.7826, 0.6445, 0.5337]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.9000, 0.7926, 0.6579, 0.4422, 0.5581],
        [0.8847, 0.7766, 0.6827, 0.7110, 0.7546],
        [0.8871, 0.7136, 0.5961, 0.5320, 0.6210],
        [0.9059, 0.7247, 0.7826, 0.6445, 0.5337]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9000, 0.7926, 0.6579, 0.4422, 0.5581],
        [0.8847, 0.7766, 0.6827, 0.7110, 0.7546],
        [0.8871, 0.7136, 0.5961, 0.5320, 0.6210],
        [0.9059, 0.7247, 0.7826, 0.6445, 0.5337]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8852, 0.7727, 0.6931, 0.7869, 0.8090],
        [0.9163, 0.7507, 0.6543, 0.4134, 0.4884],
        [0.9533, 0.8055, 0.5853, 0.3726, 0.5781],
        [0.9834, 0.9542, 0.9971, 0.9649, 0.4984]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9105, 0.7847, 0.7502, 0.5701, 0.5651],
        [0.8966, 0.7984, 0.6881, 0.5840, 0.6617],
        [0.8676, 0.6731, 0.5300, 0.5574, 0.6675],
        [0.8966, 0.6741, 0.7730, 0.6788, 0.5365]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9005, 0.7893, 0.6507, 0.4382, 0.5579],
        [0.8753, 0.7685, 0.6421, 0.6806, 0.7546],
        [0.8762, 0.7299, 0.5693, 0.5334, 0.6605],
        [0.8860, 0.7031, 0.7262, 0.7016, 0.6427]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8916, 0.7889, 0.6414, 0.4360, 0.5648],
        [0.8712, 0.7641, 0.6327, 0.6706, 0.7502],
        [0.8896, 0.7582, 0.6193, 0.5476, 0.6544],
        [0.8891, 0.7038, 0.7272, 0.6745, 0.6144]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.0000, 0.0000, 1.0000, 1.0000],
        [0.8713, 0.7642, 0.6312, 0.6641, 0.7462],
        [0.8904, 0.7563, 0.6227, 0.5566, 0.6572],
        [0.8939, 0.7132, 0.7388, 0.6619, 0.5966]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8984, 0.8506, 0.9898, 0.9994, 0.9821],
        [0.8948, 0.8468, 0.9884, 0.9992, 0.9810],
        [0.8933, 0.8394, 0.9998, 1.0000, 0.9789],
        [1.0000, 1.0000, 1.0000, 0.9812, 0.0000]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9220, 0.7980, 0.7202, 0.5453, 0.5926],
        [0.9271, 0.8130, 0.7850, 0.5890, 0.5711],
        [0.9215, 0.8264, 0.7316, 0.5300, 0.6001],
        [0.9288, 0.8290, 0.7561, 0.5668, 0.6080]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9000, 0.7926, 0.6579, 0.4422, 0.5581],
        [0.8847, 0.7766, 0.6827, 0.7110, 0.7546],
        [0.8871, 0.7136, 0.5961, 0.5320, 0.6210],
        [0.9059, 0.7247, 0.7826, 0.6445, 0.5337]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[4-64] _____________________________

batch_size = 64, split_size = 4

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5161, 0.3663, 0.4516, 0.4110, 0.5199],\n        [0.5438, 0.3767, 0.4361, 0.3682, 0.4840],\n        [0.5375, 0.3657, 0.4483, 0.3831, 0.4959],\n        [0.5251, 0.3499, 0.4668, 0.4099, 0.5162],\n        [0.5336, 0.3594, 0.4541, 0.3873, 0.5047],\n        [0.5306, 0.3621, 0.4518, 0.3891, 0.5072],\n        [0.5562, 0.3645, 0.4461, 0.3599, 0.4738],\n        [0.5245, 0.3513, 0.4637, 0.4032, 0.5186],\n        [0.5349, 0.3637, 0.4481, 0.3775, 0.5033],\n        [0.5495, 0.3441, 0.4750, 0.4073, 0.4807],\n        [0.5266, 0.3772, 0.4336, 0.3707, 0.5101],\n        [0.5450, 0.3524, 0.4615, 0.3857, 0.4912],\n        [0.5463, 0.3520, 0.4619, 0.3849, 0.4895],\n        [0.5065, 0.3441, 0.4834, 0.4688, 0.5267],\n        [0.5400, 0.3675, 0.4436, 0.3695, 0.4955],\n        [0.5476, 0.3706, 0.4372, 0.3512, 0.4871],\n        [0.5493, 0.3749, 0.4339, 0.3512, 0.4816],\n        [0.5378, 0.3465, 0.4740, 0.4190, 0.4940],\n        [0.5445, 0.3581, 0.4528, 0.3715, 0.4934],\n        [0.5583, 0.3807, 0.4256, 0.3334, 0.4686],\n        [0.5425, 0.3465, 0.4755, 0.4221, 0.4850],\n        [0.5260, 0.3515, 0.4665, 0.4136, 0.5122],\n        [0.5431, 0.3360, 0.4796, 0.4013, 0.4989],\n        [0.5499, 0.3510, 0.4628, 0.3832, 0.4848]...957, 0.4876, 0.5357],\n        [0.5226, 0.3475, 0.4738, 0.4312, 0.5134],\n        [0.5553, 0.3656, 0.4525, 0.3886, 0.4641],\n        [0.5368, 0.3524, 0.4611, 0.3892, 0.5034],\n        [0.5424, 0.3800, 0.4360, 0.3791, 0.4805],\n        [0.5253, 0.3506, 0.4698, 0.4244, 0.5097],\n        [0.5306, 0.3617, 0.4502, 0.3815, 0.5101],\n        [0.5356, 0.3403, 0.4774, 0.4123, 0.5043],\n        [0.5207, 0.3398, 0.4860, 0.4547, 0.5120],\n        [0.5266, 0.3483, 0.4731, 0.4287, 0.5073],\n        [0.5444, 0.3707, 0.4427, 0.3736, 0.4848],\n        [0.5579, 0.3784, 0.4268, 0.3313, 0.4712],\n        [0.5668, 0.3707, 0.4380, 0.3441, 0.4561],\n        [0.5260, 0.3651, 0.4536, 0.4088, 0.5053],\n        [0.5396, 0.3736, 0.4388, 0.3710, 0.4918],\n        [0.5447, 0.3753, 0.4326, 0.3504, 0.4890],\n        [0.5429, 0.3504, 0.4631, 0.3864, 0.4956],\n        [0.5270, 0.3488, 0.4670, 0.4060, 0.5152],\n        [0.5269, 0.3488, 0.4659, 0.4017, 0.5170],\n        [0.5116, 0.3720, 0.4476, 0.4170, 0.5213],\n        [0.5662, 0.3766, 0.4304, 0.3344, 0.4569],\n        [0.5437, 0.3458, 0.4751, 0.4174, 0.4852],\n        [0.5264, 0.3381, 0.4822, 0.4293, 0.5140],\n        [0.5349, 0.3571, 0.4570, 0.3901, 0.5031]], grad_fn=<ToCopyBackward0>), tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],\n        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],\n        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],\n        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394],\n        [0.9715, 0.9712, 0.9732, 0.9643, 0.9661],\n        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],\n        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],\n        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655],\n        [0.9733, 0.9731, 0.9751, 0.9665, 0.9682],\n        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],\n        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],\n        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680],\n        [0.9734, 0.9732, 0.9753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682],\n        [0.9734, 0.9733, 0.9753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682],\n        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],\n        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]...753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682],\n        [0.9734, 0.9733, 0.9753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682],\n        [0.9734, 0.9733, 0.9753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682],\n        [0.9734, 0.9733, 0.9753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682],\n        [0.9734, 0.9733, 0.9753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682],\n        [0.9734, 0.9733, 0.9753, 0.9666, 0.9683],\n        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],\n        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],\n        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 64
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 4
x          = tensor([[-1.2722,  0.6194, -1.1029],
        [-0.3280, -0.7621, -1.4723],
        [-0.0852, -0.0862, -0.7504],
       ...-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')
y0         = tensor([[0.5161, 0.3663, 0.4516, 0.4110, 0.5199],
        [0.5438, 0.3767, 0.4361, 0.3682, 0.4840],
        [0.5375, 0...[0.5264, 0.3381, 0.4822, 0.4293, 0.5140],
        [0.5349, 0.3571, 0.4570, 0.3901, 0.5031]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0...[0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-1.2722,  0.6194, -1.1029],
        [-0.3280, -0.7621, -1.4723],
        [-0.0852, -0.0862, -0.7504],
        [ 0.1998,  1.0224,  0.3497]], device='cuda:0'), tensor([[ 0.4128,  0.5621, -0.3439],
        [ 0.1314,  0.5793, -0.5906],
        [ 1.2485, -0.8465, -0.1150],
        [ 0.5526,  1.3175,  0.2365]], device='cuda:0'), tensor([[ 0.6517,  0.6454, -0.6789],
        [-0.0171, -1.0009,  1.1425],
        [ 0.1648,  0.9073, -1.8643],
        [ 0.8102, -0.0364,  0.4103]], device='cuda:0'), tensor([[ 0.8724, -0.1081,  0.4785],
        [-2.6253,  0.4549,  0.4611],
        [ 0.6755,  0.2745, -0.8829],
        [ 1.5984,  0.2923, -1.0209]], device='cuda:0'), tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0'), tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0'), tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0'), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-1.2722,  0.6194, -1.1029],
        [-0.3280, -0.7621, -1.4723],
        [-0.0852, -0.0862, -0.7504],
        [ 0.1998,  1.0224,  0.3497]], device='cuda:0')
after: tensor([[-1.2722,  0.6194, -1.1029],
        [-0.3280, -0.7621, -1.4723],
        [-0.0852, -0.0862, -0.7504],
        [ 0.1998,  1.0224,  0.3497]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([4, 3])
batch is tensor([[-1.2722,  0.6194, -1.1029],
        [-0.3280, -0.7621, -1.4723],
        [-0.0852, -0.0862, -0.7504],
        [ 0.1998,  1.0224,  0.3497]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.5886, 0.6092, 0.3905, 0.4596],
        [0.3628, 0.7176, 0.6819, 0.5886],
        [0.4977, 0.6775, 0.6129, 0.5560],
        [0.7076, 0.6039, 0.4791, 0.4964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.5886, 0.6092, 0.3905, 0.4596],
        [0.3628, 0.7176, 0.6819, 0.5886],
        [0.4977, 0.6775, 0.6129, 0.5560],
        [0.7076, 0.6039, 0.4791, 0.4964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5886, 0.6092, 0.3905, 0.4596],
        [0.3628, 0.7176, 0.6819, 0.5886],
        [0.4977, 0.6775, 0.6129, 0.5560],
        [0.7076, 0.6039, 0.4791, 0.4964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.5886, 0.6092, 0.3905, 0.4596],
        [0.3628, 0.7176, 0.6819, 0.5886],
        [0.4977, 0.6775, 0.6129, 0.5560],
        [0.7076, 0.6039, 0.4791, 0.4964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.4128,  0.5621, -0.3439],
        [ 0.1314,  0.5793, -0.5906],
        [ 1.2485, -0.8465, -0.1150],
        [ 0.5526,  1.3175,  0.2365]], device='cuda:0'), tensor([[ 0.6517,  0.6454, -0.6789],
        [-0.0171, -1.0009,  1.1425],
        [ 0.1648,  0.9073, -1.8643],
        [ 0.8102, -0.0364,  0.4103]], device='cuda:0'), tensor([[ 0.8724, -0.1081,  0.4785],
        [-2.6253,  0.4549,  0.4611],
        [ 0.6755,  0.2745, -0.8829],
        [ 1.5984,  0.2923, -1.0209]], device='cuda:0'), tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0'), tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0'), tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0'), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[ 0.4128,  0.5621, -0.3439],
        [ 0.1314,  0.5793, -0.5906],
        [ 1.2485, -0.8465, -0.1150],
        [ 0.5526,  1.3175,  0.2365]], device='cuda:0')
after: tensor([[ 0.4128,  0.5621, -0.3439],
        [ 0.1314,  0.5793, -0.5906],
        [ 1.2485, -0.8465, -0.1150],
        [ 0.5526,  1.3175,  0.2365]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.4128,  0.5621, -0.3439],
        [ 0.1314,  0.5793, -0.5906],
        [ 1.2485, -0.8465, -0.1150],
        [ 0.5526,  1.3175,  0.2365]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.5886, 0.6092, 0.3905, 0.4596],
        [0.3628, 0.7176, 0.6819, 0.5886],
        [0.4977, 0.6775, 0.6129, 0.5560],
        [0.7076, 0.6039, 0.4791, 0.4964]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.5890, 0.5711, 0.9215, 0.8264],
        [0.7316, 0.5300, 0.6001, 0.9288],
        [0.8290, 0.7561, 0.5668, 0.6080],
        [0.9000, 0.7926, 0.6579, 0.4422]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([4, 4])
batch is tensor([[0.5890, 0.5711, 0.9215, 0.8264],
        [0.7316, 0.5300, 0.6001, 0.9288],
        [0.8290, 0.7561, 0.5668, 0.6080],
        [0.9000, 0.7926, 0.6579, 0.4422]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.5931, 0.6815, 0.5756, 0.5626],
        [0.5823, 0.6797, 0.5454, 0.5520],
        [0.4214, 0.7287, 0.8092, 0.6463],
        [0.7169, 0.6424, 0.4799, 0.5270]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.5931, 0.6815, 0.5756, 0.5626],
        [0.5823, 0.6797, 0.5454, 0.5520],
        [0.4214, 0.7287, 0.8092, 0.6463],
        [0.7169, 0.6424, 0.4799, 0.5270]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5931, 0.6815, 0.5756, 0.5626],
        [0.5823, 0.6797, 0.5454, 0.5520],
        [0.4214, 0.7287, 0.8092, 0.6463],
        [0.7169, 0.6424, 0.4799, 0.5270]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5931, 0.6815, 0.5756, 0.5626],
        [0.5823, 0.6797, 0.5454, 0.5520],
        [0.4214, 0.7287, 0.8092, 0.6463],
        [0.7169, 0.6424, 0.4799, 0.5270]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.6517,  0.6454, -0.6789],
        [-0.0171, -1.0009,  1.1425],
        [ 0.1648,  0.9073, -1.8643],
        [ 0.8102, -0.0364,  0.4103]], device='cuda:0'), tensor([[ 0.8724, -0.1081,  0.4785],
        [-2.6253,  0.4549,  0.4611],
        [ 0.6755,  0.2745, -0.8829],
        [ 1.5984,  0.2923, -1.0209]], device='cuda:0'), tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0'), tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0'), tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0'), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[ 0.6517,  0.6454, -0.6789],
        [-0.0171, -1.0009,  1.1425],
        [ 0.1648,  0.9073, -1.8643],
        [ 0.8102, -0.0364,  0.4103]], device='cuda:0')
after: tensor([[ 0.6517,  0.6454, -0.6789],
        [-0.0171, -1.0009,  1.1425],
        [ 0.1648,  0.9073, -1.8643],
        [ 0.8102, -0.0364,  0.4103]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.6517,  0.6454, -0.6789],
        [-0.0171, -1.0009,  1.1425],
        [ 0.1648,  0.9073, -1.8643],
        [ 0.8102, -0.0364,  0.4103]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.5931, 0.6815, 0.5756, 0.5626],
        [0.5823, 0.6797, 0.5454, 0.5520],
        [0.4214, 0.7287, 0.8092, 0.6463],
        [0.7169, 0.6424, 0.4799, 0.5270]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9448, 0.9472, 0.9503, 0.9406],
        [0.9381, 0.9410, 0.9399, 0.9431],
        [0.9381, 0.9332, 0.9465, 0.9404],
        [0.9421, 0.9300, 0.9365, 0.9503]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9448, 0.9472, 0.9503, 0.9406],
        [0.9381, 0.9410, 0.9399, 0.9431],
        [0.9381, 0.9332, 0.9465, 0.9404],
        [0.9421, 0.9300, 0.9365, 0.9503]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.5636, 0.7250, 0.5952, 0.5992],
        [0.5656, 0.5181, 0.7084, 0.4748],
        [0.5006, 0.7746, 0.5220, 0.6175],
        [0.5800, 0.6520, 0.6838, 0.5667]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.5636, 0.7250, 0.5952, 0.5992],
        [0.5656, 0.5181, 0.7084, 0.4748],
        [0.5006, 0.7746, 0.5220, 0.6175],
        [0.5800, 0.6520, 0.6838, 0.5667]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5636, 0.7250, 0.5952, 0.5992],
        [0.5656, 0.5181, 0.7084, 0.4748],
        [0.5006, 0.7746, 0.5220, 0.6175],
        [0.5800, 0.6520, 0.6838, 0.5667]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5636, 0.7250, 0.5952, 0.5992],
        [0.5656, 0.5181, 0.7084, 0.4748],
        [0.5006, 0.7746, 0.5220, 0.6175],
        [0.5800, 0.6520, 0.6838, 0.5667]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8724, -0.1081,  0.4785],
        [-2.6253,  0.4549,  0.4611],
        [ 0.6755,  0.2745, -0.8829],
        [ 1.5984,  0.2923, -1.0209]], device='cuda:0'), tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0'), tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0'), tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0'), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[ 0.8724, -0.1081,  0.4785],
        [-2.6253,  0.4549,  0.4611],
        [ 0.6755,  0.2745, -0.8829],
        [ 1.5984,  0.2923, -1.0209]], device='cuda:0')
after: tensor([[ 0.8724, -0.1081,  0.4785],
        [-2.6253,  0.4549,  0.4611],
        [ 0.6755,  0.2745, -0.8829],
        [ 1.5984,  0.2923, -1.0209]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.8724, -0.1081,  0.4785],
        [-2.6253,  0.4549,  0.4611],
        [ 0.6755,  0.2745, -0.8829],
        [ 1.5984,  0.2923, -1.0209]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.5636, 0.7250, 0.5952, 0.5992],
        [0.5656, 0.5181, 0.7084, 0.4748],
        [0.5006, 0.7746, 0.5220, 0.6175],
        [0.5800, 0.6520, 0.6838, 0.5667]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9715, 0.9712, 0.9732, 0.9643],
        [0.9661, 0.9710, 0.9708, 0.9728],
        [0.9639, 0.9656, 0.9709, 0.9707],
        [0.9727, 0.9638, 0.9655, 0.9709]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9715, 0.9712, 0.9732, 0.9643],
        [0.9661, 0.9710, 0.9708, 0.9728],
        [0.9639, 0.9656, 0.9709, 0.9707],
        [0.9727, 0.9638, 0.9655, 0.9709]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.5759, 0.6515, 0.6974, 0.5696],
        [0.7431, 0.3505, 0.2585, 0.2762],
        [0.5004, 0.7423, 0.6484, 0.6192],
        [0.4568, 0.8080, 0.7363, 0.6969]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.5759, 0.6515, 0.6974, 0.5696],
        [0.7431, 0.3505, 0.2585, 0.2762],
        [0.5004, 0.7423, 0.6484, 0.6192],
        [0.4568, 0.8080, 0.7363, 0.6969]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5759, 0.6515, 0.6974, 0.5696],
        [0.7431, 0.3505, 0.2585, 0.2762],
        [0.5004, 0.7423, 0.6484, 0.6192],
        [0.4568, 0.8080, 0.7363, 0.6969]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5759, 0.6515, 0.6974, 0.5696],
        [0.7431, 0.3505, 0.2585, 0.2762],
        [0.5004, 0.7423, 0.6484, 0.6192],
        [0.4568, 0.8080, 0.7363, 0.6969]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0'), tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0'), tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0'), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0')
after: tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([4, 3])
batch is tensor([[ 1.0671, -0.2581, -1.2609],
        [-0.6629, -0.5282,  0.7170],
        [ 1.3145,  0.3620, -0.0664],
        [ 1.8727, -0.7475, -1.3975]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.5759, 0.6515, 0.6974, 0.5696],
        [0.7431, 0.3505, 0.2585, 0.2762],
        [0.5004, 0.7423, 0.6484, 0.6192],
        [0.4568, 0.8080, 0.7363, 0.6969]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9733, 0.9731, 0.9751, 0.9665],
        [0.9682, 0.9732, 0.9731, 0.9751],
        [0.9665, 0.9681, 0.9730, 0.9729],
        [0.9749, 0.9663, 0.9679, 0.9731]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9733, 0.9731, 0.9751, 0.9665],
        [0.9682, 0.9732, 0.9731, 0.9751],
        [0.9665, 0.9681, 0.9730, 0.9729],
        [0.9749, 0.9663, 0.9679, 0.9731]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.3903, 0.7931, 0.7509, 0.6790],
        [0.6029, 0.4990, 0.5889, 0.4339],
        [0.5643, 0.7271, 0.6914, 0.6262],
        [0.3012, 0.8437, 0.8512, 0.7496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.3903, 0.7931, 0.7509, 0.6790],
        [0.6029, 0.4990, 0.5889, 0.4339],
        [0.5643, 0.7271, 0.6914, 0.6262],
        [0.3012, 0.8437, 0.8512, 0.7496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3903, 0.7931, 0.7509, 0.6790],
        [0.6029, 0.4990, 0.5889, 0.4339],
        [0.5643, 0.7271, 0.6914, 0.6262],
        [0.3012, 0.8437, 0.8512, 0.7496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3903, 0.7931, 0.7509, 0.6790],
        [0.6029, 0.4990, 0.5889, 0.4339],
        [0.5643, 0.7271, 0.6914, 0.6262],
        [0.3012, 0.8437, 0.8512, 0.7496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0'), tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0'), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0')
after: tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([4, 3])
batch is tensor([[-1.0572, -1.1669,  0.7907],
        [-0.3078,  0.5847,  0.1982],
        [ 1.5942,  0.6805,  1.7650],
        [ 0.9807, -0.3459,  0.6486]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.3903, 0.7931, 0.7509, 0.6790],
        [0.6029, 0.4990, 0.5889, 0.4339],
        [0.5643, 0.7271, 0.6914, 0.6262],
        [0.3012, 0.8437, 0.8512, 0.7496]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9734, 0.9732, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9667, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9734, 0.9732, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9667, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.5503, 0.4590, 0.6292, 0.4096],
        [0.6668, 0.5751, 0.4841, 0.4703],
        [0.7421, 0.5973, 0.6581, 0.5438],
        [0.5605, 0.6464, 0.7321, 0.5742]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.5503, 0.4590, 0.6292, 0.4096],
        [0.6668, 0.5751, 0.4841, 0.4703],
        [0.7421, 0.5973, 0.6581, 0.5438],
        [0.5605, 0.6464, 0.7321, 0.5742]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5503, 0.4590, 0.6292, 0.4096],
        [0.6668, 0.5751, 0.4841, 0.4703],
        [0.7421, 0.5973, 0.6581, 0.5438],
        [0.5605, 0.6464, 0.7321, 0.5742]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5503, 0.4590, 0.6292, 0.4096],
        [0.6668, 0.5751, 0.4841, 0.4703],
        [0.7421, 0.5973, 0.6581, 0.5438],
        [0.5605, 0.6464, 0.7321, 0.5742]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0'), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0')
after: tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([4, 3])
batch is tensor([[-1.2428,  0.6815, -0.7578],
        [ 1.0009, -0.8014, -0.9961],
        [ 1.3079, -1.8746,  1.7403],
        [-1.3800,  2.0508, -0.0891]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.5503, 0.4590, 0.6292, 0.4096],
        [0.6668, 0.5751, 0.4841, 0.4703],
        [0.7421, 0.5973, 0.6581, 0.5438],
        [0.5605, 0.6464, 0.7321, 0.5742]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[ 3.6893e+19,  1.8684e+00, -0.0000e+00,  1.8683e+00],
        [-0.0000e+00,  1.8688e+00, -3.6893e+19,  1.8667e+00],
        [ 2.0000e+00,  1.8671e+00, -0.0000e+00,  1.8683e+00],
        [-2.0000e+00,  1.8683e+00,  2.0000e+00,  1.8688e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([4, 4])
batch is tensor([[ 3.6893e+19,  1.8684e+00, -0.0000e+00,  1.8683e+00],
        [-0.0000e+00,  1.8688e+00, -3.6893e+19,  1.8667e+00],
        [ 2.0000e+00,  1.8671e+00, -0.0000e+00,  1.8683e+00],
        [-2.0000e+00,  1.8683e+00,  2.0000e+00,  1.8688e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.6255, 0.5806, 0.3809, 0.4417],
        [0.3562, 0.7734, 0.7954, 0.6707],
        [0.4725, 0.5818, 0.8737, 0.5725],
        [0.8063, 0.5031, 0.2077, 0.3675]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.6255, 0.5806, 0.3809, 0.4417],
        [0.3562, 0.7734, 0.7954, 0.6707],
        [0.4725, 0.5818, 0.8737, 0.5725],
        [0.8063, 0.5031, 0.2077, 0.3675]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6255, 0.5806, 0.3809, 0.4417],
        [0.3562, 0.7734, 0.7954, 0.6707],
        [0.4725, 0.5818, 0.8737, 0.5725],
        [0.8063, 0.5031, 0.2077, 0.3675]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6255, 0.5806, 0.3809, 0.4417],
        [0.3562, 0.7734, 0.7954, 0.6707],
        [0.4725, 0.5818, 0.8737, 0.5725],
        [0.8063, 0.5031, 0.2077, 0.3675]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0'), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0')
after: tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.6998,  1.0121,  1.5008],
        [ 0.4755, -0.0622, -1.0427],
        [-0.1673, -0.3139, -0.6002],
        [-0.3036,  1.8790, -0.1486]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.6255, 0.5806, 0.3809, 0.4417],
        [0.3562, 0.7734, 0.7954, 0.6707],
        [0.4725, 0.5818, 0.8737, 0.5725],
        [0.8063, 0.5031, 0.2077, 0.3675]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.9932, 0.9920, 0.9923],
        [0.9907, 0.9911, 0.9375, 0.9843],
        [0.9779, 0.9714, 0.9572, 0.9375]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([4, 4])
batch is tensor([[1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.9932, 0.9920, 0.9923],
        [0.9907, 0.9911, 0.9375, 0.9843],
        [0.9779, 0.9714, 0.9572, 0.9375]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.7757, 0.5427, 0.5208, 0.4752],
        [0.4532, 0.7408, 0.6717, 0.6180],
        [0.4880, 0.6592, 0.6317, 0.5453],
        [0.7631, 0.6032, 0.3198, 0.4636]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.7757, 0.5427, 0.5208, 0.4752],
        [0.4532, 0.7408, 0.6717, 0.6180],
        [0.4880, 0.6592, 0.6317, 0.5453],
        [0.7631, 0.6032, 0.3198, 0.4636]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7757, 0.5427, 0.5208, 0.4752],
        [0.4532, 0.7408, 0.6717, 0.6180],
        [0.4880, 0.6592, 0.6317, 0.5453],
        [0.7631, 0.6032, 0.3198, 0.4636]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7757, 0.5427, 0.5208, 0.4752],
        [0.4532, 0.7408, 0.6717, 0.6180],
        [0.4880, 0.6592, 0.6317, 0.5453],
        [0.7631, 0.6032, 0.3198, 0.4636]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0'), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(8, 0), (7, 1)]
inputting microbatch 8 into partition 0
before moving to cuda:0: tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0')
after: tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0')
********************
observing microbatch 8
current batch shape is torch.Size([4, 3])
batch is tensor([[ 0.8087,  0.2902, -0.5878],
        [ 1.2641, -0.2730, -1.4527],
        [-1.3956, -1.0216, -1.4438],
        [-0.4973, -0.2779,  0.2106]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 8
********************
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.7757, 0.5427, 0.5208, 0.4752],
        [0.4532, 0.7408, 0.6717, 0.6180],
        [0.4880, 0.6592, 0.6317, 0.5453],
        [0.7631, 0.6032, 0.3198, 0.4636]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9753, 0.9753, 0.9772, 0.9690],
        [0.9705, 0.9750, 0.9748, 0.9768],
        [0.9685, 0.9701, 0.9738, 0.9735],
        [0.9754, 0.9670, 0.9687, 0.9729]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9753, 0.9753, 0.9772, 0.9690],
        [0.9705, 0.9750, 0.9748, 0.9768],
        [0.9685, 0.9701, 0.9738, 0.9735],
        [0.9754, 0.9670, 0.9687, 0.9729]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 8 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 8, tensor([[0.5252, 0.7301, 0.6563, 0.6141],
        [0.3651, 0.8154, 0.7705, 0.7028],
        [0.3724, 0.6331, 0.6038, 0.5016],
        [0.5796, 0.5598, 0.5805, 0.4710]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.5252, 0.7301, 0.6563, 0.6141],
        [0.3651, 0.8154, 0.7705, 0.7028],
        [0.3724, 0.6331, 0.6038, 0.5016],
        [0.5796, 0.5598, 0.5805, 0.4710]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5252, 0.7301, 0.6563, 0.6141],
        [0.3651, 0.8154, 0.7705, 0.7028],
        [0.3724, 0.6331, 0.6038, 0.5016],
        [0.5796, 0.5598, 0.5805, 0.4710]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5252, 0.7301, 0.6563, 0.6141],
        [0.3651, 0.8154, 0.7705, 0.7028],
        [0.3724, 0.6331, 0.6038, 0.5016],
        [0.5796, 0.5598, 0.5805, 0.4710]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0'), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(9, 0), (8, 1)]
inputting microbatch 9 into partition 0
before moving to cuda:0: tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0')
after: tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0')
********************
observing microbatch 9
current batch shape is torch.Size([4, 3])
batch is tensor([[-0.0328,  0.2937,  0.0731],
        [ 1.0531,  1.3722,  1.5773],
        [ 0.3697, -0.7145, -0.9441],
        [-1.1912,  1.4945,  2.1443]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 9
********************
inputting microbatch 8 into partition 1
before moving to cuda:1: tensor([[0.5252, 0.7301, 0.6563, 0.6141],
        [0.3651, 0.8154, 0.7705, 0.7028],
        [0.3724, 0.6331, 0.6038, 0.5016],
        [0.5796, 0.5598, 0.5805, 0.4710]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9736, 0.9734, 0.9754, 0.9668],
        [0.9685, 0.9735, 0.9734, 0.9754],
        [0.9669, 0.9685, 0.9733, 0.9732],
        [0.9752, 0.9667, 0.9682, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 8
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9736, 0.9734, 0.9754, 0.9668],
        [0.9685, 0.9735, 0.9734, 0.9754],
        [0.9669, 0.9685, 0.9733, 0.9732],
        [0.9752, 0.9667, 0.9682, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 8
********************
receiving microbatch 9 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 9, tensor([[0.6156, 0.6107, 0.5567, 0.5068],
        [0.8002, 0.5656, 0.5100, 0.4938],
        [0.3914, 0.7277, 0.7353, 0.6168],
        [0.8785, 0.3218, 0.2549, 0.2824]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.6156, 0.6107, 0.5567, 0.5068],
        [0.8002, 0.5656, 0.5100, 0.4938],
        [0.3914, 0.7277, 0.7353, 0.6168],
        [0.8785, 0.3218, 0.2549, 0.2824]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6156, 0.6107, 0.5567, 0.5068],
        [0.8002, 0.5656, 0.5100, 0.4938],
        [0.3914, 0.7277, 0.7353, 0.6168],
        [0.8785, 0.3218, 0.2549, 0.2824]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 8 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 8, tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 8
result is tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6156, 0.6107, 0.5567, 0.5068],
        [0.8002, 0.5656, 0.5100, 0.4938],
        [0.3914, 0.7277, 0.7353, 0.6168],
        [0.8785, 0.3218, 0.2549, 0.2824]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0'), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(10, 0), (9, 1)]
inputting microbatch 10 into partition 0
before moving to cuda:0: tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0')
after: tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0')
********************
observing microbatch 10
current batch shape is torch.Size([4, 3])
batch is tensor([[-2.4219,  1.2704,  1.4377],
        [-0.9641,  0.3569,  0.4589],
        [-1.0861, -2.3389, -0.3167],
        [ 0.8817,  0.6647,  0.2568]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 10
********************
inputting microbatch 9 into partition 1
before moving to cuda:1: tensor([[0.6156, 0.6107, 0.5567, 0.5068],
        [0.8002, 0.5656, 0.5100, 0.4938],
        [0.3914, 0.7277, 0.7353, 0.6168],
        [0.8785, 0.3218, 0.2549, 0.2824]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9735, 0.9733, 0.9753, 0.9666],
        [0.9684, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9682, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 9
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9735, 0.9733, 0.9753, 0.9666],
        [0.9684, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9682, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 9
********************
receiving microbatch 10 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 10, tensor([[0.8560, 0.2855, 0.1876, 0.2353],
        [0.6854, 0.4938, 0.4380, 0.4051],
        [0.3186, 0.5623, 0.7726, 0.4920],
        [0.6420, 0.6688, 0.6050, 0.5671]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.8560, 0.2855, 0.1876, 0.2353],
        [0.6854, 0.4938, 0.4380, 0.4051],
        [0.3186, 0.5623, 0.7726, 0.4920],
        [0.6420, 0.6688, 0.6050, 0.5671]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8560, 0.2855, 0.1876, 0.2353],
        [0.6854, 0.4938, 0.4380, 0.4051],
        [0.3186, 0.5623, 0.7726, 0.4920],
        [0.6420, 0.6688, 0.6050, 0.5671]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 9 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 9, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 9
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.8560, 0.2855, 0.1876, 0.2353],
        [0.6854, 0.4938, 0.4380, 0.4051],
        [0.3186, 0.5623, 0.7726, 0.4920],
        [0.6420, 0.6688, 0.6050, 0.5671]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0'), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(11, 0), (10, 1)]
inputting microbatch 11 into partition 0
before moving to cuda:0: tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0')
after: tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0')
********************
observing microbatch 11
current batch shape is torch.Size([4, 3])
batch is tensor([[-1.4751, -1.4687, -1.7721],
        [-0.9450,  0.1764,  0.2357],
        [ 0.7422,  1.0250, -0.5832],
        [ 0.6160,  0.5568,  1.2514]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 11
********************
inputting microbatch 10 into partition 1
before moving to cuda:1: tensor([[0.8560, 0.2855, 0.1876, 0.2353],
        [0.6854, 0.4938, 0.4380, 0.4051],
        [0.3186, 0.5623, 0.7726, 0.4920],
        [0.6420, 0.6688, 0.6050, 0.5671]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 10
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 10
********************
receiving microbatch 11 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 11, tensor([[0.3008, 0.6557, 0.6570, 0.5223],
        [0.6473, 0.5167, 0.4678, 0.4224],
        [0.6123, 0.7234, 0.5528, 0.5940],
        [0.7201, 0.5595, 0.5769, 0.4912]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.3008, 0.6557, 0.6570, 0.5223],
        [0.6473, 0.5167, 0.4678, 0.4224],
        [0.6123, 0.7234, 0.5528, 0.5940],
        [0.7201, 0.5595, 0.5769, 0.4912]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3008, 0.6557, 0.6570, 0.5223],
        [0.6473, 0.5167, 0.4678, 0.4224],
        [0.6123, 0.7234, 0.5528, 0.5940],
        [0.7201, 0.5595, 0.5769, 0.4912]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 10 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 10, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 10
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3008, 0.6557, 0.6570, 0.5223],
        [0.6473, 0.5167, 0.4678, 0.4224],
        [0.6123, 0.7234, 0.5528, 0.5940],
        [0.7201, 0.5595, 0.5769, 0.4912]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0'), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(12, 0), (11, 1)]
inputting microbatch 12 into partition 0
before moving to cuda:0: tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0')
after: tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0')
********************
observing microbatch 12
current batch shape is torch.Size([4, 3])
batch is tensor([[-1.6907, -0.0349,  1.0605],
        [-1.0631, -0.0061,  0.4262],
        [-0.1361, -0.6765, -0.9831],
        [ 2.3884, -0.3243, -1.2821]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 12
********************
inputting microbatch 11 into partition 1
before moving to cuda:1: tensor([[0.3008, 0.6557, 0.6570, 0.5223],
        [0.6473, 0.5167, 0.4678, 0.4224],
        [0.6123, 0.7234, 0.5528, 0.5940],
        [0.7201, 0.5595, 0.5769, 0.4912]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 11
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 11
********************
receiving microbatch 12 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 12, tensor([[0.7160, 0.3769, 0.4024, 0.3238],
        [0.6480, 0.4890, 0.4769, 0.4058],
        [0.4094, 0.6937, 0.6845, 0.5763],
        [0.3378, 0.8608, 0.8504, 0.7708]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.7160, 0.3769, 0.4024, 0.3238],
        [0.6480, 0.4890, 0.4769, 0.4058],
        [0.4094, 0.6937, 0.6845, 0.5763],
        [0.3378, 0.8608, 0.8504, 0.7708]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7160, 0.3769, 0.4024, 0.3238],
        [0.6480, 0.4890, 0.4769, 0.4058],
        [0.4094, 0.6937, 0.6845, 0.5763],
        [0.3378, 0.8608, 0.8504, 0.7708]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 11 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 11, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 11
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.7160, 0.3769, 0.4024, 0.3238],
        [0.6480, 0.4890, 0.4769, 0.4058],
        [0.4094, 0.6937, 0.6845, 0.5763],
        [0.3378, 0.8608, 0.8504, 0.7708]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0'), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(13, 0), (12, 1)]
inputting microbatch 13 into partition 0
before moving to cuda:0: tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0')
after: tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0')
********************
observing microbatch 13
current batch shape is torch.Size([4, 3])
batch is tensor([[ 2.0569, -2.1085,  0.3643],
        [-1.3915, -0.1953, -0.8588],
        [-0.0491, -0.2201, -1.3217],
        [ 1.2799,  0.3276, -1.4737]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 13
********************
inputting microbatch 12 into partition 1
before moving to cuda:1: tensor([[0.7160, 0.3769, 0.4024, 0.3238],
        [0.6480, 0.4890, 0.4769, 0.4058],
        [0.4094, 0.6937, 0.6845, 0.5763],
        [0.3378, 0.8608, 0.8504, 0.7708]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 12
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 12
********************
receiving microbatch 13 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 13, tensor([[0.3007, 0.7524, 0.9226, 0.7061],
        [0.5212, 0.5793, 0.4839, 0.4524],
        [0.4275, 0.7250, 0.6414, 0.5929],
        [0.4300, 0.8164, 0.7087, 0.6946]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.3007, 0.7524, 0.9226, 0.7061],
        [0.5212, 0.5793, 0.4839, 0.4524],
        [0.4275, 0.7250, 0.6414, 0.5929],
        [0.4300, 0.8164, 0.7087, 0.6946]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3007, 0.7524, 0.9226, 0.7061],
        [0.5212, 0.5793, 0.4839, 0.4524],
        [0.4275, 0.7250, 0.6414, 0.5929],
        [0.4300, 0.8164, 0.7087, 0.6946]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 12 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 12, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 12
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3007, 0.7524, 0.9226, 0.7061],
        [0.5212, 0.5793, 0.4839, 0.4524],
        [0.4275, 0.7250, 0.6414, 0.5929],
        [0.4300, 0.8164, 0.7087, 0.6946]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0'), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(14, 0), (13, 1)]
inputting microbatch 14 into partition 0
before moving to cuda:0: tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0')
after: tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0')
********************
observing microbatch 14
current batch shape is torch.Size([4, 3])
batch is tensor([[ 1.0498,  0.3056,  0.5201],
        [ 0.5118,  1.1048,  0.4681],
        [ 0.8530,  1.3620,  0.4885],
        [-2.1059,  0.3656, -1.6132]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 14
********************
inputting microbatch 13 into partition 1
before moving to cuda:1: tensor([[0.3007, 0.7524, 0.9226, 0.7061],
        [0.5212, 0.5793, 0.4839, 0.4524],
        [0.4275, 0.7250, 0.6414, 0.5929],
        [0.4300, 0.8164, 0.7087, 0.6946]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 13
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 13
********************
receiving microbatch 14 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 14, tensor([[0.6202, 0.6611, 0.6649, 0.5740],
        [0.7155, 0.6195, 0.5013, 0.5149],
        [0.7315, 0.6453, 0.5041, 0.5377],
        [0.5415, 0.5843, 0.3422, 0.4223]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.6202, 0.6611, 0.6649, 0.5740],
        [0.7155, 0.6195, 0.5013, 0.5149],
        [0.7315, 0.6453, 0.5041, 0.5377],
        [0.5415, 0.5843, 0.3422, 0.4223]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6202, 0.6611, 0.6649, 0.5740],
        [0.7155, 0.6195, 0.5013, 0.5149],
        [0.7315, 0.6453, 0.5041, 0.5377],
        [0.5415, 0.5843, 0.3422, 0.4223]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 13 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 13, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 13
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6202, 0.6611, 0.6649, 0.5740],
        [0.7155, 0.6195, 0.5013, 0.5149],
        [0.7315, 0.6453, 0.5041, 0.5377],
        [0.5415, 0.5843, 0.3422, 0.4223]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')]
====================
schedule for this step is
[(15, 0), (14, 1)]
inputting microbatch 15 into partition 0
before moving to cuda:0: tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')
after: tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')
********************
observing microbatch 15
current batch shape is torch.Size([4, 3])
batch is tensor([[ 2.3228, -1.8922, -0.1817],
        [-0.7111, -1.0166,  0.8655],
        [ 0.1532,  0.8851,  1.3983],
        [ 0.3930,  0.4533, -0.1416]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 15
********************
inputting microbatch 14 into partition 1
before moving to cuda:1: tensor([[0.6202, 0.6611, 0.6649, 0.5740],
        [0.7155, 0.6195, 0.5013, 0.5149],
        [0.7315, 0.6453, 0.5041, 0.5377],
        [0.5415, 0.5843, 0.3422, 0.4223]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 14
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 14
********************
receiving microbatch 15 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 15, tensor([[0.2718, 0.8032, 0.9248, 0.7451],
        [0.5625, 0.4823, 0.6453, 0.4315],
        [0.7721, 0.5041, 0.4780, 0.4369],
        [0.5998, 0.6637, 0.5852, 0.5520]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.2718, 0.8032, 0.9248, 0.7451],
        [0.5625, 0.4823, 0.6453, 0.4315],
        [0.7721, 0.5041, 0.4780, 0.4369],
        [0.5998, 0.6637, 0.5852, 0.5520]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2718, 0.8032, 0.9248, 0.7451],
        [0.5625, 0.4823, 0.6453, 0.4315],
        [0.7721, 0.5041, 0.4780, 0.4369],
        [0.5998, 0.6637, 0.5852, 0.5520]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 14 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 14, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 14
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2718, 0.8032, 0.9248, 0.7451],
        [0.5625, 0.4823, 0.6453, 0.4315],
        [0.7721, 0.5041, 0.4780, 0.4369],
        [0.5998, 0.6637, 0.5852, 0.5520]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(15, 1)]
inputting microbatch 15 into partition 1
before moving to cuda:1: tensor([[0.2718, 0.8032, 0.9248, 0.7451],
        [0.5625, 0.4823, 0.6453, 0.4315],
        [0.7721, 0.5041, 0.4780, 0.4369],
        [0.5998, 0.6637, 0.5852, 0.5520]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 15
current batch shape is torch.Size([4, 4])
batch is tensor([[0.9734, 0.9733, 0.9753, 0.9666],
        [0.9683, 0.9734, 0.9733, 0.9753],
        [0.9668, 0.9683, 0.9732, 0.9731],
        [0.9751, 0.9666, 0.9681, 0.9733]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 15
********************
receiving microbatch 15 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 15, tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 15
result is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9448, 0.9472, 0.9503, 0.9406, 0.9381],
        [0.9410, 0.9399, 0.9431, 0.9381, 0.9332],
        [0.9465, 0.9404, 0.9421, 0.9300, 0.9365],
        [0.9503, 0.9421, 0.9443, 0.9279, 0.9394]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9715, 0.9712, 0.9732, 0.9643, 0.9661],
        [0.9710, 0.9708, 0.9728, 0.9639, 0.9656],
        [0.9709, 0.9707, 0.9727, 0.9638, 0.9655],
        [0.9709, 0.9706, 0.9727, 0.9639, 0.9655]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9733, 0.9731, 0.9751, 0.9665, 0.9682],
        [0.9732, 0.9731, 0.9751, 0.9665, 0.9681],
        [0.9730, 0.9729, 0.9749, 0.9663, 0.9679],
        [0.9731, 0.9729, 0.9749, 0.9664, 0.9680]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9732, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9667, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9932, 0.9920, 0.9923, 0.9907, 0.9911],
        [0.9375, 0.9843, 0.9779, 0.9714, 0.9572]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9753, 0.9753, 0.9772, 0.9690, 0.9705],
        [0.9750, 0.9748, 0.9768, 0.9685, 0.9701],
        [0.9738, 0.9735, 0.9754, 0.9670, 0.9687],
        [0.9729, 0.9724, 0.9744, 0.9655, 0.9676]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9736, 0.9734, 0.9754, 0.9668, 0.9685],
        [0.9735, 0.9734, 0.9754, 0.9669, 0.9685],
        [0.9733, 0.9732, 0.9752, 0.9667, 0.9682],
        [0.9733, 0.9731, 0.9752, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9735, 0.9733, 0.9753, 0.9666, 0.9684],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9682],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9734, 0.9733, 0.9753, 0.9666, 0.9683],
        [0.9734, 0.9733, 0.9753, 0.9668, 0.9683],
        [0.9732, 0.9731, 0.9751, 0.9666, 0.9681],
        [0.9733, 0.9731, 0.9751, 0.9666, 0.9682]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[8-1] ______________________________

batch_size = 1, split_size = 8

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.3522, 0.4542, 0.4947, 0.4120, 0.4536]], grad_fn=<ToCopyBackward0>), tensor([[0.9912, 0.9912, 0.9912, 0.9911, 0.9911]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 1
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 8
x          = tensor([[0.4705, 0.9544, 2.1609]], device='cuda:0')
y0         = tensor([[0.3522, 0.4542, 0.4947, 0.4120, 0.4536]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9912, 0.9912, 0.9912, 0.9911, 0.9911]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[0.4705, 0.9544, 2.1609]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[0.4705, 0.9544, 2.1609]], device='cuda:0')
after: tensor([[0.4705, 0.9544, 2.1609]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[0.4705, 0.9544, 2.1609]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.6640, 0.2140, 0.6796, 0.1772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.6640, 0.2140, 0.6796, 0.1772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6640, 0.2140, 0.6796, 0.1772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.6640, 0.2140, 0.6796, 0.1772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(0, 1)]
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.6640, 0.2140, 0.6796, 0.1772]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9685, 0.9701, 0.9738, 0.9735]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9685, 0.9701, 0.9738, 0.9735]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9912, 0.9912, 0.9912, 0.9911, 0.9911]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9912, 0.9912, 0.9912, 0.9911, 0.9911]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9912, 0.9912, 0.9912, 0.9911, 0.9911]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9912, 0.9912, 0.9912, 0.9911, 0.9911]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[8-16] _____________________________

batch_size = 16, split_size = 8

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5580, 0.4154, 0.4779, 0.4453, 0.5274],\n        [0.5348, 0.4165, 0.5126, 0.4467, 0.5233],\n        [0.5298, 0.4155, 0.5214, 0.4467, 0.5211],\n        [0.5673, 0.4424, 0.4537, 0.4483, 0.5472],\n        [0.5505, 0.3855, 0.5136, 0.4369, 0.5061],\n        [0.5377, 0.4324, 0.4954, 0.4510, 0.5345],\n        [0.5461, 0.4287, 0.4936, 0.4461, 0.5351],\n        [0.5653, 0.4219, 0.4668, 0.4449, 0.5334],\n        [0.5741, 0.4240, 0.4522, 0.4451, 0.5362],\n        [0.5770, 0.4441, 0.4312, 0.4518, 0.5481],\n        [0.5747, 0.4227, 0.4574, 0.4426, 0.5360],\n        [0.5689, 0.4389, 0.4497, 0.4491, 0.5446],\n        [0.5294, 0.3939, 0.5351, 0.4421, 0.5066],\n        [0.5741, 0.4151, 0.4549, 0.4440, 0.5305],\n        [0.5703, 0.4288, 0.4505, 0.4481, 0.5382],\n        [0.5369, 0.4131, 0.5164, 0.4438, 0.5221]], grad_fn=<ToCopyBackward0>), tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n        [1.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],\n        [1.0000, 0.9959, 0.9904, 0.9902, 0.9902],\n        [1.0000, 0.9700, 0.9317, 0.9308, 0.9313],\n        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],\n        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],\n        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],\n        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],\n        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],\n        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],\n        [1.0000, 0.9968, 0.9922, 0.9922, 0.9922],\n        [1.0000, 0.9964, 0.9911, 0.9911, 0.9911],\n        [1.0000, 0.9951, 0.9881, 0.9880, 0.9880],\n        [1.0000, 0.9941, 0.9856, 0.9855, 0.9855],\n        [1.0000, 0.9932, 0.9836, 0.9835, 0.9835]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 16
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 8
x          = tensor([[-0.5456, -0.6525, -0.9333],
        [-0.9593,  0.5660,  0.0838],
        [-0.9879,  0.8627,  0.4334],
       ... 0.4774, -1.1083, -1.0273],
        [ 0.2494, -0.5059, -1.4212],
        [-0.0422,  0.8118,  1.0228]], device='cuda:0')
y0         = tensor([[0.5580, 0.4154, 0.4779, 0.4453, 0.5274],
        [0.5348, 0.4165, 0.5126, 0.4467, 0.5233],
        [0.5298, 0...[0.5703, 0.4288, 0.4505, 0.4481, 0.5382],
        [0.5369, 0.4131, 0.5164, 0.4438, 0.5221]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 1...[1.0000, 0.9941, 0.9856, 0.9855, 0.9855],
        [1.0000, 0.9932, 0.9836, 0.9835, 0.9835]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-0.5456, -0.6525, -0.9333],
        [-0.9593,  0.5660,  0.0838],
        [-0.9879,  0.8627,  0.4334],
        [ 1.6337,  0.8784, -0.1397],
        [-0.4096, -1.2125,  0.5718],
        [-1.0730,  0.9085, -0.6953],
        [ 0.7082,  1.1814,  0.7663],
        [ 0.5519, -0.2799, -0.4549]], device='cuda:0'), tensor([[ 1.1185, -0.4574, -0.6171],
        [ 1.1382,  0.0778, -1.6841],
        [ 1.9663, -0.0856,  0.3261],
        [ 0.9135,  0.2921, -0.9217],
        [-1.7941, -0.3370,  0.2622],
        [ 0.4774, -1.1083, -1.0273],
        [ 0.2494, -0.5059, -1.4212],
        [-0.0422,  0.8118,  1.0228]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-0.5456, -0.6525, -0.9333],
        [-0.9593,  0.5660,  0.0838],
        [-0.9879,  0.8627,  0.4334],
        [ 1.6337,  0.8784, -0.1397],
        [-0.4096, -1.2125,  0.5718],
        [-1.0730,  0.9085, -0.6953],
        [ 0.7082,  1.1814,  0.7663],
        [ 0.5519, -0.2799, -0.4549]], device='cuda:0')
after: tensor([[-0.5456, -0.6525, -0.9333],
        [-0.9593,  0.5660,  0.0838],
        [-0.9879,  0.8627,  0.4334],
        [ 1.6337,  0.8784, -0.1397],
        [-0.4096, -1.2125,  0.5718],
        [-1.0730,  0.9085, -0.6953],
        [ 0.7082,  1.1814,  0.7663],
        [ 0.5519, -0.2799, -0.4549]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([8, 3])
batch is tensor([[-0.5456, -0.6525, -0.9333],
        [-0.9593,  0.5660,  0.0838],
        [-0.9879,  0.8627,  0.4334],
        [ 1.6337,  0.8784, -0.1397],
        [-0.4096, -1.2125,  0.5718],
        [-1.0730,  0.9085, -0.6953],
        [ 0.7082,  1.1814,  0.7663],
        [ 0.5519, -0.2799, -0.4549]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.3784, 0.4367, 0.5800, 0.5015],
        [0.5537, 0.4338, 0.7226, 0.2778],
        [0.5992, 0.4403, 0.7529, 0.2330],
        [0.2368, 0.3282, 0.6235, 0.5020],
        [0.5374, 0.6133, 0.5907, 0.4599],
        [0.4759, 0.3429, 0.7230, 0.2875],
        [0.4323, 0.4008, 0.7177, 0.3207],
        [0.3091, 0.4201, 0.5748, 0.5363]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.3784, 0.4367, 0.5800, 0.5015],
        [0.5537, 0.4338, 0.7226, 0.2778],
        [0.5992, 0.4403, 0.7529, 0.2330],
        [0.2368, 0.3282, 0.6235, 0.5020],
        [0.5374, 0.6133, 0.5907, 0.4599],
        [0.4759, 0.3429, 0.7230, 0.2875],
        [0.4323, 0.4008, 0.7177, 0.3207],
        [0.3091, 0.4201, 0.5748, 0.5363]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3784, 0.4367, 0.5800, 0.5015],
        [0.5537, 0.4338, 0.7226, 0.2778],
        [0.5992, 0.4403, 0.7529, 0.2330],
        [0.2368, 0.3282, 0.6235, 0.5020],
        [0.5374, 0.6133, 0.5907, 0.4599],
        [0.4759, 0.3429, 0.7230, 0.2875],
        [0.4323, 0.4008, 0.7177, 0.3207],
        [0.3091, 0.4201, 0.5748, 0.5363]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.3784, 0.4367, 0.5800, 0.5015],
        [0.5537, 0.4338, 0.7226, 0.2778],
        [0.5992, 0.4403, 0.7529, 0.2330],
        [0.2368, 0.3282, 0.6235, 0.5020],
        [0.5374, 0.6133, 0.5907, 0.4599],
        [0.4759, 0.3429, 0.7230, 0.2875],
        [0.4323, 0.4008, 0.7177, 0.3207],
        [0.3091, 0.4201, 0.5748, 0.5363]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.1185, -0.4574, -0.6171],
        [ 1.1382,  0.0778, -1.6841],
        [ 1.9663, -0.0856,  0.3261],
        [ 0.9135,  0.2921, -0.9217],
        [-1.7941, -0.3370,  0.2622],
        [ 0.4774, -1.1083, -1.0273],
        [ 0.2494, -0.5059, -1.4212],
        [-0.0422,  0.8118,  1.0228]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[ 1.1185, -0.4574, -0.6171],
        [ 1.1382,  0.0778, -1.6841],
        [ 1.9663, -0.0856,  0.3261],
        [ 0.9135,  0.2921, -0.9217],
        [-1.7941, -0.3370,  0.2622],
        [ 0.4774, -1.1083, -1.0273],
        [ 0.2494, -0.5059, -1.4212],
        [-0.0422,  0.8118,  1.0228]], device='cuda:0')
after: tensor([[ 1.1185, -0.4574, -0.6171],
        [ 1.1382,  0.0778, -1.6841],
        [ 1.9663, -0.0856,  0.3261],
        [ 0.9135,  0.2921, -0.9217],
        [-1.7941, -0.3370,  0.2622],
        [ 0.4774, -1.1083, -1.0273],
        [ 0.2494, -0.5059, -1.4212],
        [-0.0422,  0.8118,  1.0228]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([8, 3])
batch is tensor([[ 1.1185, -0.4574, -0.6171],
        [ 1.1382,  0.0778, -1.6841],
        [ 1.9663, -0.0856,  0.3261],
        [ 0.9135,  0.2921, -0.9217],
        [-1.7941, -0.3370,  0.2622],
        [ 0.4774, -1.1083, -1.0273],
        [ 0.2494, -0.5059, -1.4212],
        [-0.0422,  0.8118,  1.0228]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.3784, 0.4367, 0.5800, 0.5015],
        [0.5537, 0.4338, 0.7226, 0.2778],
        [0.5992, 0.4403, 0.7529, 0.2330],
        [0.2368, 0.3282, 0.6235, 0.5020],
        [0.5374, 0.6133, 0.5907, 0.4599],
        [0.4759, 0.3429, 0.7230, 0.2875],
        [0.4323, 0.4008, 0.7177, 0.3207],
        [0.3091, 0.4201, 0.5748, 0.5363]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[ 3.6893e+19,  1.8728e+00,  3.6893e+19,  1.8728e+00],
        [-3.6893e+19,  1.8728e+00,  2.0000e+00,  1.8728e+00],
        [ 3.6893e+19,  1.8728e+00,  1.0842e-19,  1.8640e+00],
        [-0.0000e+00,  1.8628e+00,  0.0000e+00,  1.8735e+00],
        [ 1.0842e-19,  1.8743e+00, -2.0000e+00,  1.7879e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([8, 4])
batch is tensor([[ 3.6893e+19,  1.8728e+00,  3.6893e+19,  1.8728e+00],
        [-3.6893e+19,  1.8728e+00,  2.0000e+00,  1.8728e+00],
        [ 3.6893e+19,  1.8728e+00,  1.0842e-19,  1.8640e+00],
        [-0.0000e+00,  1.8628e+00,  0.0000e+00,  1.8735e+00],
        [ 1.0842e-19,  1.8743e+00, -2.0000e+00,  1.7879e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.2377, 0.4068, 0.5266, 0.6200],
        [0.1572, 0.2801, 0.5239, 0.6451],
        [0.2448, 0.4370, 0.5526, 0.5969],
        [0.2318, 0.3270, 0.5826, 0.5485],
        [0.6683, 0.5477, 0.7041, 0.2747],
        [0.2582, 0.4413, 0.4902, 0.6510],
        [0.2456, 0.3636, 0.5327, 0.6000],
        [0.5538, 0.4731, 0.7325, 0.2743]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.2377, 0.4068, 0.5266, 0.6200],
        [0.1572, 0.2801, 0.5239, 0.6451],
        [0.2448, 0.4370, 0.5526, 0.5969],
        [0.2318, 0.3270, 0.5826, 0.5485],
        [0.6683, 0.5477, 0.7041, 0.2747],
        [0.2582, 0.4413, 0.4902, 0.6510],
        [0.2456, 0.3636, 0.5327, 0.6000],
        [0.5538, 0.4731, 0.7325, 0.2743]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2377, 0.4068, 0.5266, 0.6200],
        [0.1572, 0.2801, 0.5239, 0.6451],
        [0.2448, 0.4370, 0.5526, 0.5969],
        [0.2318, 0.3270, 0.5826, 0.5485],
        [0.6683, 0.5477, 0.7041, 0.2747],
        [0.2582, 0.4413, 0.4902, 0.6510],
        [0.2456, 0.3636, 0.5327, 0.6000],
        [0.5538, 0.4731, 0.7325, 0.2743]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.9959, 0.9904, 0.9902, 0.9902],
        [1.0000, 0.9700, 0.9317, 0.9308, 0.9313],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.9959, 0.9904, 0.9902, 0.9902],
        [1.0000, 0.9700, 0.9317, 0.9308, 0.9313],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.9959, 0.9904, 0.9902, 0.9902],
        [1.0000, 0.9700, 0.9317, 0.9308, 0.9313],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.9959, 0.9904, 0.9902, 0.9902],
        [1.0000, 0.9700, 0.9317, 0.9308, 0.9313],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.2377, 0.4068, 0.5266, 0.6200],
        [0.1572, 0.2801, 0.5239, 0.6451],
        [0.2448, 0.4370, 0.5526, 0.5969],
        [0.2318, 0.3270, 0.5826, 0.5485],
        [0.6683, 0.5477, 0.7041, 0.2747],
        [0.2582, 0.4413, 0.4902, 0.6510],
        [0.2456, 0.3636, 0.5327, 0.6000],
        [0.5538, 0.4731, 0.7325, 0.2743]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(1, 1)]
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.2377, 0.4068, 0.5266, 0.6200],
        [0.1572, 0.2801, 0.5239, 0.6451],
        [0.2448, 0.4370, 0.5526, 0.5969],
        [0.2318, 0.3270, 0.5826, 0.5485],
        [0.6683, 0.5477, 0.7041, 0.2747],
        [0.2582, 0.4413, 0.4902, 0.6510],
        [0.2456, 0.3636, 0.5327, 0.6000],
        [0.5538, 0.4731, 0.7325, 0.2743]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 1.0000, 1.0000, 1.0000],
        [0.9959, 0.9904, 0.9902, 0.9902],
        [1.0000, 0.9700, 0.9317, 0.9308],
        [0.9313, 1.0000, 0.8668, 0.7293],
        [0.7293, 0.7293, 1.0000, 0.8668],
        [0.7293, 0.7293, 0.7293, 1.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([8, 4])
batch is tensor([[1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 1.0000, 1.0000, 1.0000],
        [0.9959, 0.9904, 0.9902, 0.9902],
        [1.0000, 0.9700, 0.9317, 0.9308],
        [0.9313, 1.0000, 0.8668, 0.7293],
        [0.7293, 0.7293, 1.0000, 0.8668],
        [0.7293, 0.7293, 0.7293, 1.0000]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9968, 0.9922, 0.9922, 0.9922],
        [1.0000, 0.9964, 0.9911, 0.9911, 0.9911],
        [1.0000, 0.9951, 0.9881, 0.9880, 0.9880],
        [1.0000, 0.9941, 0.9856, 0.9855, 0.9855],
        [1.0000, 0.9932, 0.9836, 0.9835, 0.9835]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9968, 0.9922, 0.9922, 0.9922],
        [1.0000, 0.9964, 0.9911, 0.9911, 0.9911],
        [1.0000, 0.9951, 0.9881, 0.9880, 0.9880],
        [1.0000, 0.9941, 0.9856, 0.9855, 0.9855],
        [1.0000, 0.9932, 0.9836, 0.9835, 0.9835]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9968, 0.9922, 0.9922, 0.9922],
        [1.0000, 0.9964, 0.9911, 0.9911, 0.9911],
        [1.0000, 0.9951, 0.9881, 0.9880, 0.9880],
        [1.0000, 0.9941, 0.9856, 0.9855, 0.9855],
        [1.0000, 0.9932, 0.9836, 0.9835, 0.9835]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [1.0000, 1.0000, 1.0000, 1.0000, 1.0000],
        [1.0000, 0.9959, 0.9904, 0.9902, 0.9902],
        [1.0000, 0.9700, 0.9317, 0.9308, 0.9313],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293],
        [1.0000, 0.8668, 0.7293, 0.7293, 0.7293]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9969, 0.9925, 0.9924, 0.9924],
        [1.0000, 0.9968, 0.9922, 0.9922, 0.9922],
        [1.0000, 0.9964, 0.9911, 0.9911, 0.9911],
        [1.0000, 0.9951, 0.9881, 0.9880, 0.9880],
        [1.0000, 0.9941, 0.9856, 0.9855, 0.9855],
        [1.0000, 0.9932, 0.9836, 0.9835, 0.9835]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[8-32] _____________________________

batch_size = 32, split_size = 8

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5502, 0.5123, 0.5801, 0.4182, 0.4281],\n        [0.5396, 0.4901, 0.5866, 0.4281, 0.4387],\n        [0.5469, 0.5144, 0.5808, 0.4208, 0.3941],\n        [0.5237, 0.4996, 0.5877, 0.4405, 0.3871],\n        [0.5260, 0.5018, 0.5870, 0.4379, 0.3908],\n        [0.5150, 0.4843, 0.5920, 0.4477, 0.4211],\n        [0.5650, 0.5220, 0.5754, 0.4087, 0.3916],\n        [0.5413, 0.5092, 0.5824, 0.4269, 0.3890],\n        [0.5071, 0.4863, 0.5931, 0.4547, 0.3875],\n        [0.5617, 0.5221, 0.5761, 0.4087, 0.4227],\n        [0.5411, 0.5086, 0.5825, 0.4270, 0.3952],\n        [0.5287, 0.4885, 0.5886, 0.4373, 0.4288],\n        [0.5507, 0.5129, 0.5800, 0.4171, 0.4334],\n        [0.5484, 0.5110, 0.5803, 0.4228, 0.3917],\n        [0.5250, 0.4951, 0.5878, 0.4407, 0.4074],\n        [0.5185, 0.4937, 0.5893, 0.4460, 0.3908],\n        [0.5567, 0.5181, 0.5779, 0.4145, 0.3925],\n        [0.5740, 0.5347, 0.5718, 0.3968, 0.4239],\n        [0.5489, 0.5128, 0.5802, 0.4202, 0.4083],\n        [0.5139, 0.4899, 0.5911, 0.4486, 0.4043],\n        [0.5359, 0.5069, 0.5840, 0.4306, 0.3898],\n        [0.5480, 0.5128, 0.5805, 0.4211, 0.3995],\n        [0.5429, 0.4959, 0.5852, 0.4236, 0.4473],\n        [0.5262, 0.5000, 0.5870, 0.4383, 0.3991],\n        [0.5413, 0.5101, 0.5824, 0.4260, 0.3937],\n        [0.5382, 0.5075, 0.5834, 0.4285, 0.4007],\n        [0.5531, 0.5086, 0.5805, 0.4150, 0.4504],\n        [0.5212, 0.4911, 0.5891, 0.4443, 0.4072],\n        [0.5560, 0.5174, 0.5782, 0.4127, 0.4346],\n        [0.5576, 0.5177, 0.5776, 0.4125, 0.4274],\n        [0.5393, 0.4990, 0.5848, 0.4272, 0.4371],\n        [0.5287, 0.5017, 0.5862, 0.4368, 0.3911]], grad_fn=<ToCopyBackward0>), tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],\n        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],\n        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],\n        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],\n        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],\n        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],\n        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],\n        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],\n        [0.9800, 0.9786, 0.9493, 0.9925, 0.9922],\n        [0.9814, 0.9794, 0.9512, 0.9930, 0.9928],\n        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],\n        [0.9806, 0.9785, 0.9511, 0.9927, 0.9925],\n        [0.9803, 0.9780, 0.9514, 0.9926, 0.9923],\n        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],\n        [0.9802, 0.9791, 0.9486, 0.9926, 0.9923],\n        [0.9813, 0.9792, 0.9512, 0.9930, 0.9927],\n        [0.9802, 0.9787, 0.9495, 0.9926, 0.9923],\n        [0.9802, 0.9791, 0.9490, 0.9926, 0.9923],\n        [0.9811, 0.9793, 0.9505, 0.9929, 0.9927],\n        [0.9805, 0.9785, 0.9510, 0.9927, 0.9924],\n        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],\n        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],\n        [0.9803, 0.9791, 0.9490, 0.9926, 0.9924],\n        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926],\n        [0.9802, 0.9787, 0.9495, 0.9926, 0.9923],\n        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],\n        [0.9810, 0.9793, 0.9504, 0.9929, 0.9926],\n        [0.9805, 0.9784, 0.9510, 0.9927, 0.9924],\n        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],\n        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],\n        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],\n        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 32
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 8
x          = tensor([[ 0.3123,  0.3496,  0.9697],
        [-0.8231, -1.6773, -0.3315],
        [ 0.4612,  1.6820,  0.4264],
       ... 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')
y0         = tensor([[0.5502, 0.5123, 0.5801, 0.4182, 0.4281],
        [0.5396, 0.4901, 0.5866, 0.4281, 0.4387],
        [0.5469, 0...[0.5393, 0.4990, 0.5848, 0.4272, 0.4371],
        [0.5287, 0.5017, 0.5862, 0.4368, 0.3911]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0...[0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 0.3123,  0.3496,  0.9697],
        [-0.8231, -1.6773, -0.3315],
        [ 0.4612,  1.6820,  0.4264],
        [-0.6316,  1.5259, -0.4991],
        [-0.6591,  1.9617,  0.1926],
        [-1.7335,  0.1152, -0.1078],
        [ 1.9775, -0.4748, -1.4922],
        [ 0.4474,  0.7422, -0.8365]], device='cuda:0'), tensor([[-1.7490,  1.1182, -1.4022],
        [ 1.3208,  0.2148,  0.7493],
        [ 0.3145,  0.6945, -0.5462],
        [-1.0739, -1.0033, -0.4879],
        [ 0.2332,  0.5409,  1.4303],
        [ 1.0218, -0.5642, -1.8476],
        [-0.6791,  0.0065, -0.8369],
        [-0.7452,  0.3631, -1.5833]], device='cuda:0'), tensor([[ 1.2784,  0.3857, -0.7496],
        [ 2.9132, -0.0826,  0.8177],
        [ 0.5349,  0.4991,  0.0769],
        [-1.4616,  1.0012, -0.2525],
        [ 0.0314,  1.3238, -0.3157],
        [ 0.6126,  0.6442, -0.2568],
        [-0.8545, -0.6290,  1.1067],
        [-0.6735,  1.2995,  0.0071]], device='cuda:0'), tensor([[ 0.2379,  1.3125, -0.0288],
        [-0.0337,  1.1555,  0.1483],
        [ 0.1755, -0.5758,  1.3717],
        [-0.7950, -0.5191, -1.4441],
        [ 0.6774,  0.4143,  1.4534],
        [ 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 0.3123,  0.3496,  0.9697],
        [-0.8231, -1.6773, -0.3315],
        [ 0.4612,  1.6820,  0.4264],
        [-0.6316,  1.5259, -0.4991],
        [-0.6591,  1.9617,  0.1926],
        [-1.7335,  0.1152, -0.1078],
        [ 1.9775, -0.4748, -1.4922],
        [ 0.4474,  0.7422, -0.8365]], device='cuda:0')
after: tensor([[ 0.3123,  0.3496,  0.9697],
        [-0.8231, -1.6773, -0.3315],
        [ 0.4612,  1.6820,  0.4264],
        [-0.6316,  1.5259, -0.4991],
        [-0.6591,  1.9617,  0.1926],
        [-1.7335,  0.1152, -0.1078],
        [ 1.9775, -0.4748, -1.4922],
        [ 0.4474,  0.7422, -0.8365]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([8, 3])
batch is tensor([[ 0.3123,  0.3496,  0.9697],
        [-0.8231, -1.6773, -0.3315],
        [ 0.4612,  1.6820,  0.4264],
        [-0.6316,  1.5259, -0.4991],
        [-0.6591,  1.9617,  0.1926],
        [-1.7335,  0.1152, -0.1078],
        [ 1.9775, -0.4748, -1.4922],
        [ 0.4474,  0.7422, -0.8365]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.3742, 0.4507, 0.7122, 0.6356],
        [0.1601, 0.3490, 0.6109, 0.4701],
        [0.6155, 0.3609, 0.5482, 0.7377],
        [0.5681, 0.2432, 0.3094, 0.6957],
        [0.5701, 0.2787, 0.3415, 0.6990],
        [0.2565, 0.2653, 0.3398, 0.5235],
        [0.6122, 0.3506, 0.7252, 0.7535],
        [0.5867, 0.2890, 0.4871, 0.7209]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.3742, 0.4507, 0.7122, 0.6356],
        [0.1601, 0.3490, 0.6109, 0.4701],
        [0.6155, 0.3609, 0.5482, 0.7377],
        [0.5681, 0.2432, 0.3094, 0.6957],
        [0.5701, 0.2787, 0.3415, 0.6990],
        [0.2565, 0.2653, 0.3398, 0.5235],
        [0.6122, 0.3506, 0.7252, 0.7535],
        [0.5867, 0.2890, 0.4871, 0.7209]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3742, 0.4507, 0.7122, 0.6356],
        [0.1601, 0.3490, 0.6109, 0.4701],
        [0.6155, 0.3609, 0.5482, 0.7377],
        [0.5681, 0.2432, 0.3094, 0.6957],
        [0.5701, 0.2787, 0.3415, 0.6990],
        [0.2565, 0.2653, 0.3398, 0.5235],
        [0.6122, 0.3506, 0.7252, 0.7535],
        [0.5867, 0.2890, 0.4871, 0.7209]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.3742, 0.4507, 0.7122, 0.6356],
        [0.1601, 0.3490, 0.6109, 0.4701],
        [0.6155, 0.3609, 0.5482, 0.7377],
        [0.5681, 0.2432, 0.3094, 0.6957],
        [0.5701, 0.2787, 0.3415, 0.6990],
        [0.2565, 0.2653, 0.3398, 0.5235],
        [0.6122, 0.3506, 0.7252, 0.7535],
        [0.5867, 0.2890, 0.4871, 0.7209]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.7490,  1.1182, -1.4022],
        [ 1.3208,  0.2148,  0.7493],
        [ 0.3145,  0.6945, -0.5462],
        [-1.0739, -1.0033, -0.4879],
        [ 0.2332,  0.5409,  1.4303],
        [ 1.0218, -0.5642, -1.8476],
        [-0.6791,  0.0065, -0.8369],
        [-0.7452,  0.3631, -1.5833]], device='cuda:0'), tensor([[ 1.2784,  0.3857, -0.7496],
        [ 2.9132, -0.0826,  0.8177],
        [ 0.5349,  0.4991,  0.0769],
        [-1.4616,  1.0012, -0.2525],
        [ 0.0314,  1.3238, -0.3157],
        [ 0.6126,  0.6442, -0.2568],
        [-0.8545, -0.6290,  1.1067],
        [-0.6735,  1.2995,  0.0071]], device='cuda:0'), tensor([[ 0.2379,  1.3125, -0.0288],
        [-0.0337,  1.1555,  0.1483],
        [ 0.1755, -0.5758,  1.3717],
        [-0.7950, -0.5191, -1.4441],
        [ 0.6774,  0.4143,  1.4534],
        [ 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-1.7490,  1.1182, -1.4022],
        [ 1.3208,  0.2148,  0.7493],
        [ 0.3145,  0.6945, -0.5462],
        [-1.0739, -1.0033, -0.4879],
        [ 0.2332,  0.5409,  1.4303],
        [ 1.0218, -0.5642, -1.8476],
        [-0.6791,  0.0065, -0.8369],
        [-0.7452,  0.3631, -1.5833]], device='cuda:0')
after: tensor([[-1.7490,  1.1182, -1.4022],
        [ 1.3208,  0.2148,  0.7493],
        [ 0.3145,  0.6945, -0.5462],
        [-1.0739, -1.0033, -0.4879],
        [ 0.2332,  0.5409,  1.4303],
        [ 1.0218, -0.5642, -1.8476],
        [-0.6791,  0.0065, -0.8369],
        [-0.7452,  0.3631, -1.5833]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([8, 3])
batch is tensor([[-1.7490,  1.1182, -1.4022],
        [ 1.3208,  0.2148,  0.7493],
        [ 0.3145,  0.6945, -0.5462],
        [-1.0739, -1.0033, -0.4879],
        [ 0.2332,  0.5409,  1.4303],
        [ 1.0218, -0.5642, -1.8476],
        [-0.6791,  0.0065, -0.8369],
        [-0.7452,  0.3631, -1.5833]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.3742, 0.4507, 0.7122, 0.6356],
        [0.1601, 0.3490, 0.6109, 0.4701],
        [0.6155, 0.3609, 0.5482, 0.7377],
        [0.5681, 0.2432, 0.3094, 0.6957],
        [0.5701, 0.2787, 0.3415, 0.6990],
        [0.2565, 0.2653, 0.3398, 0.5235],
        [0.6122, 0.3506, 0.7252, 0.7535],
        [0.5867, 0.2890, 0.4871, 0.7209]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.0000e+00, 1.8750e+00, 0.0000e+00, 1.8742e+00],
        [-0.0000e+00, 1.8731e+00, 3.6893e+19, 1.8731e+00],
        [2.0000e+00, 1.8731e+00, 0.0000e+00, 1.8750e+00],
        [0.0000e+00, 1.8742e+00, -0.0000e+00, 1.8731e+00],
        [3.6893e+19, 1.8731e+00, 2.0000e+00, 1.8731e+00],
        [0.0000e+00, 1.8750e+00, 0.0000e+00, 1.8742e+00],
        [-0.0000e+00, 1.8731e+00, 3.6893e+19, 1.8731e+00],
        [2.0000e+00, 1.8731e+00, 0.0000e+00, 1.8750e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([8, 4])
batch is tensor([[0.0000e+00, 1.8750e+00, 0.0000e+00, 1.8742e+00],
        [-0.0000e+00, 1.8731e+00, 3.6893e+19, 1.8731e+00],
        [2.0000e+00, 1.8731e+00, 0.0000e+00, 1.8750e+00],
        [0.0000e+00, 1.8742e+00, -0.0000e+00, 1.8731e+00],
        [3.6893e+19, 1.8731e+00, 2.0000e+00, 1.8731e+00],
        [0.0000e+00, 1.8750e+00, 0.0000e+00, 1.8742e+00],
        [-0.0000e+00, 1.8731e+00, 3.6893e+19, 1.8731e+00],
        [2.0000e+00, 1.8731e+00, 0.0000e+00, 1.8750e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.4798, 0.1601, 0.1543, 0.6322],
        [0.4656, 0.4914, 0.8047, 0.6942],
        [0.5444, 0.3070, 0.5086, 0.7027],
        [0.2107, 0.3013, 0.4916, 0.5046],
        [0.3572, 0.4817, 0.7328, 0.6280],
        [0.5406, 0.2793, 0.5745, 0.7082],
        [0.3802, 0.2615, 0.4046, 0.6100],
        [0.4830, 0.2001, 0.2834, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.4798, 0.1601, 0.1543, 0.6322],
        [0.4656, 0.4914, 0.8047, 0.6942],
        [0.5444, 0.3070, 0.5086, 0.7027],
        [0.2107, 0.3013, 0.4916, 0.5046],
        [0.3572, 0.4817, 0.7328, 0.6280],
        [0.5406, 0.2793, 0.5745, 0.7082],
        [0.3802, 0.2615, 0.4046, 0.6100],
        [0.4830, 0.2001, 0.2834, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4798, 0.1601, 0.1543, 0.6322],
        [0.4656, 0.4914, 0.8047, 0.6942],
        [0.5444, 0.3070, 0.5086, 0.7027],
        [0.2107, 0.3013, 0.4916, 0.5046],
        [0.3572, 0.4817, 0.7328, 0.6280],
        [0.5406, 0.2793, 0.5745, 0.7082],
        [0.3802, 0.2615, 0.4046, 0.6100],
        [0.4830, 0.2001, 0.2834, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],
        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],
        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],
        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],
        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],
        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],
        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],
        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],
        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4798, 0.1601, 0.1543, 0.6322],
        [0.4656, 0.4914, 0.8047, 0.6942],
        [0.5444, 0.3070, 0.5086, 0.7027],
        [0.2107, 0.3013, 0.4916, 0.5046],
        [0.3572, 0.4817, 0.7328, 0.6280],
        [0.5406, 0.2793, 0.5745, 0.7082],
        [0.3802, 0.2615, 0.4046, 0.6100],
        [0.4830, 0.2001, 0.2834, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.2784,  0.3857, -0.7496],
        [ 2.9132, -0.0826,  0.8177],
        [ 0.5349,  0.4991,  0.0769],
        [-1.4616,  1.0012, -0.2525],
        [ 0.0314,  1.3238, -0.3157],
        [ 0.6126,  0.6442, -0.2568],
        [-0.8545, -0.6290,  1.1067],
        [-0.6735,  1.2995,  0.0071]], device='cuda:0'), tensor([[ 0.2379,  1.3125, -0.0288],
        [-0.0337,  1.1555,  0.1483],
        [ 0.1755, -0.5758,  1.3717],
        [-0.7950, -0.5191, -1.4441],
        [ 0.6774,  0.4143,  1.4534],
        [ 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[ 1.2784,  0.3857, -0.7496],
        [ 2.9132, -0.0826,  0.8177],
        [ 0.5349,  0.4991,  0.0769],
        [-1.4616,  1.0012, -0.2525],
        [ 0.0314,  1.3238, -0.3157],
        [ 0.6126,  0.6442, -0.2568],
        [-0.8545, -0.6290,  1.1067],
        [-0.6735,  1.2995,  0.0071]], device='cuda:0')
after: tensor([[ 1.2784,  0.3857, -0.7496],
        [ 2.9132, -0.0826,  0.8177],
        [ 0.5349,  0.4991,  0.0769],
        [-1.4616,  1.0012, -0.2525],
        [ 0.0314,  1.3238, -0.3157],
        [ 0.6126,  0.6442, -0.2568],
        [-0.8545, -0.6290,  1.1067],
        [-0.6735,  1.2995,  0.0071]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([8, 3])
batch is tensor([[ 1.2784,  0.3857, -0.7496],
        [ 2.9132, -0.0826,  0.8177],
        [ 0.5349,  0.4991,  0.0769],
        [-1.4616,  1.0012, -0.2525],
        [ 0.0314,  1.3238, -0.3157],
        [ 0.6126,  0.6442, -0.2568],
        [-0.8545, -0.6290,  1.1067],
        [-0.6735,  1.2995,  0.0071]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.4798, 0.1601, 0.1543, 0.6322],
        [0.4656, 0.4914, 0.8047, 0.6942],
        [0.5444, 0.3070, 0.5086, 0.7027],
        [0.2107, 0.3013, 0.4916, 0.5046],
        [0.3572, 0.4817, 0.7328, 0.6280],
        [0.5406, 0.2793, 0.5745, 0.7082],
        [0.3802, 0.2615, 0.4046, 0.6100],
        [0.4830, 0.2001, 0.2834, 0.6524]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9770, 0.9769, 0.9462, 0.9914],
        [0.9910, 1.0000, 0.9769, 1.0000],
        [1.0000, 1.0000, 0.9968, 0.9968],
        [0.9462, 0.9988, 0.9988, 0.9770],
        [0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000],
        [1.0000, 0.9770, 0.9769, 0.9462],
        [0.9914, 0.9910, 1.0000, 0.9769]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9770, 0.9769, 0.9462, 0.9914],
        [0.9910, 1.0000, 0.9769, 1.0000],
        [1.0000, 1.0000, 0.9968, 0.9968],
        [0.9462, 0.9988, 0.9988, 0.9770],
        [0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000],
        [1.0000, 0.9770, 0.9769, 0.9462],
        [0.9914, 0.9910, 1.0000, 0.9769]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.6069, 0.3480, 0.6449, 0.7431],
        [0.5678, 0.5966, 0.9210, 0.7605],
        [0.4867, 0.3768, 0.6312, 0.6856],
        [0.3976, 0.2409, 0.2816, 0.6054],
        [0.5866, 0.2915, 0.4346, 0.7159],
        [0.5417, 0.3469, 0.5893, 0.7081],
        [0.1750, 0.4362, 0.6710, 0.4896],
        [0.4912, 0.2847, 0.3798, 0.6647]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.6069, 0.3480, 0.6449, 0.7431],
        [0.5678, 0.5966, 0.9210, 0.7605],
        [0.4867, 0.3768, 0.6312, 0.6856],
        [0.3976, 0.2409, 0.2816, 0.6054],
        [0.5866, 0.2915, 0.4346, 0.7159],
        [0.5417, 0.3469, 0.5893, 0.7081],
        [0.1750, 0.4362, 0.6710, 0.4896],
        [0.4912, 0.2847, 0.3798, 0.6647]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6069, 0.3480, 0.6449, 0.7431],
        [0.5678, 0.5966, 0.9210, 0.7605],
        [0.4867, 0.3768, 0.6312, 0.6856],
        [0.3976, 0.2409, 0.2816, 0.6054],
        [0.5866, 0.2915, 0.4346, 0.7159],
        [0.5417, 0.3469, 0.5893, 0.7081],
        [0.1750, 0.4362, 0.6710, 0.4896],
        [0.4912, 0.2847, 0.3798, 0.6647]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9800, 0.9786, 0.9493, 0.9925, 0.9922],
        [0.9814, 0.9794, 0.9512, 0.9930, 0.9928],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9806, 0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926, 0.9923],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9802, 0.9791, 0.9486, 0.9926, 0.9923],
        [0.9813, 0.9792, 0.9512, 0.9930, 0.9927]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9800, 0.9786, 0.9493, 0.9925, 0.9922],
        [0.9814, 0.9794, 0.9512, 0.9930, 0.9928],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9806, 0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926, 0.9923],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9802, 0.9791, 0.9486, 0.9926, 0.9923],
        [0.9813, 0.9792, 0.9512, 0.9930, 0.9927]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9800, 0.9786, 0.9493, 0.9925, 0.9922],
        [0.9814, 0.9794, 0.9512, 0.9930, 0.9928],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9806, 0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926, 0.9923],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9802, 0.9791, 0.9486, 0.9926, 0.9923],
        [0.9813, 0.9792, 0.9512, 0.9930, 0.9927]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],
        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],
        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9800, 0.9786, 0.9493, 0.9925, 0.9922],
        [0.9814, 0.9794, 0.9512, 0.9930, 0.9928],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9806, 0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926, 0.9923],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9802, 0.9791, 0.9486, 0.9926, 0.9923],
        [0.9813, 0.9792, 0.9512, 0.9930, 0.9927]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6069, 0.3480, 0.6449, 0.7431],
        [0.5678, 0.5966, 0.9210, 0.7605],
        [0.4867, 0.3768, 0.6312, 0.6856],
        [0.3976, 0.2409, 0.2816, 0.6054],
        [0.5866, 0.2915, 0.4346, 0.7159],
        [0.5417, 0.3469, 0.5893, 0.7081],
        [0.1750, 0.4362, 0.6710, 0.4896],
        [0.4912, 0.2847, 0.3798, 0.6647]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.2379,  1.3125, -0.0288],
        [-0.0337,  1.1555,  0.1483],
        [ 0.1755, -0.5758,  1.3717],
        [-0.7950, -0.5191, -1.4441],
        [ 0.6774,  0.4143,  1.4534],
        [ 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[ 0.2379,  1.3125, -0.0288],
        [-0.0337,  1.1555,  0.1483],
        [ 0.1755, -0.5758,  1.3717],
        [-0.7950, -0.5191, -1.4441],
        [ 0.6774,  0.4143,  1.4534],
        [ 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')
after: tensor([[ 0.2379,  1.3125, -0.0288],
        [-0.0337,  1.1555,  0.1483],
        [ 0.1755, -0.5758,  1.3717],
        [-0.7950, -0.5191, -1.4441],
        [ 0.6774,  0.4143,  1.4534],
        [ 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([8, 3])
batch is tensor([[ 0.2379,  1.3125, -0.0288],
        [-0.0337,  1.1555,  0.1483],
        [ 0.1755, -0.5758,  1.3717],
        [-0.7950, -0.5191, -1.4441],
        [ 0.6774,  0.4143,  1.4534],
        [ 0.9786, -0.0957,  0.6289],
        [-0.6764, -0.1633,  0.8610],
        [-0.3183,  1.0316, -0.6604]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.6069, 0.3480, 0.6449, 0.7431],
        [0.5678, 0.5966, 0.9210, 0.7605],
        [0.4867, 0.3768, 0.6312, 0.6856],
        [0.3976, 0.2409, 0.2816, 0.6054],
        [0.5866, 0.2915, 0.4346, 0.7159],
        [0.5417, 0.3469, 0.5893, 0.7081],
        [0.1750, 0.4362, 0.6710, 0.4896],
        [0.4912, 0.2847, 0.3798, 0.6647]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9800, 0.9786, 0.9493, 0.9925],
        [0.9922, 0.9814, 0.9794, 0.9512],
        [0.9930, 0.9928, 0.9819, 0.9796],
        [0.9519, 0.9932, 0.9930, 0.9806],
        [0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926],
        [0.9923, 0.9819, 0.9796, 0.9519],
        [0.9932, 0.9930, 0.9802, 0.9791]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9800, 0.9786, 0.9493, 0.9925],
        [0.9922, 0.9814, 0.9794, 0.9512],
        [0.9930, 0.9928, 0.9819, 0.9796],
        [0.9519, 0.9932, 0.9930, 0.9806],
        [0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926],
        [0.9923, 0.9819, 0.9796, 0.9519],
        [0.9932, 0.9930, 0.9802, 0.9791]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.5812, 0.3244, 0.4989, 0.7184],
        [0.5196, 0.3309, 0.4982, 0.6893],
        [0.2281, 0.5159, 0.8013, 0.5528],
        [0.3476, 0.2298, 0.3692, 0.5883],
        [0.3778, 0.5134, 0.7890, 0.6467],
        [0.4008, 0.4731, 0.7842, 0.6593],
        [0.2422, 0.4062, 0.6240, 0.5417],
        [0.5416, 0.2593, 0.3755, 0.6896]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.5812, 0.3244, 0.4989, 0.7184],
        [0.5196, 0.3309, 0.4982, 0.6893],
        [0.2281, 0.5159, 0.8013, 0.5528],
        [0.3476, 0.2298, 0.3692, 0.5883],
        [0.3778, 0.5134, 0.7890, 0.6467],
        [0.4008, 0.4731, 0.7842, 0.6593],
        [0.2422, 0.4062, 0.6240, 0.5417],
        [0.5416, 0.2593, 0.3755, 0.6896]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5812, 0.3244, 0.4989, 0.7184],
        [0.5196, 0.3309, 0.4982, 0.6893],
        [0.2281, 0.5159, 0.8013, 0.5528],
        [0.3476, 0.2298, 0.3692, 0.5883],
        [0.3778, 0.5134, 0.7890, 0.6467],
        [0.4008, 0.4731, 0.7842, 0.6593],
        [0.2422, 0.4062, 0.6240, 0.5417],
        [0.5416, 0.2593, 0.3755, 0.6896]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9791, 0.9490, 0.9926, 0.9923],
        [0.9811, 0.9793, 0.9505, 0.9929, 0.9927],
        [0.9805, 0.9785, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9803, 0.9791, 0.9490, 0.9926, 0.9924],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9791, 0.9490, 0.9926, 0.9923],
        [0.9811, 0.9793, 0.9505, 0.9929, 0.9927],
        [0.9805, 0.9785, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9803, 0.9791, 0.9490, 0.9926, 0.9924],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9791, 0.9490, 0.9926, 0.9923],
        [0.9811, 0.9793, 0.9505, 0.9929, 0.9927],
        [0.9805, 0.9785, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9803, 0.9791, 0.9490, 0.9926, 0.9924],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],
        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],
        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9800, 0.9786, 0.9493, 0.9925, 0.9922],
        [0.9814, 0.9794, 0.9512, 0.9930, 0.9928],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9806, 0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926, 0.9923],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9802, 0.9791, 0.9486, 0.9926, 0.9923],
        [0.9813, 0.9792, 0.9512, 0.9930, 0.9927]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9791, 0.9490, 0.9926, 0.9923],
        [0.9811, 0.9793, 0.9505, 0.9929, 0.9927],
        [0.9805, 0.9785, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9803, 0.9791, 0.9490, 0.9926, 0.9924],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5812, 0.3244, 0.4989, 0.7184],
        [0.5196, 0.3309, 0.4982, 0.6893],
        [0.2281, 0.5159, 0.8013, 0.5528],
        [0.3476, 0.2298, 0.3692, 0.5883],
        [0.3778, 0.5134, 0.7890, 0.6467],
        [0.4008, 0.4731, 0.7842, 0.6593],
        [0.2422, 0.4062, 0.6240, 0.5417],
        [0.5416, 0.2593, 0.3755, 0.6896]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(3, 1)]
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.5812, 0.3244, 0.4989, 0.7184],
        [0.5196, 0.3309, 0.4982, 0.6893],
        [0.2281, 0.5159, 0.8013, 0.5528],
        [0.3476, 0.2298, 0.3692, 0.5883],
        [0.3778, 0.5134, 0.7890, 0.6467],
        [0.4008, 0.4731, 0.7842, 0.6593],
        [0.2422, 0.4062, 0.6240, 0.5417],
        [0.5416, 0.2593, 0.3755, 0.6896]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9802, 0.9787, 0.9495, 0.9926],
        [0.9923, 0.9802, 0.9791, 0.9490],
        [0.9926, 0.9923, 0.9811, 0.9793],
        [0.9505, 0.9929, 0.9927, 0.9805],
        [0.9785, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927],
        [0.9924, 0.9802, 0.9787, 0.9496],
        [0.9926, 0.9923, 0.9803, 0.9791]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9802, 0.9787, 0.9495, 0.9926],
        [0.9923, 0.9802, 0.9791, 0.9490],
        [0.9926, 0.9923, 0.9811, 0.9793],
        [0.9505, 0.9929, 0.9927, 0.9805],
        [0.9785, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927],
        [0.9924, 0.9802, 0.9787, 0.9496],
        [0.9926, 0.9923, 0.9803, 0.9791]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9504, 0.9929, 0.9926],
        [0.9805, 0.9784, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9504, 0.9929, 0.9926],
        [0.9805, 0.9784, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9504, 0.9929, 0.9926],
        [0.9805, 0.9784, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988],
        [0.9770, 0.9769, 0.9461, 0.9913, 0.9910],
        [1.0000, 1.0000, 0.9924, 1.0000, 1.0000],
        [0.9770, 0.9769, 0.9462, 0.9914, 0.9910],
        [1.0000, 0.9769, 1.0000, 1.0000, 1.0000],
        [0.9968, 0.9968, 0.9462, 0.9988, 0.9988]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9800, 0.9786, 0.9493, 0.9925, 0.9922],
        [0.9814, 0.9794, 0.9512, 0.9930, 0.9928],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9806, 0.9785, 0.9511, 0.9927, 0.9925],
        [0.9803, 0.9780, 0.9514, 0.9926, 0.9923],
        [0.9819, 0.9796, 0.9519, 0.9932, 0.9930],
        [0.9802, 0.9791, 0.9486, 0.9926, 0.9923],
        [0.9813, 0.9792, 0.9512, 0.9930, 0.9927]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9791, 0.9490, 0.9926, 0.9923],
        [0.9811, 0.9793, 0.9505, 0.9929, 0.9927],
        [0.9805, 0.9785, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9803, 0.9791, 0.9490, 0.9926, 0.9924],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9802, 0.9787, 0.9495, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9504, 0.9929, 0.9926],
        [0.9805, 0.9784, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927, 0.9924],
        [0.9802, 0.9787, 0.9496, 0.9926, 0.9923],
        [0.9802, 0.9790, 0.9489, 0.9926, 0.9923],
        [0.9810, 0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[8-64] _____________________________

batch_size = 64, split_size = 8

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5623, 0.4702, 0.5089, 0.2940, 0.5023],\n        [0.5719, 0.4815, 0.5236, 0.3164, 0.5167],\n        [0.5846, 0.4945, 0.5135, 0.3612, 0.5286],\n        [0.5584, 0.4865, 0.5031, 0.3168, 0.5229],\n        [0.5858, 0.4829, 0.5094, 0.3461, 0.5137],\n        [0.5594, 0.4871, 0.5091, 0.3156, 0.5243],\n        [0.5476, 0.4859, 0.4872, 0.3097, 0.5219],\n        [0.5534, 0.4711, 0.4828, 0.2971, 0.5020],\n        [0.5652, 0.4870, 0.5127, 0.3216, 0.5236],\n        [0.5641, 0.4857, 0.5120, 0.3184, 0.5221],\n        [0.5533, 0.4692, 0.5024, 0.2841, 0.5024],\n        [0.5612, 0.4642, 0.5114, 0.2831, 0.4944],\n        [0.5501, 0.4747, 0.5143, 0.2817, 0.5122],\n        [0.5439, 0.4844, 0.4765, 0.3084, 0.5193],\n        [0.5682, 0.4875, 0.5408, 0.3108, 0.5285],\n        [0.5634, 0.4775, 0.4826, 0.3209, 0.5074],\n        [0.5813, 0.4862, 0.5003, 0.3503, 0.5171],\n        [0.5724, 0.4859, 0.5126, 0.3299, 0.5207],\n        [0.5794, 0.4765, 0.5321, 0.3152, 0.5081],\n        [0.5649, 0.4860, 0.5056, 0.3234, 0.5213],\n        [0.5418, 0.4774, 0.4976, 0.2841, 0.5141],\n        [0.5532, 0.4844, 0.4863, 0.3155, 0.5188],\n        [0.5261, 0.4816, 0.4843, 0.2776, 0.5191],\n        [0.5688, 0.4729, 0.4889, 0.3176, 0.5015]...082, 0.3207, 0.5155],\n        [0.5641, 0.4827, 0.5229, 0.3078, 0.5201],\n        [0.5400, 0.4826, 0.4858, 0.2958, 0.5188],\n        [0.5484, 0.4865, 0.4900, 0.3103, 0.5229],\n        [0.5694, 0.4759, 0.4913, 0.3218, 0.5055],\n        [0.5540, 0.4776, 0.4852, 0.3068, 0.5102],\n        [0.5500, 0.4761, 0.4727, 0.3057, 0.5071],\n        [0.5367, 0.4837, 0.4792, 0.2966, 0.5198],\n        [0.5597, 0.4866, 0.4843, 0.3290, 0.5200],\n        [0.5762, 0.4954, 0.5135, 0.3503, 0.5313],\n        [0.5667, 0.4847, 0.5225, 0.3146, 0.5219],\n        [0.5629, 0.4765, 0.5120, 0.3027, 0.5109],\n        [0.5380, 0.4857, 0.4757, 0.3028, 0.5218],\n        [0.5652, 0.4720, 0.5225, 0.2940, 0.5052],\n        [0.5581, 0.4821, 0.5217, 0.2992, 0.5208],\n        [0.5703, 0.4992, 0.4957, 0.3582, 0.5347],\n        [0.5922, 0.4990, 0.5347, 0.3679, 0.5351],\n        [0.5489, 0.4850, 0.4892, 0.3091, 0.5209],\n        [0.5654, 0.4843, 0.5059, 0.3215, 0.5192],\n        [0.5338, 0.4750, 0.4590, 0.2903, 0.5067],\n        [0.5640, 0.5006, 0.4956, 0.3512, 0.5383],\n        [0.5486, 0.4758, 0.5010, 0.2886, 0.5114],\n        [0.5637, 0.4810, 0.5119, 0.3105, 0.5163],\n        [0.5738, 0.4852, 0.5101, 0.3320, 0.5191]], grad_fn=<ToCopyBackward0>), tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],\n        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],\n        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],\n        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],\n        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],\n        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],\n        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],\n        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]...923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],\n        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 64
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 8
x          = tensor([[ 0.1394,  0.8863,  1.4747],
        [-1.1694,  0.7352,  0.2684],
        [-2.0996, -1.3268, -0.4669],
       ... 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')
y0         = tensor([[0.5623, 0.4702, 0.5089, 0.2940, 0.5023],
        [0.5719, 0.4815, 0.5236, 0.3164, 0.5167],
        [0.5846, 0...[0.5637, 0.4810, 0.5119, 0.3105, 0.5163],
        [0.5738, 0.4852, 0.5101, 0.3320, 0.5191]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0...[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 0.1394,  0.8863,  1.4747],
        [-1.1694,  0.7352,  0.2684],
        [-2.0996, -1.3268, -0.4669],
        [-0.4337,  0.1053, -0.6581],
        [-1.3574, -1.2379,  1.1709],
        [-0.6530,  0.4177, -0.8103],
        [ 0.3906, -0.1765, -0.8254],
        [ 1.1039, -0.2469,  1.3751]], device='cuda:0'), tensor([[-0.9409,  0.2579, -0.5708],
        [-0.8185,  0.3358, -0.4605],
        [ 0.6897,  1.0987,  1.2004],
        [ 0.4257,  1.3987,  2.3250],
        [ 0.1513,  2.0005, -0.0540],
        [ 0.8844, -0.5864, -0.6431],
        [-1.8680,  2.0620, -1.2434],
        [ 0.4124, -1.2293,  1.1802]], device='cuda:0'), tensor([[-1.1181, -1.6922,  0.7509],
        [-1.1287, -0.1881, -0.0489],
        [-1.4303,  1.0572,  1.4805],
        [-0.6901, -0.1388, -0.3016],
        [ 0.7648,  1.2707, -0.3616],
        [ 0.2941, -0.5429, -0.3215],
        [ 1.5037,  1.3365, -1.4112],
        [ 0.3134, -1.0107,  1.8953]], device='cuda:0'), tensor([[ 0.4335,  0.1074,  0.3725],
        [ 0.1855, -0.3946,  0.6520],
        [-1.6553,  1.1833, -0.1922],
        [-0.6365, -0.6265, -0.6041],
        [-0.0323,  0.5693,  0.8934],
        [ 1.1370, -0.2934,  1.1508],
        [ 1.8717, -0.4320,  0.4929],
        [-0.5414,  0.6492, -0.1422]], device='cuda:0'), tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0'), tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0'), tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0'), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 0.1394,  0.8863,  1.4747],
        [-1.1694,  0.7352,  0.2684],
        [-2.0996, -1.3268, -0.4669],
        [-0.4337,  0.1053, -0.6581],
        [-1.3574, -1.2379,  1.1709],
        [-0.6530,  0.4177, -0.8103],
        [ 0.3906, -0.1765, -0.8254],
        [ 1.1039, -0.2469,  1.3751]], device='cuda:0')
after: tensor([[ 0.1394,  0.8863,  1.4747],
        [-1.1694,  0.7352,  0.2684],
        [-2.0996, -1.3268, -0.4669],
        [-0.4337,  0.1053, -0.6581],
        [-1.3574, -1.2379,  1.1709],
        [-0.6530,  0.4177, -0.8103],
        [ 0.3906, -0.1765, -0.8254],
        [ 1.1039, -0.2469,  1.3751]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([8, 3])
batch is tensor([[ 0.1394,  0.8863,  1.4747],
        [-1.1694,  0.7352,  0.2684],
        [-2.0996, -1.3268, -0.4669],
        [-0.4337,  0.1053, -0.6581],
        [-1.3574, -1.2379,  1.1709],
        [-0.6530,  0.4177, -0.8103],
        [ 0.3906, -0.1765, -0.8254],
        [ 1.1039, -0.2469,  1.3751]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.7124, 0.4819, 0.5569, 0.5947],
        [0.6844, 0.5559, 0.5732, 0.4496],
        [0.5230, 0.6530, 0.3487, 0.3076],
        [0.4674, 0.4609, 0.5596, 0.4705],
        [0.6481, 0.6522, 0.2984, 0.4066],
        [0.4954, 0.4679, 0.5995, 0.4562],
        [0.3542, 0.3844, 0.5510, 0.5282],
        [0.5341, 0.4131, 0.4455, 0.6409]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.7124, 0.4819, 0.5569, 0.5947],
        [0.6844, 0.5559, 0.5732, 0.4496],
        [0.5230, 0.6530, 0.3487, 0.3076],
        [0.4674, 0.4609, 0.5596, 0.4705],
        [0.6481, 0.6522, 0.2984, 0.4066],
        [0.4954, 0.4679, 0.5995, 0.4562],
        [0.3542, 0.3844, 0.5510, 0.5282],
        [0.5341, 0.4131, 0.4455, 0.6409]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.7124, 0.4819, 0.5569, 0.5947],
        [0.6844, 0.5559, 0.5732, 0.4496],
        [0.5230, 0.6530, 0.3487, 0.3076],
        [0.4674, 0.4609, 0.5596, 0.4705],
        [0.6481, 0.6522, 0.2984, 0.4066],
        [0.4954, 0.4679, 0.5995, 0.4562],
        [0.3542, 0.3844, 0.5510, 0.5282],
        [0.5341, 0.4131, 0.4455, 0.6409]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.7124, 0.4819, 0.5569, 0.5947],
        [0.6844, 0.5559, 0.5732, 0.4496],
        [0.5230, 0.6530, 0.3487, 0.3076],
        [0.4674, 0.4609, 0.5596, 0.4705],
        [0.6481, 0.6522, 0.2984, 0.4066],
        [0.4954, 0.4679, 0.5995, 0.4562],
        [0.3542, 0.3844, 0.5510, 0.5282],
        [0.5341, 0.4131, 0.4455, 0.6409]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.9409,  0.2579, -0.5708],
        [-0.8185,  0.3358, -0.4605],
        [ 0.6897,  1.0987,  1.2004],
        [ 0.4257,  1.3987,  2.3250],
        [ 0.1513,  2.0005, -0.0540],
        [ 0.8844, -0.5864, -0.6431],
        [-1.8680,  2.0620, -1.2434],
        [ 0.4124, -1.2293,  1.1802]], device='cuda:0'), tensor([[-1.1181, -1.6922,  0.7509],
        [-1.1287, -0.1881, -0.0489],
        [-1.4303,  1.0572,  1.4805],
        [-0.6901, -0.1388, -0.3016],
        [ 0.7648,  1.2707, -0.3616],
        [ 0.2941, -0.5429, -0.3215],
        [ 1.5037,  1.3365, -1.4112],
        [ 0.3134, -1.0107,  1.8953]], device='cuda:0'), tensor([[ 0.4335,  0.1074,  0.3725],
        [ 0.1855, -0.3946,  0.6520],
        [-1.6553,  1.1833, -0.1922],
        [-0.6365, -0.6265, -0.6041],
        [-0.0323,  0.5693,  0.8934],
        [ 1.1370, -0.2934,  1.1508],
        [ 1.8717, -0.4320,  0.4929],
        [-0.5414,  0.6492, -0.1422]], device='cuda:0'), tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0'), tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0'), tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0'), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[-0.9409,  0.2579, -0.5708],
        [-0.8185,  0.3358, -0.4605],
        [ 0.6897,  1.0987,  1.2004],
        [ 0.4257,  1.3987,  2.3250],
        [ 0.1513,  2.0005, -0.0540],
        [ 0.8844, -0.5864, -0.6431],
        [-1.8680,  2.0620, -1.2434],
        [ 0.4124, -1.2293,  1.1802]], device='cuda:0')
after: tensor([[-0.9409,  0.2579, -0.5708],
        [-0.8185,  0.3358, -0.4605],
        [ 0.6897,  1.0987,  1.2004],
        [ 0.4257,  1.3987,  2.3250],
        [ 0.1513,  2.0005, -0.0540],
        [ 0.8844, -0.5864, -0.6431],
        [-1.8680,  2.0620, -1.2434],
        [ 0.4124, -1.2293,  1.1802]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([8, 3])
batch is tensor([[-0.9409,  0.2579, -0.5708],
        [-0.8185,  0.3358, -0.4605],
        [ 0.6897,  1.0987,  1.2004],
        [ 0.4257,  1.3987,  2.3250],
        [ 0.1513,  2.0005, -0.0540],
        [ 0.8844, -0.5864, -0.6431],
        [-1.8680,  2.0620, -1.2434],
        [ 0.4124, -1.2293,  1.1802]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.7124, 0.4819, 0.5569, 0.5947],
        [0.6844, 0.5559, 0.5732, 0.4496],
        [0.5230, 0.6530, 0.3487, 0.3076],
        [0.4674, 0.4609, 0.5596, 0.4705],
        [0.6481, 0.6522, 0.2984, 0.4066],
        [0.4954, 0.4679, 0.5995, 0.4562],
        [0.3542, 0.3844, 0.5510, 0.5282],
        [0.5341, 0.4131, 0.4455, 0.6409]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9926, 0.9923, 0.9810, 0.9793],
        [0.9504, 0.9929, 0.9926, 0.9805],
        [0.9784, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927],
        [0.9924, 0.9802, 0.9787, 0.9496],
        [0.9926, 0.9923, 0.9802, 0.9790],
        [0.9489, 0.9926, 0.9923, 0.9810],
        [0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9926, 0.9923, 0.9810, 0.9793],
        [0.9504, 0.9929, 0.9926, 0.9805],
        [0.9784, 0.9510, 0.9927, 0.9924],
        [0.9804, 0.9781, 0.9516, 0.9927],
        [0.9924, 0.9802, 0.9787, 0.9496],
        [0.9926, 0.9923, 0.9802, 0.9790],
        [0.9489, 0.9926, 0.9923, 0.9810],
        [0.9793, 0.9503, 0.9929, 0.9926]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.5361, 0.5089, 0.5632, 0.4343],
        [0.5441, 0.5004, 0.5694, 0.4494],
        [0.6569, 0.4143, 0.6063, 0.6371],
        [0.7967, 0.4803, 0.5808, 0.6511],
        [0.6366, 0.3912, 0.7461, 0.5849],
        [0.3035, 0.3571, 0.5025, 0.5637],
        [0.6823, 0.5264, 0.7660, 0.3873],
        [0.4936, 0.4909, 0.3298, 0.5552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.5361, 0.5089, 0.5632, 0.4343],
        [0.5441, 0.5004, 0.5694, 0.4494],
        [0.6569, 0.4143, 0.6063, 0.6371],
        [0.7967, 0.4803, 0.5808, 0.6511],
        [0.6366, 0.3912, 0.7461, 0.5849],
        [0.3035, 0.3571, 0.5025, 0.5637],
        [0.6823, 0.5264, 0.7660, 0.3873],
        [0.4936, 0.4909, 0.3298, 0.5552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5361, 0.5089, 0.5632, 0.4343],
        [0.5441, 0.5004, 0.5694, 0.4494],
        [0.6569, 0.4143, 0.6063, 0.6371],
        [0.7967, 0.4803, 0.5808, 0.6511],
        [0.6366, 0.3912, 0.7461, 0.5849],
        [0.3035, 0.3571, 0.5025, 0.5637],
        [0.6823, 0.5264, 0.7660, 0.3873],
        [0.4936, 0.4909, 0.3298, 0.5552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5361, 0.5089, 0.5632, 0.4343],
        [0.5441, 0.5004, 0.5694, 0.4494],
        [0.6569, 0.4143, 0.6063, 0.6371],
        [0.7967, 0.4803, 0.5808, 0.6511],
        [0.6366, 0.3912, 0.7461, 0.5849],
        [0.3035, 0.3571, 0.5025, 0.5637],
        [0.6823, 0.5264, 0.7660, 0.3873],
        [0.4936, 0.4909, 0.3298, 0.5552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.1181, -1.6922,  0.7509],
        [-1.1287, -0.1881, -0.0489],
        [-1.4303,  1.0572,  1.4805],
        [-0.6901, -0.1388, -0.3016],
        [ 0.7648,  1.2707, -0.3616],
        [ 0.2941, -0.5429, -0.3215],
        [ 1.5037,  1.3365, -1.4112],
        [ 0.3134, -1.0107,  1.8953]], device='cuda:0'), tensor([[ 0.4335,  0.1074,  0.3725],
        [ 0.1855, -0.3946,  0.6520],
        [-1.6553,  1.1833, -0.1922],
        [-0.6365, -0.6265, -0.6041],
        [-0.0323,  0.5693,  0.8934],
        [ 1.1370, -0.2934,  1.1508],
        [ 1.8717, -0.4320,  0.4929],
        [-0.5414,  0.6492, -0.1422]], device='cuda:0'), tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0'), tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0'), tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0'), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[-1.1181, -1.6922,  0.7509],
        [-1.1287, -0.1881, -0.0489],
        [-1.4303,  1.0572,  1.4805],
        [-0.6901, -0.1388, -0.3016],
        [ 0.7648,  1.2707, -0.3616],
        [ 0.2941, -0.5429, -0.3215],
        [ 1.5037,  1.3365, -1.4112],
        [ 0.3134, -1.0107,  1.8953]], device='cuda:0')
after: tensor([[-1.1181, -1.6922,  0.7509],
        [-1.1287, -0.1881, -0.0489],
        [-1.4303,  1.0572,  1.4805],
        [-0.6901, -0.1388, -0.3016],
        [ 0.7648,  1.2707, -0.3616],
        [ 0.2941, -0.5429, -0.3215],
        [ 1.5037,  1.3365, -1.4112],
        [ 0.3134, -1.0107,  1.8953]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([8, 3])
batch is tensor([[-1.1181, -1.6922,  0.7509],
        [-1.1287, -0.1881, -0.0489],
        [-1.4303,  1.0572,  1.4805],
        [-0.6901, -0.1388, -0.3016],
        [ 0.7648,  1.2707, -0.3616],
        [ 0.2941, -0.5429, -0.3215],
        [ 1.5037,  1.3365, -1.4112],
        [ 0.3134, -1.0107,  1.8953]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.5361, 0.5089, 0.5632, 0.4343],
        [0.5441, 0.5004, 0.5694, 0.4494],
        [0.6569, 0.4143, 0.6063, 0.6371],
        [0.7967, 0.4803, 0.5808, 0.6511],
        [0.6366, 0.3912, 0.7461, 0.5849],
        [0.3035, 0.3571, 0.5025, 0.5637],
        [0.6823, 0.5264, 0.7660, 0.3873],
        [0.4936, 0.4909, 0.3298, 0.5552]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9920, 0.9920, 0.9921, 0.9923],
        [0.9922, 0.9918, 0.9918, 0.9919],
        [0.9921, 0.9920, 0.9918, 0.9918],
        [0.9919, 0.9920, 0.9920, 0.9917],
        [0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919],
        [0.9919, 0.9920, 0.9920, 0.9921],
        [0.9923, 0.9922, 0.9918, 0.9918]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9920, 0.9920, 0.9921, 0.9923],
        [0.9922, 0.9918, 0.9918, 0.9919],
        [0.9921, 0.9920, 0.9918, 0.9918],
        [0.9919, 0.9920, 0.9920, 0.9917],
        [0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919],
        [0.9919, 0.9920, 0.9920, 0.9921],
        [0.9923, 0.9922, 0.9918, 0.9918]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.5447, 0.6240, 0.2750, 0.4039],
        [0.5764, 0.5589, 0.4795, 0.4208],
        [0.8230, 0.6234, 0.5455, 0.4679],
        [0.5119, 0.5059, 0.5072, 0.4520],
        [0.4887, 0.3405, 0.6981, 0.6084],
        [0.3887, 0.4221, 0.4794, 0.5238],
        [0.3145, 0.2447, 0.7584, 0.6425],
        [0.6020, 0.5263, 0.3192, 0.5713]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.5447, 0.6240, 0.2750, 0.4039],
        [0.5764, 0.5589, 0.4795, 0.4208],
        [0.8230, 0.6234, 0.5455, 0.4679],
        [0.5119, 0.5059, 0.5072, 0.4520],
        [0.4887, 0.3405, 0.6981, 0.6084],
        [0.3887, 0.4221, 0.4794, 0.5238],
        [0.3145, 0.2447, 0.7584, 0.6425],
        [0.6020, 0.5263, 0.3192, 0.5713]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5447, 0.6240, 0.2750, 0.4039],
        [0.5764, 0.5589, 0.4795, 0.4208],
        [0.8230, 0.6234, 0.5455, 0.4679],
        [0.5119, 0.5059, 0.5072, 0.4520],
        [0.4887, 0.3405, 0.6981, 0.6084],
        [0.3887, 0.4221, 0.4794, 0.5238],
        [0.3145, 0.2447, 0.7584, 0.6425],
        [0.6020, 0.5263, 0.3192, 0.5713]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5447, 0.6240, 0.2750, 0.4039],
        [0.5764, 0.5589, 0.4795, 0.4208],
        [0.8230, 0.6234, 0.5455, 0.4679],
        [0.5119, 0.5059, 0.5072, 0.4520],
        [0.4887, 0.3405, 0.6981, 0.6084],
        [0.3887, 0.4221, 0.4794, 0.5238],
        [0.3145, 0.2447, 0.7584, 0.6425],
        [0.6020, 0.5263, 0.3192, 0.5713]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.4335,  0.1074,  0.3725],
        [ 0.1855, -0.3946,  0.6520],
        [-1.6553,  1.1833, -0.1922],
        [-0.6365, -0.6265, -0.6041],
        [-0.0323,  0.5693,  0.8934],
        [ 1.1370, -0.2934,  1.1508],
        [ 1.8717, -0.4320,  0.4929],
        [-0.5414,  0.6492, -0.1422]], device='cuda:0'), tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0'), tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0'), tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0'), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[ 0.4335,  0.1074,  0.3725],
        [ 0.1855, -0.3946,  0.6520],
        [-1.6553,  1.1833, -0.1922],
        [-0.6365, -0.6265, -0.6041],
        [-0.0323,  0.5693,  0.8934],
        [ 1.1370, -0.2934,  1.1508],
        [ 1.8717, -0.4320,  0.4929],
        [-0.5414,  0.6492, -0.1422]], device='cuda:0')
after: tensor([[ 0.4335,  0.1074,  0.3725],
        [ 0.1855, -0.3946,  0.6520],
        [-1.6553,  1.1833, -0.1922],
        [-0.6365, -0.6265, -0.6041],
        [-0.0323,  0.5693,  0.8934],
        [ 1.1370, -0.2934,  1.1508],
        [ 1.8717, -0.4320,  0.4929],
        [-0.5414,  0.6492, -0.1422]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([8, 3])
batch is tensor([[ 0.4335,  0.1074,  0.3725],
        [ 0.1855, -0.3946,  0.6520],
        [-1.6553,  1.1833, -0.1922],
        [-0.6365, -0.6265, -0.6041],
        [-0.0323,  0.5693,  0.8934],
        [ 1.1370, -0.2934,  1.1508],
        [ 1.8717, -0.4320,  0.4929],
        [-0.5414,  0.6492, -0.1422]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.5447, 0.6240, 0.2750, 0.4039],
        [0.5764, 0.5589, 0.4795, 0.4208],
        [0.8230, 0.6234, 0.5455, 0.4679],
        [0.5119, 0.5059, 0.5072, 0.4520],
        [0.4887, 0.3405, 0.6981, 0.6084],
        [0.3887, 0.4221, 0.4794, 0.5238],
        [0.3145, 0.2447, 0.7584, 0.6425],
        [0.6020, 0.5263, 0.3192, 0.5713]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.5081, 0.4245, 0.5253, 0.5706],
        [0.5217, 0.4706, 0.4458, 0.5442],
        [0.7078, 0.5713, 0.6377, 0.4090],
        [0.4322, 0.4987, 0.4649, 0.4359],
        [0.6446, 0.4799, 0.5449, 0.5574],
        [0.5013, 0.4017, 0.4519, 0.6369],
        [0.3515, 0.3151, 0.4834, 0.6739],
        [0.5810, 0.4811, 0.5958, 0.4893]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.5081, 0.4245, 0.5253, 0.5706],
        [0.5217, 0.4706, 0.4458, 0.5442],
        [0.7078, 0.5713, 0.6377, 0.4090],
        [0.4322, 0.4987, 0.4649, 0.4359],
        [0.6446, 0.4799, 0.5449, 0.5574],
        [0.5013, 0.4017, 0.4519, 0.6369],
        [0.3515, 0.3151, 0.4834, 0.6739],
        [0.5810, 0.4811, 0.5958, 0.4893]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5081, 0.4245, 0.5253, 0.5706],
        [0.5217, 0.4706, 0.4458, 0.5442],
        [0.7078, 0.5713, 0.6377, 0.4090],
        [0.4322, 0.4987, 0.4649, 0.4359],
        [0.6446, 0.4799, 0.5449, 0.5574],
        [0.5013, 0.4017, 0.4519, 0.6369],
        [0.3515, 0.3151, 0.4834, 0.6739],
        [0.5810, 0.4811, 0.5958, 0.4893]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5081, 0.4245, 0.5253, 0.5706],
        [0.5217, 0.4706, 0.4458, 0.5442],
        [0.7078, 0.5713, 0.6377, 0.4090],
        [0.4322, 0.4987, 0.4649, 0.4359],
        [0.6446, 0.4799, 0.5449, 0.5574],
        [0.5013, 0.4017, 0.4519, 0.6369],
        [0.3515, 0.3151, 0.4834, 0.6739],
        [0.5810, 0.4811, 0.5958, 0.4893]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0'), tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0'), tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0'), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(4, 0), (3, 1)]
inputting microbatch 4 into partition 0
before moving to cuda:0: tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0')
after: tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0')
********************
observing microbatch 4
current batch shape is torch.Size([8, 3])
batch is tensor([[-0.4051, -1.5482,  0.2434],
        [ 0.6291,  1.0690, -0.2187],
        [-1.0980,  1.4882, -2.7280],
        [-0.3222,  0.3646, -2.6363],
        [-0.9583, -0.2935,  0.5700],
        [ 0.4321, -0.9813, -2.0284],
        [-1.4953,  0.4888, -0.9314],
        [ 0.5406,  0.4383,  1.3874]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 4
********************
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.5081, 0.4245, 0.5253, 0.5706],
        [0.5217, 0.4706, 0.4458, 0.5442],
        [0.7078, 0.5713, 0.6377, 0.4090],
        [0.4322, 0.4987, 0.4649, 0.4359],
        [0.6446, 0.4799, 0.5449, 0.5574],
        [0.5013, 0.4017, 0.4519, 0.6369],
        [0.3515, 0.3151, 0.4834, 0.6739],
        [0.5810, 0.4811, 0.5958, 0.4893]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 4 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 4, tensor([[0.4335, 0.5343, 0.3233, 0.4534],
        [0.5010, 0.3619, 0.6684, 0.5960],
        [0.4030, 0.4037, 0.7814, 0.3974],
        [0.2684, 0.3624, 0.6849, 0.4347],
        [0.6220, 0.5719, 0.4390, 0.4483],
        [0.1917, 0.3492, 0.5162, 0.4788],
        [0.5634, 0.5402, 0.5972, 0.3857],
        [0.6394, 0.4505, 0.5158, 0.6136]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.4335, 0.5343, 0.3233, 0.4534],
        [0.5010, 0.3619, 0.6684, 0.5960],
        [0.4030, 0.4037, 0.7814, 0.3974],
        [0.2684, 0.3624, 0.6849, 0.4347],
        [0.6220, 0.5719, 0.4390, 0.4483],
        [0.1917, 0.3492, 0.5162, 0.4788],
        [0.5634, 0.5402, 0.5972, 0.3857],
        [0.6394, 0.4505, 0.5158, 0.6136]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4335, 0.5343, 0.3233, 0.4534],
        [0.5010, 0.3619, 0.6684, 0.5960],
        [0.4030, 0.4037, 0.7814, 0.3974],
        [0.2684, 0.3624, 0.6849, 0.4347],
        [0.6220, 0.5719, 0.4390, 0.4483],
        [0.1917, 0.3492, 0.5162, 0.4788],
        [0.5634, 0.5402, 0.5972, 0.3857],
        [0.6394, 0.4505, 0.5158, 0.6136]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4335, 0.5343, 0.3233, 0.4534],
        [0.5010, 0.3619, 0.6684, 0.5960],
        [0.4030, 0.4037, 0.7814, 0.3974],
        [0.2684, 0.3624, 0.6849, 0.4347],
        [0.6220, 0.5719, 0.4390, 0.4483],
        [0.1917, 0.3492, 0.5162, 0.4788],
        [0.5634, 0.5402, 0.5972, 0.3857],
        [0.6394, 0.4505, 0.5158, 0.6136]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0'), tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0'), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(5, 0), (4, 1)]
inputting microbatch 5 into partition 0
before moving to cuda:0: tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0')
after: tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0')
********************
observing microbatch 5
current batch shape is torch.Size([8, 3])
batch is tensor([[-0.6667, -0.0635,  0.3708],
        [-0.9533,  1.1928, -0.3521],
        [ 0.8736,  0.3551, -0.7748],
        [ 0.2586, -0.0760, -0.9076],
        [ 0.0647, -0.9997,  1.4937],
        [ 0.6497, -0.3992,  0.5634],
        [ 1.2144, -0.8841,  0.8285],
        [ 1.1199,  0.0843, -0.9661]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 5
********************
inputting microbatch 4 into partition 1
before moving to cuda:1: tensor([[0.4335, 0.5343, 0.3233, 0.4534],
        [0.5010, 0.3619, 0.6684, 0.5960],
        [0.4030, 0.4037, 0.7814, 0.3974],
        [0.2684, 0.3624, 0.6849, 0.4347],
        [0.6220, 0.5719, 0.4390, 0.4483],
        [0.1917, 0.3492, 0.5162, 0.4788],
        [0.5634, 0.5402, 0.5972, 0.3857],
        [0.6394, 0.4505, 0.5158, 0.6136]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 4
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 4
********************
receiving microbatch 5 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 5, tensor([[0.5928, 0.5311, 0.4825, 0.4736],
        [0.6361, 0.4986, 0.6592, 0.4633],
        [0.3594, 0.3337, 0.6201, 0.5836],
        [0.3640, 0.3907, 0.5644, 0.5176],
        [0.5797, 0.5320, 0.3339, 0.5403],
        [0.4689, 0.4238, 0.4591, 0.5803],
        [0.4093, 0.3941, 0.3999, 0.6206],
        [0.3004, 0.3115, 0.6031, 0.5919]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.5928, 0.5311, 0.4825, 0.4736],
        [0.6361, 0.4986, 0.6592, 0.4633],
        [0.3594, 0.3337, 0.6201, 0.5836],
        [0.3640, 0.3907, 0.5644, 0.5176],
        [0.5797, 0.5320, 0.3339, 0.5403],
        [0.4689, 0.4238, 0.4591, 0.5803],
        [0.4093, 0.3941, 0.3999, 0.6206],
        [0.3004, 0.3115, 0.6031, 0.5919]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.5928, 0.5311, 0.4825, 0.4736],
        [0.6361, 0.4986, 0.6592, 0.4633],
        [0.3594, 0.3337, 0.6201, 0.5836],
        [0.3640, 0.3907, 0.5644, 0.5176],
        [0.5797, 0.5320, 0.3339, 0.5403],
        [0.4689, 0.4238, 0.4591, 0.5803],
        [0.4093, 0.3941, 0.3999, 0.6206],
        [0.3004, 0.3115, 0.6031, 0.5919]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 4 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 4, tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 4
result is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.5928, 0.5311, 0.4825, 0.4736],
        [0.6361, 0.4986, 0.6592, 0.4633],
        [0.3594, 0.3337, 0.6201, 0.5836],
        [0.3640, 0.3907, 0.5644, 0.5176],
        [0.5797, 0.5320, 0.3339, 0.5403],
        [0.4689, 0.4238, 0.4591, 0.5803],
        [0.4093, 0.3941, 0.3999, 0.6206],
        [0.3004, 0.3115, 0.6031, 0.5919]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0'), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(6, 0), (5, 1)]
inputting microbatch 6 into partition 0
before moving to cuda:0: tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0')
after: tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0')
********************
observing microbatch 6
current batch shape is torch.Size([8, 3])
batch is tensor([[ 0.0106, -1.1927, -0.1993],
        [-1.8270, -0.7660, -1.0132],
        [-1.1320,  0.8960, -0.4314],
        [-0.2979,  0.7778,  0.6063],
        [ 1.0667, -0.3147, -1.1291],
        [-0.4331,  1.5283,  1.2417],
        [-0.6984,  1.6115, -0.6499],
        [-1.3414, -1.6934, -1.4224]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 6
********************
inputting microbatch 5 into partition 1
before moving to cuda:1: tensor([[0.5928, 0.5311, 0.4825, 0.4736],
        [0.6361, 0.4986, 0.6592, 0.4633],
        [0.3594, 0.3337, 0.6201, 0.5836],
        [0.3640, 0.3907, 0.5644, 0.5176],
        [0.5797, 0.5320, 0.3339, 0.5403],
        [0.4689, 0.4238, 0.4591, 0.5803],
        [0.4093, 0.3941, 0.3999, 0.6206],
        [0.3004, 0.3115, 0.6031, 0.5919]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 5
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 5
********************
receiving microbatch 6 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 6, tensor([[0.3759, 0.4681, 0.3909, 0.4860],
        [0.4811, 0.5949, 0.4449, 0.3278],
        [0.6198, 0.5186, 0.6267, 0.4386],
        [0.6520, 0.4878, 0.5787, 0.5330],
        [0.2625, 0.3175, 0.5634, 0.5732],
        [0.7718, 0.5112, 0.6316, 0.5579],
        [0.6143, 0.4524, 0.7196, 0.4879],
        [0.3214, 0.5533, 0.3669, 0.3329]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.3759, 0.4681, 0.3909, 0.4860],
        [0.4811, 0.5949, 0.4449, 0.3278],
        [0.6198, 0.5186, 0.6267, 0.4386],
        [0.6520, 0.4878, 0.5787, 0.5330],
        [0.2625, 0.3175, 0.5634, 0.5732],
        [0.7718, 0.5112, 0.6316, 0.5579],
        [0.6143, 0.4524, 0.7196, 0.4879],
        [0.3214, 0.5533, 0.3669, 0.3329]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3759, 0.4681, 0.3909, 0.4860],
        [0.4811, 0.5949, 0.4449, 0.3278],
        [0.6198, 0.5186, 0.6267, 0.4386],
        [0.6520, 0.4878, 0.5787, 0.5330],
        [0.2625, 0.3175, 0.5634, 0.5732],
        [0.7718, 0.5112, 0.6316, 0.5579],
        [0.6143, 0.4524, 0.7196, 0.4879],
        [0.3214, 0.5533, 0.3669, 0.3329]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 5 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 5, tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 5
result is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.3759, 0.4681, 0.3909, 0.4860],
        [0.4811, 0.5949, 0.4449, 0.3278],
        [0.6198, 0.5186, 0.6267, 0.4386],
        [0.6520, 0.4878, 0.5787, 0.5330],
        [0.2625, 0.3175, 0.5634, 0.5732],
        [0.7718, 0.5112, 0.6316, 0.5579],
        [0.6143, 0.4524, 0.7196, 0.4879],
        [0.3214, 0.5533, 0.3669, 0.3329]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')]
====================
schedule for this step is
[(7, 0), (6, 1)]
inputting microbatch 7 into partition 0
before moving to cuda:0: tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')
after: tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')
********************
observing microbatch 7
current batch shape is torch.Size([8, 3])
batch is tensor([[-3.3654, -0.6653, -1.1890],
        [ 0.3354, -0.0982, -0.6872],
        [-0.6294, -0.0928, -0.0889],
        [ 2.2989, -0.6787,  0.4183],
        [-1.1937, -1.3224, -2.0126],
        [ 0.5217,  1.0654,  0.1302],
        [-0.5508,  0.5438,  0.0962],
        [-1.0729, -0.4037,  0.1650]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 7
********************
inputting microbatch 6 into partition 1
before moving to cuda:1: tensor([[0.3759, 0.4681, 0.3909, 0.4860],
        [0.4811, 0.5949, 0.4449, 0.3278],
        [0.6198, 0.5186, 0.6267, 0.4386],
        [0.6520, 0.4878, 0.5787, 0.5330],
        [0.2625, 0.3175, 0.5634, 0.5732],
        [0.7718, 0.5112, 0.6316, 0.5579],
        [0.6143, 0.4524, 0.7196, 0.4879],
        [0.3214, 0.5533, 0.3669, 0.3329]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 6
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 6
********************
receiving microbatch 7 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 7, tensor([[0.6073, 0.7158, 0.4349, 0.2234],
        [0.3797, 0.3934, 0.5523, 0.5293],
        [0.5347, 0.5084, 0.5031, 0.4638],
        [0.2924, 0.2833, 0.4662, 0.6977],
        [0.2784, 0.5056, 0.4416, 0.3388],
        [0.5507, 0.3856, 0.6501, 0.5961],
        [0.6001, 0.4947, 0.5715, 0.4921],
        [0.5783, 0.5677, 0.4440, 0.4254]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.6073, 0.7158, 0.4349, 0.2234],
        [0.3797, 0.3934, 0.5523, 0.5293],
        [0.5347, 0.5084, 0.5031, 0.4638],
        [0.2924, 0.2833, 0.4662, 0.6977],
        [0.2784, 0.5056, 0.4416, 0.3388],
        [0.5507, 0.3856, 0.6501, 0.5961],
        [0.6001, 0.4947, 0.5715, 0.4921],
        [0.5783, 0.5677, 0.4440, 0.4254]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6073, 0.7158, 0.4349, 0.2234],
        [0.3797, 0.3934, 0.5523, 0.5293],
        [0.5347, 0.5084, 0.5031, 0.4638],
        [0.2924, 0.2833, 0.4662, 0.6977],
        [0.2784, 0.5056, 0.4416, 0.3388],
        [0.5507, 0.3856, 0.6501, 0.5961],
        [0.6001, 0.4947, 0.5715, 0.4921],
        [0.5783, 0.5677, 0.4440, 0.4254]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 6 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 6, tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 6
result is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6073, 0.7158, 0.4349, 0.2234],
        [0.3797, 0.3934, 0.5523, 0.5293],
        [0.5347, 0.5084, 0.5031, 0.4638],
        [0.2924, 0.2833, 0.4662, 0.6977],
        [0.2784, 0.5056, 0.4416, 0.3388],
        [0.5507, 0.3856, 0.6501, 0.5961],
        [0.6001, 0.4947, 0.5715, 0.4921],
        [0.5783, 0.5677, 0.4440, 0.4254]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(7, 1)]
inputting microbatch 7 into partition 1
before moving to cuda:1: tensor([[0.6073, 0.7158, 0.4349, 0.2234],
        [0.3797, 0.3934, 0.5523, 0.5293],
        [0.5347, 0.5084, 0.5031, 0.4638],
        [0.2924, 0.2833, 0.4662, 0.6977],
        [0.2784, 0.5056, 0.4416, 0.3388],
        [0.5507, 0.3856, 0.6501, 0.5961],
        [0.6001, 0.4947, 0.5715, 0.4921],
        [0.5783, 0.5677, 0.4440, 0.4254]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 7
current batch shape is torch.Size([8, 4])
batch is tensor([[0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922],
        [0.9923, 0.9924, 0.9924, 0.9922],
        [0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924],
        [0.9924, 0.9922, 0.9922, 0.9923],
        [0.9924, 0.9924, 0.9922, 0.9922]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 7
********************
receiving microbatch 7 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 7, tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 7
result is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9921, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9917, 0.9917, 0.9918, 0.9919, 0.9919],
        [0.9920, 0.9920, 0.9921, 0.9923, 0.9922],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920],
        [0.9918, 0.9918, 0.9919, 0.9920, 0.9920]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924],
        [0.9922, 0.9922, 0.9923, 0.9924, 0.9924]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
_____________________________ test_forward_0[16-1] _____________________________

batch_size = 1, split_size = 16

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5693, 0.5328, 0.5131, 0.3483, 0.5680]], grad_fn=<ToCopyBackward0>), tensor([[0.8090, 0.9665, 0.9627, 0.9516, 0.9540]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 1
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 16
x          = tensor([[ 1.1779,  0.7047, -0.4349]], device='cuda:0')
y0         = tensor([[0.5693, 0.5328, 0.5131, 0.3483, 0.5680]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.8090, 0.9665, 0.9627, 0.9516, 0.9540]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 1.1779,  0.7047, -0.4349]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 1.1779,  0.7047, -0.4349]], device='cuda:0')
after: tensor([[ 1.1779,  0.7047, -0.4349]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([1, 3])
batch is tensor([[ 1.1779,  0.7047, -0.4349]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.2030, 0.6238, 0.5120, 0.6188]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.2030, 0.6238, 0.5120, 0.6188]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.2030, 0.6238, 0.5120, 0.6188]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.2030, 0.6238, 0.5120, 0.6188]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(0, 1)]
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.2030, 0.6238, 0.5120, 0.6188]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9220, 0.7980, 0.7202, 0.5453]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([1, 4])
batch is tensor([[0.9220, 0.7980, 0.7202, 0.5453]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.8090, 0.9665, 0.9627, 0.9516, 0.9540]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.8090, 0.9665, 0.9627, 0.9516, 0.9540]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.8090, 0.9665, 0.9627, 0.9516, 0.9540]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.8090, 0.9665, 0.9627, 0.9516, 0.9540]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
____________________________ test_forward_0[16-16] _____________________________

batch_size = 16, split_size = 16

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4824, 0.2538, 0.4764, 0.3878, 0.5556],\n        [0.5344, 0.2785, 0.4749, 0.4014, 0.5651],\n        [0.4921, 0.2797, 0.4603, 0.3923, 0.5624],\n        [0.4589, 0.2739, 0.4571, 0.3821, 0.5595],\n        [0.5075, 0.2896, 0.4556, 0.4245, 0.5655],\n        [0.5041, 0.2727, 0.4687, 0.3945, 0.5615],\n        [0.4761, 0.2585, 0.4734, 0.3566, 0.5564],\n        [0.5121, 0.2799, 0.4662, 0.3926, 0.5637],\n        [0.4760, 0.2664, 0.4658, 0.3842, 0.5583],\n        [0.4871, 0.2714, 0.4646, 0.3934, 0.5601],\n        [0.4758, 0.2518, 0.4771, 0.3750, 0.5548],\n        [0.4748, 0.2901, 0.4498, 0.3816, 0.5640],\n        [0.5564, 0.2881, 0.4734, 0.4254, 0.5686],\n        [0.5296, 0.2667, 0.4813, 0.4163, 0.5621],\n        [0.5064, 0.2852, 0.4615, 0.3829, 0.5646],\n        [0.4856, 0.2891, 0.4514, 0.4164, 0.5644]], grad_fn=<ToCopyBackward0>), tensor([[0.9992, 0.9985, 0.9996, 1.0000, 0.9996],\n        [0.9992, 0.9986, 0.9996, 1.0000, 0.9996],\n        [0.9966, 0.9916, 0.9981, 0.9981, 0.9980],\n        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],\n        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],\n        [0.9963, 0.9944, 0.9983, 0.9986, 0.9901],\n        [0.9963, 0.9944, 0.9983, 0.9985, 0.9893],\n        [0.9965, 0.9946, 0.9984, 0.9987, 0.9901],\n        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],\n        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],\n        [0.8852, 0.6848, 0.5018, 0.9805, 0.9996],\n        [0.9749, 0.9360, 0.8695, 0.9996, 0.9996],\n        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],\n        [0.9962, 0.9904, 0.9972, 0.9996, 0.9996],\n        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],\n        [0.9949, 0.9900, 0.9778, 1.0000, 0.9996]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 16
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 16
x          = tensor([[ 0.1413, -0.2530, -2.0677],
        [-1.2272,  1.6130, -0.8636],
        [-0.3617,  0.2644, -0.0312],
       ...-1.5138,  0.7153, -2.0389],
        [-0.3320,  1.2471,  0.4582],
        [-1.0274, -0.8067,  0.2062]], device='cuda:0')
y0         = tensor([[0.4824, 0.2538, 0.4764, 0.3878, 0.5556],
        [0.5344, 0.2785, 0.4749, 0.4014, 0.5651],
        [0.4921, 0...[0.5064, 0.2852, 0.4615, 0.3829, 0.5646],
        [0.4856, 0.2891, 0.4514, 0.4164, 0.5644]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9992, 0.9985, 0.9996, 1.0000, 0.9996],
        [0.9992, 0.9986, 0.9996, 1.0000, 0.9996],
        [0.9966, 0...[0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9949, 0.9900, 0.9778, 1.0000, 0.9996]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[ 0.1413, -0.2530, -2.0677],
        [-1.2272,  1.6130, -0.8636],
        [-0.3617,  0.2644, -0.0312],
        [ 0.6789, -0.5724, -0.1682],
        [-1.7125, -0.3569,  0.0313],
        [-0.5661,  0.5467, -0.7240],
        [ 1.3788,  0.9096, -1.1143],
        [-0.6866,  1.0073, -0.1894],
        [ 0.2786, -0.1655, -0.8445],
        [-0.2569, -0.0747, -0.6714],
        [ 0.7324,  0.0420, -1.9414],
        [ 0.2435,  0.2295,  0.9840],
        [-2.5821,  1.6275, -0.6356],
        [-1.5138,  0.7153, -2.0389],
        [-0.3320,  1.2471,  0.4582],
        [-1.0274, -0.8067,  0.2062]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[ 0.1413, -0.2530, -2.0677],
        [-1.2272,  1.6130, -0.8636],
        [-0.3617,  0.2644, -0.0312],
        [ 0.6789, -0.5724, -0.1682],
        [-1.7125, -0.3569,  0.0313],
        [-0.5661,  0.5467, -0.7240],
        [ 1.3788,  0.9096, -1.1143],
        [-0.6866,  1.0073, -0.1894],
        [ 0.2786, -0.1655, -0.8445],
        [-0.2569, -0.0747, -0.6714],
        [ 0.7324,  0.0420, -1.9414],
        [ 0.2435,  0.2295,  0.9840],
        [-2.5821,  1.6275, -0.6356],
        [-1.5138,  0.7153, -2.0389],
        [-0.3320,  1.2471,  0.4582],
        [-1.0274, -0.8067,  0.2062]], device='cuda:0')
after: tensor([[ 0.1413, -0.2530, -2.0677],
        [-1.2272,  1.6130, -0.8636],
        [-0.3617,  0.2644, -0.0312],
        [ 0.6789, -0.5724, -0.1682],
        [-1.7125, -0.3569,  0.0313],
        [-0.5661,  0.5467, -0.7240],
        [ 1.3788,  0.9096, -1.1143],
        [-0.6866,  1.0073, -0.1894],
        [ 0.2786, -0.1655, -0.8445],
        [-0.2569, -0.0747, -0.6714],
        [ 0.7324,  0.0420, -1.9414],
        [ 0.2435,  0.2295,  0.9840],
        [-2.5821,  1.6275, -0.6356],
        [-1.5138,  0.7153, -2.0389],
        [-0.3320,  1.2471,  0.4582],
        [-1.0274, -0.8067,  0.2062]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([16, 3])
batch is tensor([[ 0.1413, -0.2530, -2.0677],
        [-1.2272,  1.6130, -0.8636],
        [-0.3617,  0.2644, -0.0312],
        [ 0.6789, -0.5724, -0.1682],
        [-1.7125, -0.3569,  0.0313],
        [-0.5661,  0.5467, -0.7240],
        [ 1.3788,  0.9096, -1.1143],
        [-0.6866,  1.0073, -0.1894],
        [ 0.2786, -0.1655, -0.8445],
        [-0.2569, -0.0747, -0.6714],
        [ 0.7324,  0.0420, -1.9414],
        [ 0.2435,  0.2295,  0.9840],
        [-2.5821,  1.6275, -0.6356],
        [-1.5138,  0.7153, -2.0389],
        [-0.3320,  1.2471,  0.4582],
        [-1.0274, -0.8067,  0.2062]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.6871, 0.6040, 0.6148, 0.7616],
        [0.4522, 0.3978, 0.3427, 0.8604],
        [0.5396, 0.5424, 0.5664, 0.6475],
        [0.6121, 0.6901, 0.7035, 0.5214],
        [0.6477, 0.3623, 0.5993, 0.5984],
        [0.5502, 0.5048, 0.5081, 0.7489],
        [0.4680, 0.7496, 0.5252, 0.7746],
        [0.4703, 0.4858, 0.4519, 0.7548],
        [0.6132, 0.6300, 0.6303, 0.6580],
        [0.6098, 0.5567, 0.6028, 0.6663],
        [0.6330, 0.6786, 0.6005, 0.7682],
        [0.4695, 0.6333, 0.6116, 0.5176],
        [0.4802, 0.2351, 0.3003, 0.8683],
        [0.6288, 0.3618, 0.4254, 0.8672],
        [0.3969, 0.5380, 0.4453, 0.7169],
        [0.6679, 0.4631, 0.6815, 0.4984]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.6871, 0.6040, 0.6148, 0.7616],
        [0.4522, 0.3978, 0.3427, 0.8604],
        [0.5396, 0.5424, 0.5664, 0.6475],
        [0.6121, 0.6901, 0.7035, 0.5214],
        [0.6477, 0.3623, 0.5993, 0.5984],
        [0.5502, 0.5048, 0.5081, 0.7489],
        [0.4680, 0.7496, 0.5252, 0.7746],
        [0.4703, 0.4858, 0.4519, 0.7548],
        [0.6132, 0.6300, 0.6303, 0.6580],
        [0.6098, 0.5567, 0.6028, 0.6663],
        [0.6330, 0.6786, 0.6005, 0.7682],
        [0.4695, 0.6333, 0.6116, 0.5176],
        [0.4802, 0.2351, 0.3003, 0.8683],
        [0.6288, 0.3618, 0.4254, 0.8672],
        [0.3969, 0.5380, 0.4453, 0.7169],
        [0.6679, 0.4631, 0.6815, 0.4984]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6871, 0.6040, 0.6148, 0.7616],
        [0.4522, 0.3978, 0.3427, 0.8604],
        [0.5396, 0.5424, 0.5664, 0.6475],
        [0.6121, 0.6901, 0.7035, 0.5214],
        [0.6477, 0.3623, 0.5993, 0.5984],
        [0.5502, 0.5048, 0.5081, 0.7489],
        [0.4680, 0.7496, 0.5252, 0.7746],
        [0.4703, 0.4858, 0.4519, 0.7548],
        [0.6132, 0.6300, 0.6303, 0.6580],
        [0.6098, 0.5567, 0.6028, 0.6663],
        [0.6330, 0.6786, 0.6005, 0.7682],
        [0.4695, 0.6333, 0.6116, 0.5176],
        [0.4802, 0.2351, 0.3003, 0.8683],
        [0.6288, 0.3618, 0.4254, 0.8672],
        [0.3969, 0.5380, 0.4453, 0.7169],
        [0.6679, 0.4631, 0.6815, 0.4984]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.6871, 0.6040, 0.6148, 0.7616],
        [0.4522, 0.3978, 0.3427, 0.8604],
        [0.5396, 0.5424, 0.5664, 0.6475],
        [0.6121, 0.6901, 0.7035, 0.5214],
        [0.6477, 0.3623, 0.5993, 0.5984],
        [0.5502, 0.5048, 0.5081, 0.7489],
        [0.4680, 0.7496, 0.5252, 0.7746],
        [0.4703, 0.4858, 0.4519, 0.7548],
        [0.6132, 0.6300, 0.6303, 0.6580],
        [0.6098, 0.5567, 0.6028, 0.6663],
        [0.6330, 0.6786, 0.6005, 0.7682],
        [0.4695, 0.6333, 0.6116, 0.5176],
        [0.4802, 0.2351, 0.3003, 0.8683],
        [0.6288, 0.3618, 0.4254, 0.8672],
        [0.3969, 0.5380, 0.4453, 0.7169],
        [0.6679, 0.4631, 0.6815, 0.4984]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(0, 1)]
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.6871, 0.6040, 0.6148, 0.7616],
        [0.4522, 0.3978, 0.3427, 0.8604],
        [0.5396, 0.5424, 0.5664, 0.6475],
        [0.6121, 0.6901, 0.7035, 0.5214],
        [0.6477, 0.3623, 0.5993, 0.5984],
        [0.5502, 0.5048, 0.5081, 0.7489],
        [0.4680, 0.7496, 0.5252, 0.7746],
        [0.4703, 0.4858, 0.4519, 0.7548],
        [0.6132, 0.6300, 0.6303, 0.6580],
        [0.6098, 0.5567, 0.6028, 0.6663],
        [0.6330, 0.6786, 0.6005, 0.7682],
        [0.4695, 0.6333, 0.6116, 0.5176],
        [0.4802, 0.2351, 0.3003, 0.8683],
        [0.6288, 0.3618, 0.4254, 0.8672],
        [0.3969, 0.5380, 0.4453, 0.7169],
        [0.6679, 0.4631, 0.6815, 0.4984]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[ 2.0000e+00,  1.8273e+00,  0.0000e+00,  1.8666e+00],
        [ 2.0000e+00,  1.8657e+00,  1.0842e-19,  1.8629e+00],
        [ 1.0842e-19,  1.8635e+00,  9.8106e-01,  9.7930e-01],
        [ 9.5045e-01,  9.9289e-01,  9.9266e-01,  9.8052e-01],
        [ 9.7846e-01,  9.5102e-01,  9.9269e-01,  9.9245e-01],
        [ 9.8044e-01,  9.7813e-01,  9.5155e-01,  9.9266e-01],
        [ 9.9242e-01,  9.8020e-01,  9.7873e-01,  9.4962e-01],
        [ 9.9257e-01,  9.9233e-01,  9.8027e-01,  9.7906e-01],
        [ 9.4902e-01,  9.9259e-01,  9.9235e-01,  9.8102e-01],
        [ 9.7931e-01,  9.5035e-01,  9.9288e-01,  9.9265e-01],
        [-2.0000e+00,  1.8701e+00, -2.0000e+00,  1.8695e+00],
        [ 0.0000e+00,  1.8629e+00, -2.0000e+00,  1.8731e+00],
        [-0.0000e+00,  1.8731e+00, -3.6893e+19,  1.8705e+00],
        [ 0.0000e+00,  1.8699e+00,  0.0000e+00,  1.8630e+00],
        [ 0.0000e+00,  1.8733e+00, -3.6893e+19,  1.8732e+00],
        [ 2.0000e+00,  1.8700e+00, -2.0000e+00,  1.8698e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([16, 4])
batch is tensor([[ 2.0000e+00,  1.8273e+00,  0.0000e+00,  1.8666e+00],
        [ 2.0000e+00,  1.8657e+00,  1.0842e-19,  1.8629e+00],
        [ 1.0842e-19,  1.8635e+00,  9.8106e-01,  9.7930e-01],
        [ 9.5045e-01,  9.9289e-01,  9.9266e-01,  9.8052e-01],
        [ 9.7846e-01,  9.5102e-01,  9.9269e-01,  9.9245e-01],
        [ 9.8044e-01,  9.7813e-01,  9.5155e-01,  9.9266e-01],
        [ 9.9242e-01,  9.8020e-01,  9.7873e-01,  9.4962e-01],
        [ 9.9257e-01,  9.9233e-01,  9.8027e-01,  9.7906e-01],
        [ 9.4902e-01,  9.9259e-01,  9.9235e-01,  9.8102e-01],
        [ 9.7931e-01,  9.5035e-01,  9.9288e-01,  9.9265e-01],
        [-2.0000e+00,  1.8701e+00, -2.0000e+00,  1.8695e+00],
        [ 0.0000e+00,  1.8629e+00, -2.0000e+00,  1.8731e+00],
        [-0.0000e+00,  1.8731e+00, -3.6893e+19,  1.8705e+00],
        [ 0.0000e+00,  1.8699e+00,  0.0000e+00,  1.8630e+00],
        [ 0.0000e+00,  1.8733e+00, -3.6893e+19,  1.8732e+00],
        [ 2.0000e+00,  1.8700e+00, -2.0000e+00,  1.8698e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9992, 0.9985, 0.9996, 1.0000, 0.9996],
        [0.9992, 0.9986, 0.9996, 1.0000, 0.9996],
        [0.9966, 0.9916, 0.9981, 0.9981, 0.9980],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.9963, 0.9944, 0.9983, 0.9986, 0.9901],
        [0.9963, 0.9944, 0.9983, 0.9985, 0.9893],
        [0.9965, 0.9946, 0.9984, 0.9987, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.8852, 0.6848, 0.5018, 0.9805, 0.9996],
        [0.9749, 0.9360, 0.8695, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9962, 0.9904, 0.9972, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9949, 0.9900, 0.9778, 1.0000, 0.9996]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9992, 0.9985, 0.9996, 1.0000, 0.9996],
        [0.9992, 0.9986, 0.9996, 1.0000, 0.9996],
        [0.9966, 0.9916, 0.9981, 0.9981, 0.9980],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.9963, 0.9944, 0.9983, 0.9986, 0.9901],
        [0.9963, 0.9944, 0.9983, 0.9985, 0.9893],
        [0.9965, 0.9946, 0.9984, 0.9987, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.8852, 0.6848, 0.5018, 0.9805, 0.9996],
        [0.9749, 0.9360, 0.8695, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9962, 0.9904, 0.9972, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9949, 0.9900, 0.9778, 1.0000, 0.9996]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9992, 0.9985, 0.9996, 1.0000, 0.9996],
        [0.9992, 0.9986, 0.9996, 1.0000, 0.9996],
        [0.9966, 0.9916, 0.9981, 0.9981, 0.9980],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.9963, 0.9944, 0.9983, 0.9986, 0.9901],
        [0.9963, 0.9944, 0.9983, 0.9985, 0.9893],
        [0.9965, 0.9946, 0.9984, 0.9987, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.8852, 0.6848, 0.5018, 0.9805, 0.9996],
        [0.9749, 0.9360, 0.8695, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9962, 0.9904, 0.9972, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9949, 0.9900, 0.9778, 1.0000, 0.9996]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9992, 0.9985, 0.9996, 1.0000, 0.9996],
        [0.9992, 0.9986, 0.9996, 1.0000, 0.9996],
        [0.9966, 0.9916, 0.9981, 0.9981, 0.9980],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.9963, 0.9944, 0.9983, 0.9986, 0.9901],
        [0.9963, 0.9944, 0.9983, 0.9985, 0.9893],
        [0.9965, 0.9946, 0.9984, 0.9987, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9901],
        [0.9964, 0.9945, 0.9984, 0.9985, 0.9896],
        [0.8852, 0.6848, 0.5018, 0.9805, 0.9996],
        [0.9749, 0.9360, 0.8695, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9962, 0.9904, 0.9972, 0.9996, 0.9996],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.9996],
        [0.9949, 0.9900, 0.9778, 1.0000, 0.9996]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
____________________________ test_forward_0[16-32] _____________________________

batch_size = 32, split_size = 16

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.5844, 0.3153, 0.6384, 0.3942, 0.4292],\n        [0.5666, 0.2994, 0.6237, 0.4423, 0.4287],\n        [0.5726, 0.3241, 0.6382, 0.4139, 0.4440],\n        [0.5579, 0.2922, 0.5665, 0.4567, 0.4173],\n        [0.5642, 0.2826, 0.6146, 0.4588, 0.4168],\n        [0.5602, 0.3085, 0.6123, 0.4482, 0.4369],\n        [0.5505, 0.2858, 0.5782, 0.4800, 0.4215],\n        [0.5747, 0.2980, 0.6055, 0.4222, 0.4172],\n        [0.5493, 0.3085, 0.6157, 0.4730, 0.4460],\n        [0.5625, 0.3123, 0.5899, 0.4366, 0.4324],\n        [0.5817, 0.2941, 0.6199, 0.4120, 0.4127],\n        [0.5915, 0.3193, 0.6174, 0.3727, 0.4210],\n        [0.5620, 0.3152, 0.5937, 0.4362, 0.4356],\n        [0.5451, 0.2993, 0.6100, 0.4884, 0.4415],\n        [0.5944, 0.2862, 0.6281, 0.3910, 0.3996],\n        [0.5716, 0.3081, 0.5954, 0.4202, 0.4238],\n        [0.5597, 0.2956, 0.5894, 0.4547, 0.4233],\n        [0.5473, 0.2938, 0.5717, 0.4802, 0.4277],\n        [0.5681, 0.2999, 0.6481, 0.4418, 0.4346],\n        [0.5729, 0.2893, 0.6292, 0.4367, 0.4183],\n        [0.5417, 0.3075, 0.6019, 0.4889, 0.4476],\n        [0.6100, 0.3043, 0.6257, 0.3453, 0.3986],\n        [0.5396, 0.2909, 0.5835, 0.5025, 0.4338],\n        [0.5823, 0.3013, 0.6146, 0.4046, 0.4158],\n        [0.6018, 0.2934, 0.6454, 0.3728, 0.4029],\n        [0.5388, 0.3118, 0.5988, 0.4916, 0.4520],\n        [0.5408, 0.3101, 0.5807, 0.4852, 0.4452],\n        [0.5539, 0.3079, 0.5778, 0.4567, 0.4333],\n        [0.5488, 0.2991, 0.6092, 0.4801, 0.4384],\n        [0.5686, 0.3006, 0.6127, 0.4350, 0.4253],\n        [0.5717, 0.2741, 0.5836, 0.4422, 0.3987],\n        [0.5532, 0.2893, 0.5877, 0.4736, 0.4236]], grad_fn=<ToCopyBackward0>), tensor([[0.9796, 0.9964, 0.9924, 0.9924, 0.9923],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],\n        [0.9813, 0.9967, 0.9930, 0.9930, 0.9929],\n        [0.9558, 0.9920, 0.9831, 0.9832, 0.9830],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],\n        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],\n        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],\n        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],\n        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],\n        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],\n        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],\n        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 32
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 16
x          = tensor([[-0.6013, -1.6630, -0.3289],
        [ 0.6317, -0.6099,  0.3352],
        [-0.7148, -1.9547,  0.5075],
       ... 0.1453, -0.1977,  0.0728],
        [ 1.0349,  2.0804, -0.9137],
        [ 0.8757,  1.3135,  0.4794]], device='cuda:0')
y0         = tensor([[0.5844, 0.3153, 0.6384, 0.3942, 0.4292],
        [0.5666, 0.2994, 0.6237, 0.4423, 0.4287],
        [0.5726, 0...[0.5717, 0.2741, 0.5836, 0.4422, 0.3987],
        [0.5532, 0.2893, 0.5877, 0.4736, 0.4236]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9796, 0.9964, 0.9924, 0.9924, 0.9923],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0...[0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-0.6013, -1.6630, -0.3289],
        [ 0.6317, -0.6099,  0.3352],
        [-0.7148, -1.9547,  0.5075],
        [-0.2194,  2.0522,  0.0089],
        [ 1.6311,  0.3784,  0.1072],
        [-0.0314, -0.4529,  0.6797],
        [ 1.0110,  1.9672,  0.4569],
        [-0.1286,  0.1824, -0.4127],
        [ 0.5412, -0.6949,  1.4873],
        [-1.0398,  0.3155,  0.3334],
        [ 0.2810, -0.2449, -0.7029],
        [-1.7756, -0.8935, -1.0221],
        [-1.0946,  0.0738,  0.4494],
        [ 1.2294, -0.1719,  1.5880],
        [ 0.6494, -0.3005, -1.5549],
        [-0.9426,  0.2533, -0.2268]], device='cuda:0'), tensor([[ 0.1588,  0.9175,  0.2288],
        [ 0.2886,  1.8585,  0.7471],
        [ 1.3262, -1.7776,  0.7616],
        [ 1.2332, -0.4880, -0.1315],
        [ 0.5345, -0.0803,  1.7390],
        [-1.3047, -0.5663, -2.5063],
        [ 1.4077,  1.6278,  1.2754],
        [-0.3631, -0.2612, -0.6994],
        [ 0.6415, -1.2500, -1.8430],
        [ 0.2468, -0.1055,  1.9541],
        [-0.4041,  0.7937,  1.5671],
        [-0.8505,  0.9457,  0.6818],
        [ 1.0164, -0.0755,  1.2666],
        [ 0.1453, -0.1977,  0.0728],
        [ 1.0349,  2.0804, -0.9137],
        [ 0.8757,  1.3135,  0.4794]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-0.6013, -1.6630, -0.3289],
        [ 0.6317, -0.6099,  0.3352],
        [-0.7148, -1.9547,  0.5075],
        [-0.2194,  2.0522,  0.0089],
        [ 1.6311,  0.3784,  0.1072],
        [-0.0314, -0.4529,  0.6797],
        [ 1.0110,  1.9672,  0.4569],
        [-0.1286,  0.1824, -0.4127],
        [ 0.5412, -0.6949,  1.4873],
        [-1.0398,  0.3155,  0.3334],
        [ 0.2810, -0.2449, -0.7029],
        [-1.7756, -0.8935, -1.0221],
        [-1.0946,  0.0738,  0.4494],
        [ 1.2294, -0.1719,  1.5880],
        [ 0.6494, -0.3005, -1.5549],
        [-0.9426,  0.2533, -0.2268]], device='cuda:0')
after: tensor([[-0.6013, -1.6630, -0.3289],
        [ 0.6317, -0.6099,  0.3352],
        [-0.7148, -1.9547,  0.5075],
        [-0.2194,  2.0522,  0.0089],
        [ 1.6311,  0.3784,  0.1072],
        [-0.0314, -0.4529,  0.6797],
        [ 1.0110,  1.9672,  0.4569],
        [-0.1286,  0.1824, -0.4127],
        [ 0.5412, -0.6949,  1.4873],
        [-1.0398,  0.3155,  0.3334],
        [ 0.2810, -0.2449, -0.7029],
        [-1.7756, -0.8935, -1.0221],
        [-1.0946,  0.0738,  0.4494],
        [ 1.2294, -0.1719,  1.5880],
        [ 0.6494, -0.3005, -1.5549],
        [-0.9426,  0.2533, -0.2268]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([16, 3])
batch is tensor([[-0.6013, -1.6630, -0.3289],
        [ 0.6317, -0.6099,  0.3352],
        [-0.7148, -1.9547,  0.5075],
        [-0.2194,  2.0522,  0.0089],
        [ 1.6311,  0.3784,  0.1072],
        [-0.0314, -0.4529,  0.6797],
        [ 1.0110,  1.9672,  0.4569],
        [-0.1286,  0.1824, -0.4127],
        [ 0.5412, -0.6949,  1.4873],
        [-1.0398,  0.3155,  0.3334],
        [ 0.2810, -0.2449, -0.7029],
        [-1.7756, -0.8935, -1.0221],
        [-1.0946,  0.0738,  0.4494],
        [ 1.2294, -0.1719,  1.5880],
        [ 0.6494, -0.3005, -1.5549],
        [-0.9426,  0.2533, -0.2268]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.4762, 0.6363, 0.4647, 0.3618],
        [0.6415, 0.5701, 0.3373, 0.5789],
        [0.5445, 0.5543, 0.3475, 0.3627],
        [0.5852, 0.2765, 0.6712, 0.7724],
        [0.6989, 0.5947, 0.3410, 0.7209],
        [0.6287, 0.4479, 0.3713, 0.5729],
        [0.7062, 0.3379, 0.4823, 0.8271],
        [0.5275, 0.5096, 0.5736, 0.5845],
        [0.7300, 0.4279, 0.2186, 0.6174],
        [0.5337, 0.3232, 0.5817, 0.5801],
        [0.5242, 0.6258, 0.5349, 0.5490],
        [0.3386, 0.5343, 0.7250, 0.3445],
        [0.5376, 0.3274, 0.5533, 0.5562],
        [0.7799, 0.4293, 0.1900, 0.7095],
        [0.4686, 0.7507, 0.6028, 0.5245],
        [0.4861, 0.4018, 0.6377, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.4762, 0.6363, 0.4647, 0.3618],
        [0.6415, 0.5701, 0.3373, 0.5789],
        [0.5445, 0.5543, 0.3475, 0.3627],
        [0.5852, 0.2765, 0.6712, 0.7724],
        [0.6989, 0.5947, 0.3410, 0.7209],
        [0.6287, 0.4479, 0.3713, 0.5729],
        [0.7062, 0.3379, 0.4823, 0.8271],
        [0.5275, 0.5096, 0.5736, 0.5845],
        [0.7300, 0.4279, 0.2186, 0.6174],
        [0.5337, 0.3232, 0.5817, 0.5801],
        [0.5242, 0.6258, 0.5349, 0.5490],
        [0.3386, 0.5343, 0.7250, 0.3445],
        [0.5376, 0.3274, 0.5533, 0.5562],
        [0.7799, 0.4293, 0.1900, 0.7095],
        [0.4686, 0.7507, 0.6028, 0.5245],
        [0.4861, 0.4018, 0.6377, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4762, 0.6363, 0.4647, 0.3618],
        [0.6415, 0.5701, 0.3373, 0.5789],
        [0.5445, 0.5543, 0.3475, 0.3627],
        [0.5852, 0.2765, 0.6712, 0.7724],
        [0.6989, 0.5947, 0.3410, 0.7209],
        [0.6287, 0.4479, 0.3713, 0.5729],
        [0.7062, 0.3379, 0.4823, 0.8271],
        [0.5275, 0.5096, 0.5736, 0.5845],
        [0.7300, 0.4279, 0.2186, 0.6174],
        [0.5337, 0.3232, 0.5817, 0.5801],
        [0.5242, 0.6258, 0.5349, 0.5490],
        [0.3386, 0.5343, 0.7250, 0.3445],
        [0.5376, 0.3274, 0.5533, 0.5562],
        [0.7799, 0.4293, 0.1900, 0.7095],
        [0.4686, 0.7507, 0.6028, 0.5245],
        [0.4861, 0.4018, 0.6377, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.4762, 0.6363, 0.4647, 0.3618],
        [0.6415, 0.5701, 0.3373, 0.5789],
        [0.5445, 0.5543, 0.3475, 0.3627],
        [0.5852, 0.2765, 0.6712, 0.7724],
        [0.6989, 0.5947, 0.3410, 0.7209],
        [0.6287, 0.4479, 0.3713, 0.5729],
        [0.7062, 0.3379, 0.4823, 0.8271],
        [0.5275, 0.5096, 0.5736, 0.5845],
        [0.7300, 0.4279, 0.2186, 0.6174],
        [0.5337, 0.3232, 0.5817, 0.5801],
        [0.5242, 0.6258, 0.5349, 0.5490],
        [0.3386, 0.5343, 0.7250, 0.3445],
        [0.5376, 0.3274, 0.5533, 0.5562],
        [0.7799, 0.4293, 0.1900, 0.7095],
        [0.4686, 0.7507, 0.6028, 0.5245],
        [0.4861, 0.4018, 0.6377, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.1588,  0.9175,  0.2288],
        [ 0.2886,  1.8585,  0.7471],
        [ 1.3262, -1.7776,  0.7616],
        [ 1.2332, -0.4880, -0.1315],
        [ 0.5345, -0.0803,  1.7390],
        [-1.3047, -0.5663, -2.5063],
        [ 1.4077,  1.6278,  1.2754],
        [-0.3631, -0.2612, -0.6994],
        [ 0.6415, -1.2500, -1.8430],
        [ 0.2468, -0.1055,  1.9541],
        [-0.4041,  0.7937,  1.5671],
        [-0.8505,  0.9457,  0.6818],
        [ 1.0164, -0.0755,  1.2666],
        [ 0.1453, -0.1977,  0.0728],
        [ 1.0349,  2.0804, -0.9137],
        [ 0.8757,  1.3135,  0.4794]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[ 0.1588,  0.9175,  0.2288],
        [ 0.2886,  1.8585,  0.7471],
        [ 1.3262, -1.7776,  0.7616],
        [ 1.2332, -0.4880, -0.1315],
        [ 0.5345, -0.0803,  1.7390],
        [-1.3047, -0.5663, -2.5063],
        [ 1.4077,  1.6278,  1.2754],
        [-0.3631, -0.2612, -0.6994],
        [ 0.6415, -1.2500, -1.8430],
        [ 0.2468, -0.1055,  1.9541],
        [-0.4041,  0.7937,  1.5671],
        [-0.8505,  0.9457,  0.6818],
        [ 1.0164, -0.0755,  1.2666],
        [ 0.1453, -0.1977,  0.0728],
        [ 1.0349,  2.0804, -0.9137],
        [ 0.8757,  1.3135,  0.4794]], device='cuda:0')
after: tensor([[ 0.1588,  0.9175,  0.2288],
        [ 0.2886,  1.8585,  0.7471],
        [ 1.3262, -1.7776,  0.7616],
        [ 1.2332, -0.4880, -0.1315],
        [ 0.5345, -0.0803,  1.7390],
        [-1.3047, -0.5663, -2.5063],
        [ 1.4077,  1.6278,  1.2754],
        [-0.3631, -0.2612, -0.6994],
        [ 0.6415, -1.2500, -1.8430],
        [ 0.2468, -0.1055,  1.9541],
        [-0.4041,  0.7937,  1.5671],
        [-0.8505,  0.9457,  0.6818],
        [ 1.0164, -0.0755,  1.2666],
        [ 0.1453, -0.1977,  0.0728],
        [ 1.0349,  2.0804, -0.9137],
        [ 0.8757,  1.3135,  0.4794]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([16, 3])
batch is tensor([[ 0.1588,  0.9175,  0.2288],
        [ 0.2886,  1.8585,  0.7471],
        [ 1.3262, -1.7776,  0.7616],
        [ 1.2332, -0.4880, -0.1315],
        [ 0.5345, -0.0803,  1.7390],
        [-1.3047, -0.5663, -2.5063],
        [ 1.4077,  1.6278,  1.2754],
        [-0.3631, -0.2612, -0.6994],
        [ 0.6415, -1.2500, -1.8430],
        [ 0.2468, -0.1055,  1.9541],
        [-0.4041,  0.7937,  1.5671],
        [-0.8505,  0.9457,  0.6818],
        [ 1.0164, -0.0755,  1.2666],
        [ 0.1453, -0.1977,  0.0728],
        [ 1.0349,  2.0804, -0.9137],
        [ 0.8757,  1.3135,  0.4794]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.4762, 0.6363, 0.4647, 0.3618],
        [0.6415, 0.5701, 0.3373, 0.5789],
        [0.5445, 0.5543, 0.3475, 0.3627],
        [0.5852, 0.2765, 0.6712, 0.7724],
        [0.6989, 0.5947, 0.3410, 0.7209],
        [0.6287, 0.4479, 0.3713, 0.5729],
        [0.7062, 0.3379, 0.4823, 0.8271],
        [0.5275, 0.5096, 0.5736, 0.5845],
        [0.7300, 0.4279, 0.2186, 0.6174],
        [0.5337, 0.3232, 0.5817, 0.5801],
        [0.5242, 0.6258, 0.5349, 0.5490],
        [0.3386, 0.5343, 0.7250, 0.3445],
        [0.5376, 0.3274, 0.5533, 0.5562],
        [0.7799, 0.4293, 0.1900, 0.7095],
        [0.4686, 0.7507, 0.6028, 0.5245],
        [0.4861, 0.4018, 0.6377, 0.5529]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[2.0000e+00, 1.8750e+00, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [1.5414e-44, 0.0000e+00, 1.6816e-44, 0.0000e+00],
        [1.8217e-44, 0.0000e+00, 1.9618e-44, 0.0000e+00],
        [2.1019e-44, 0.0000e+00, 2.2421e-44, 0.0000e+00],
        [2.3822e-44, 0.0000e+00, 2.5223e-44, 0.0000e+00],
        [2.6625e-44, 0.0000e+00, 2.8026e-44, 0.0000e+00],
        [2.9427e-44, 0.0000e+00, 3.0829e-44, 0.0000e+00],
        [3.2230e-44, 0.0000e+00, 3.3631e-44, 0.0000e+00],
        [3.5032e-44, 0.0000e+00, 3.6434e-44, 0.0000e+00],
        [3.7835e-44, 0.0000e+00, 3.9236e-44, 0.0000e+00],
        [4.0638e-44, 0.0000e+00, 4.2039e-44, 0.0000e+00],
        [4.3440e-44, 0.0000e+00, 4.4842e-44, 0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([16, 4])
batch is tensor([[2.0000e+00, 1.8750e+00, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [1.5414e-44, 0.0000e+00, 1.6816e-44, 0.0000e+00],
        [1.8217e-44, 0.0000e+00, 1.9618e-44, 0.0000e+00],
        [2.1019e-44, 0.0000e+00, 2.2421e-44, 0.0000e+00],
        [2.3822e-44, 0.0000e+00, 2.5223e-44, 0.0000e+00],
        [2.6625e-44, 0.0000e+00, 2.8026e-44, 0.0000e+00],
        [2.9427e-44, 0.0000e+00, 3.0829e-44, 0.0000e+00],
        [3.2230e-44, 0.0000e+00, 3.3631e-44, 0.0000e+00],
        [3.5032e-44, 0.0000e+00, 3.6434e-44, 0.0000e+00],
        [3.7835e-44, 0.0000e+00, 3.9236e-44, 0.0000e+00],
        [4.0638e-44, 0.0000e+00, 4.2039e-44, 0.0000e+00],
        [4.3440e-44, 0.0000e+00, 4.4842e-44, 0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.6180, 0.3857, 0.5181, 0.7018],
        [0.6833, 0.2587, 0.5115, 0.8021],
        [0.7089, 0.6925, 0.1722, 0.5132],
        [0.6425, 0.6677, 0.3445, 0.6052],
        [0.7544, 0.3393, 0.2303, 0.6889],
        [0.2525, 0.7159, 0.8403, 0.3387],
        [0.7845, 0.3126, 0.3141, 0.8412],
        [0.4766, 0.5669, 0.5999, 0.5088],
        [0.4282, 0.8356, 0.5664, 0.4071],
        [0.7537, 0.2943, 0.2303, 0.6805],
        [0.6951, 0.2145, 0.3923, 0.7153],
        [0.5887, 0.2510, 0.5667, 0.6709],
        [0.7471, 0.4386, 0.2389, 0.6949],
        [0.5886, 0.5143, 0.4506, 0.5824],
        [0.5894, 0.4928, 0.6639, 0.7957],
        [0.6923, 0.3841, 0.4413, 0.7773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.6180, 0.3857, 0.5181, 0.7018],
        [0.6833, 0.2587, 0.5115, 0.8021],
        [0.7089, 0.6925, 0.1722, 0.5132],
        [0.6425, 0.6677, 0.3445, 0.6052],
        [0.7544, 0.3393, 0.2303, 0.6889],
        [0.2525, 0.7159, 0.8403, 0.3387],
        [0.7845, 0.3126, 0.3141, 0.8412],
        [0.4766, 0.5669, 0.5999, 0.5088],
        [0.4282, 0.8356, 0.5664, 0.4071],
        [0.7537, 0.2943, 0.2303, 0.6805],
        [0.6951, 0.2145, 0.3923, 0.7153],
        [0.5887, 0.2510, 0.5667, 0.6709],
        [0.7471, 0.4386, 0.2389, 0.6949],
        [0.5886, 0.5143, 0.4506, 0.5824],
        [0.5894, 0.4928, 0.6639, 0.7957],
        [0.6923, 0.3841, 0.4413, 0.7773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.6180, 0.3857, 0.5181, 0.7018],
        [0.6833, 0.2587, 0.5115, 0.8021],
        [0.7089, 0.6925, 0.1722, 0.5132],
        [0.6425, 0.6677, 0.3445, 0.6052],
        [0.7544, 0.3393, 0.2303, 0.6889],
        [0.2525, 0.7159, 0.8403, 0.3387],
        [0.7845, 0.3126, 0.3141, 0.8412],
        [0.4766, 0.5669, 0.5999, 0.5088],
        [0.4282, 0.8356, 0.5664, 0.4071],
        [0.7537, 0.2943, 0.2303, 0.6805],
        [0.6951, 0.2145, 0.3923, 0.7153],
        [0.5887, 0.2510, 0.5667, 0.6709],
        [0.7471, 0.4386, 0.2389, 0.6949],
        [0.5886, 0.5143, 0.4506, 0.5824],
        [0.5894, 0.4928, 0.6639, 0.7957],
        [0.6923, 0.3841, 0.4413, 0.7773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9796, 0.9964, 0.9924, 0.9924, 0.9923],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9796, 0.9964, 0.9924, 0.9924, 0.9923],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9796, 0.9964, 0.9924, 0.9924, 0.9923],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9796, 0.9964, 0.9924, 0.9924, 0.9923],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.6180, 0.3857, 0.5181, 0.7018],
        [0.6833, 0.2587, 0.5115, 0.8021],
        [0.7089, 0.6925, 0.1722, 0.5132],
        [0.6425, 0.6677, 0.3445, 0.6052],
        [0.7544, 0.3393, 0.2303, 0.6889],
        [0.2525, 0.7159, 0.8403, 0.3387],
        [0.7845, 0.3126, 0.3141, 0.8412],
        [0.4766, 0.5669, 0.5999, 0.5088],
        [0.4282, 0.8356, 0.5664, 0.4071],
        [0.7537, 0.2943, 0.2303, 0.6805],
        [0.6951, 0.2145, 0.3923, 0.7153],
        [0.5887, 0.2510, 0.5667, 0.6709],
        [0.7471, 0.4386, 0.2389, 0.6949],
        [0.5886, 0.5143, 0.4506, 0.5824],
        [0.5894, 0.4928, 0.6639, 0.7957],
        [0.6923, 0.3841, 0.4413, 0.7773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(1, 1)]
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.6180, 0.3857, 0.5181, 0.7018],
        [0.6833, 0.2587, 0.5115, 0.8021],
        [0.7089, 0.6925, 0.1722, 0.5132],
        [0.6425, 0.6677, 0.3445, 0.6052],
        [0.7544, 0.3393, 0.2303, 0.6889],
        [0.2525, 0.7159, 0.8403, 0.3387],
        [0.7845, 0.3126, 0.3141, 0.8412],
        [0.4766, 0.5669, 0.5999, 0.5088],
        [0.4282, 0.8356, 0.5664, 0.4071],
        [0.7537, 0.2943, 0.2303, 0.6805],
        [0.6951, 0.2145, 0.3923, 0.7153],
        [0.5887, 0.2510, 0.5667, 0.6709],
        [0.7471, 0.4386, 0.2389, 0.6949],
        [0.5886, 0.5143, 0.4506, 0.5824],
        [0.5894, 0.4928, 0.6639, 0.7957],
        [0.6923, 0.3841, 0.4413, 0.7773]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9796, 0.9964, 0.9924, 0.9924],
        [0.9923, 0.5000, 0.8520, 0.7310],
        [0.7311, 0.7310, 0.5000, 0.8520],
        [0.7310, 0.7311, 0.7310, 0.5000],
        [0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311],
        [0.7310, 0.5000, 0.8520, 0.7310],
        [0.7311, 0.7310, 0.5000, 0.8520],
        [0.7310, 0.7311, 0.7310, 0.5000],
        [0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311],
        [0.7310, 0.5000, 0.8520, 0.7310],
        [0.7311, 0.7310, 0.5000, 0.8520],
        [0.7310, 0.7311, 0.7310, 0.5000],
        [0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([16, 4])
batch is tensor([[0.9796, 0.9964, 0.9924, 0.9924],
        [0.9923, 0.5000, 0.8520, 0.7310],
        [0.7311, 0.7310, 0.5000, 0.8520],
        [0.7310, 0.7311, 0.7310, 0.5000],
        [0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311],
        [0.7310, 0.5000, 0.8520, 0.7310],
        [0.7311, 0.7310, 0.5000, 0.8520],
        [0.7310, 0.7311, 0.7310, 0.5000],
        [0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311],
        [0.7310, 0.5000, 0.8520, 0.7310],
        [0.7311, 0.7310, 0.5000, 0.8520],
        [0.7310, 0.7311, 0.7310, 0.5000],
        [0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9813, 0.9967, 0.9930, 0.9930, 0.9929],
        [0.9558, 0.9920, 0.9831, 0.9832, 0.9830],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9813, 0.9967, 0.9930, 0.9930, 0.9929],
        [0.9558, 0.9920, 0.9831, 0.9832, 0.9830],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9813, 0.9967, 0.9930, 0.9930, 0.9929],
        [0.9558, 0.9920, 0.9831, 0.9832, 0.9830],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9796, 0.9964, 0.9924, 0.9924, 0.9923],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310],
        [0.5000, 0.8520, 0.7310, 0.7311, 0.7310]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9813, 0.9967, 0.9930, 0.9930, 0.9929],
        [0.9558, 0.9920, 0.9831, 0.9832, 0.9830],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781],
        [0.9365, 0.9884, 0.9755, 0.9756, 0.9754],
        [0.9545, 0.9918, 0.9826, 0.9827, 0.9825],
        [0.9433, 0.9897, 0.9782, 0.9783, 0.9781]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
____________________________ test_forward_0[16-64] _____________________________

batch_size = 64, split_size = 16

    @pytest.mark.a4_2_2
    @pytest.mark.parametrize("batch_size", [1, 16, 32, 64])
    @pytest.mark.parametrize("split_size", [1, 2, 4, 8, 16])
    # @pytest.mark.parametrize("batch_size", [1])
    # @pytest.mark.parametrize("split_size", [1, 2])
    def test_forward_0(batch_size, split_size):
        model = nn.Sequential(
            nn.Linear(3, 4).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
            nn.Linear(4, 5).to('cuda:0'),
            WithDevice(nn.Sigmoid(), 'cuda:0'),
        )
    
        x = torch.randn(batch_size, 3).to('cuda:0')
        y0 = model(x).to('cpu')
    
        # move the last two layer to another device
        model[-2] = model[-2].to('cuda:1')
        model[-1] = WithDevice(nn.Sigmoid(), 'cuda:1')
        pipe = Pipe(model, split_size=split_size)
        y1 = pipe(x).to('cpu')
>       assert torch.allclose(y0, y1)
E       assert False
E        +  where False = <built-in method allclose of type object at 0x149690f38760>(tensor([[0.4047, 0.4690, 0.4086, 0.3055, 0.4731],\n        [0.4311, 0.4513, 0.4143, 0.3017, 0.4689],\n        [0.3961, 0.4598, 0.3994, 0.3093, 0.4849],\n        [0.4005, 0.5101, 0.4144, 0.3041, 0.4588],\n        [0.3946, 0.4712, 0.4017, 0.3084, 0.4800],\n        [0.3590, 0.5334, 0.3923, 0.3111, 0.4750],\n        [0.3978, 0.4566, 0.3996, 0.3092, 0.4854],\n        [0.3612, 0.5000, 0.3855, 0.3134, 0.4891],\n        [0.4230, 0.4651, 0.4182, 0.3007, 0.4627],\n        [0.3688, 0.5350, 0.3959, 0.3104, 0.4714],\n        [0.3844, 0.4976, 0.3975, 0.3105, 0.4789],\n        [0.4094, 0.4790, 0.4051, 0.3080, 0.4753],\n        [0.4019, 0.4953, 0.4035, 0.3088, 0.4736],\n        [0.4158, 0.4597, 0.4106, 0.3044, 0.4726],\n        [0.3710, 0.5281, 0.3965, 0.3103, 0.4725],\n        [0.3652, 0.5505, 0.3953, 0.3096, 0.4673],\n        [0.3676, 0.5171, 0.3890, 0.3128, 0.4823],\n        [0.3778, 0.5088, 0.3948, 0.3113, 0.4789],\n        [0.3525, 0.5274, 0.3870, 0.3125, 0.4812],\n        [0.4003, 0.4881, 0.4063, 0.3072, 0.4720],\n        [0.3900, 0.4645, 0.3989, 0.3090, 0.4840],\n        [0.3837, 0.5263, 0.4049, 0.3078, 0.4650],\n        [0.4520, 0.4254, 0.4143, 0.2988, 0.4713],\n        [0.4086, 0.4661, 0.4045, 0.3076, 0.4783]...937, 0.3105, 0.4805],\n        [0.3936, 0.4950, 0.4022, 0.3090, 0.4749],\n        [0.3787, 0.5190, 0.4030, 0.3079, 0.4680],\n        [0.4016, 0.4834, 0.4055, 0.3075, 0.4738],\n        [0.3967, 0.4691, 0.3964, 0.3113, 0.4866],\n        [0.3787, 0.5146, 0.3943, 0.3114, 0.4779],\n        [0.3496, 0.5469, 0.3895, 0.3117, 0.4743],\n        [0.4353, 0.4422, 0.4142, 0.3009, 0.4702],\n        [0.4240, 0.4602, 0.4141, 0.3025, 0.4681],\n        [0.3938, 0.4923, 0.3968, 0.3112, 0.4810],\n        [0.3969, 0.4916, 0.4111, 0.3047, 0.4657],\n        [0.3538, 0.5456, 0.3928, 0.3106, 0.4714],\n        [0.3519, 0.5492, 0.3875, 0.3121, 0.4753],\n        [0.3658, 0.5044, 0.3897, 0.3122, 0.4842],\n        [0.3463, 0.5856, 0.3962, 0.3087, 0.4582],\n        [0.3772, 0.5254, 0.4008, 0.3090, 0.4691],\n        [0.4116, 0.4354, 0.4012, 0.3082, 0.4880],\n        [0.4123, 0.4431, 0.4049, 0.3066, 0.4823],\n        [0.3658, 0.5231, 0.3907, 0.3122, 0.4792],\n        [0.4100, 0.4594, 0.4044, 0.3074, 0.4797],\n        [0.3711, 0.5121, 0.3906, 0.3125, 0.4820],\n        [0.3674, 0.4874, 0.3853, 0.3141, 0.4927],\n        [0.4209, 0.4632, 0.4129, 0.3033, 0.4691],\n        [0.4079, 0.4764, 0.4133, 0.3036, 0.4665]], grad_fn=<ToCopyBackward0>), tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],\n        [0.9966, 0.9957, 0.9900, 0.9897, 0.9900],\n        [0.9954, 0.9946, 0.9869, 0.9867, 0.9871],\n        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],\n        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],\n        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],\n        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],\n        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],\n        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842]...922, 0.9919, 0.9923],\n        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],\n        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],\n        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],\n        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],\n        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],\n        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],\n        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],\n        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],\n        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],\n        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],\n        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],\n        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925]], grad_fn=<ToCopyBackward0>))
E        +    where <built-in method allclose of type object at 0x149690f38760> = torch.allclose

batch_size = 64
model      = Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
  (2): Linear(in_features=4, out_features=5, bias=True)
  (3): WithDevice(
    (_module): Sigmoid()
  )
)
pipe       = Pipe(
  (partitions): ModuleList(
    (0): Sequential(
      (0): Linear(in_features=3, out_features=4, bias=True)
   ...inear(in_features=4, out_features=5, bias=True)
      (1): WithDevice(
        (_module): Sigmoid()
      )
    )
  )
)
split_size = 16
x          = tensor([[-1.2462,  1.0237,  0.5051],
        [-1.2848, -0.4931, -1.1226],
        [ 0.0266,  1.4404, -0.3212],
       ... 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')
y0         = tensor([[0.4047, 0.4690, 0.4086, 0.3055, 0.4731],
        [0.4311, 0.4513, 0.4143, 0.3017, 0.4689],
        [0.3961, 0...[0.4209, 0.4632, 0.4129, 0.3033, 0.4691],
        [0.4079, 0.4764, 0.4133, 0.3036, 0.4665]], grad_fn=<ToCopyBackward0>)
y1         = tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0...[0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925]], grad_fn=<ToCopyBackward0>)

tests/test_pipeline.py:83: AssertionError
----------------------------- Captured stdout call -----------------------------
in init
ModuleList(
  (0): Sequential(
    (0): Linear(in_features=3, out_features=4, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
  (1): Sequential(
    (0): Linear(in_features=4, out_features=5, bias=True)
    (1): WithDevice(
      (_module): Sigmoid()
    )
  )
)
[device(type='cuda', index=0), device(type='cuda', index=1)]
before running the cycle
[tensor([[-1.2462,  1.0237,  0.5051],
        [-1.2848, -0.4931, -1.1226],
        [ 0.0266,  1.4404, -0.3212],
        [-1.8102, -0.5384,  1.3300],
        [-0.4120,  1.1510,  0.2346],
        [ 0.2633,  0.2613,  1.7773],
        [ 0.0558,  1.4854, -0.4546],
        [ 1.0963,  1.3920,  0.7814],
        [-2.2562,  0.3664,  0.4122],
        [ 0.2960, -0.9678,  0.9792],
        [ 0.2360, -0.1164,  0.0938],
        [-0.0492, -1.1047, -1.1031],
        [ 0.1211, -1.5376, -0.8654],
        [-1.1722,  0.4341, -0.2733],
        [ 0.1490, -0.6037,  1.0054],
        [ 0.5433, -1.9255,  0.9377]], device='cuda:0'), tensor([[ 1.2405, -0.6595,  0.0504],
        [ 0.5483, -0.4645,  0.1476],
        [ 0.7274,  0.9391,  1.8285],
        [-0.6545, -0.2466,  0.1054],
        [-0.2316,  1.9547,  0.3670],
        [-0.7169, -0.9159,  1.1337],
        [-0.7357, -1.5938, -3.1693],
        [-0.2154, -0.0756, -0.8550],
        [ 0.2471, -1.2881,  0.4377],
        [ 0.1717,  0.9408, -0.5001],
        [ 0.8197,  0.7262,  2.3114],
        [-0.0919,  1.9766,  0.4395],
        [ 0.0283,  0.5854,  0.4357],
        [-0.5063, -1.6784, -1.5042],
        [-0.6464, -0.6716, -0.2041],
        [ 0.4703, -2.2957,  0.8423]], device='cuda:0'), tensor([[ 0.8302,  0.6688, -2.2616],
        [-0.0061,  0.3697,  1.4749],
        [ 0.6652,  1.7070, -1.8921],
        [-0.4746, -1.1518,  0.3019],
        [ 1.1599, -0.1087,  1.3466],
        [-1.3808,  0.5677,  0.6277],
        [-1.9948,  0.4904,  1.2299],
        [ 0.9885,  0.2285, -0.1708],
        [ 0.0454,  1.2728,  1.3221],
        [-0.1418, -0.4985, -0.0659],
        [-0.8291,  0.1446,  1.6174],
        [-0.5096, -0.2200, -0.1295],
        [ 0.8112,  0.0579, -1.2569],
        [ 0.8399, -1.2259, -0.2576],
        [ 0.5122,  0.2445,  2.2632],
        [-1.2693, -0.3895, -1.4291]], device='cuda:0'), tensor([[-1.4212, -0.1973, -0.5206],
        [ 0.8732, -1.2989, -1.2003],
        [-1.7694,  0.9043,  1.5555],
        [ 0.0535,  0.2905,  2.4159],
        [ 1.3498, -1.1223,  1.1246],
        [ 0.6313,  0.9941,  0.9279],
        [-0.3124, -1.6906,  3.4025],
        [-0.3518, -0.5576,  1.1569],
        [ 0.4345,  1.5034, -1.7256],
        [-0.4152,  1.3234, -0.8632],
        [ 0.8735, -0.4711,  0.5811],
        [-0.2228,  0.2261, -0.9292],
        [ 1.0134, -0.4610,  0.0725],
        [ 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')]
====================
schedule for this step is
[(0, 0)]
inputting microbatch 0 into partition 0
before moving to cuda:0: tensor([[-1.2462,  1.0237,  0.5051],
        [-1.2848, -0.4931, -1.1226],
        [ 0.0266,  1.4404, -0.3212],
        [-1.8102, -0.5384,  1.3300],
        [-0.4120,  1.1510,  0.2346],
        [ 0.2633,  0.2613,  1.7773],
        [ 0.0558,  1.4854, -0.4546],
        [ 1.0963,  1.3920,  0.7814],
        [-2.2562,  0.3664,  0.4122],
        [ 0.2960, -0.9678,  0.9792],
        [ 0.2360, -0.1164,  0.0938],
        [-0.0492, -1.1047, -1.1031],
        [ 0.1211, -1.5376, -0.8654],
        [-1.1722,  0.4341, -0.2733],
        [ 0.1490, -0.6037,  1.0054],
        [ 0.5433, -1.9255,  0.9377]], device='cuda:0')
after: tensor([[-1.2462,  1.0237,  0.5051],
        [-1.2848, -0.4931, -1.1226],
        [ 0.0266,  1.4404, -0.3212],
        [-1.8102, -0.5384,  1.3300],
        [-0.4120,  1.1510,  0.2346],
        [ 0.2633,  0.2613,  1.7773],
        [ 0.0558,  1.4854, -0.4546],
        [ 1.0963,  1.3920,  0.7814],
        [-2.2562,  0.3664,  0.4122],
        [ 0.2960, -0.9678,  0.9792],
        [ 0.2360, -0.1164,  0.0938],
        [-0.0492, -1.1047, -1.1031],
        [ 0.1211, -1.5376, -0.8654],
        [-1.1722,  0.4341, -0.2733],
        [ 0.1490, -0.6037,  1.0054],
        [ 0.5433, -1.9255,  0.9377]], device='cuda:0')
********************
observing microbatch 0
current batch shape is torch.Size([16, 3])
batch is tensor([[-1.2462,  1.0237,  0.5051],
        [-1.2848, -0.4931, -1.1226],
        [ 0.0266,  1.4404, -0.3212],
        [-1.8102, -0.5384,  1.3300],
        [-0.4120,  1.1510,  0.2346],
        [ 0.2633,  0.2613,  1.7773],
        [ 0.0558,  1.4854, -0.4546],
        [ 1.0963,  1.3920,  0.7814],
        [-2.2562,  0.3664,  0.4122],
        [ 0.2960, -0.9678,  0.9792],
        [ 0.2360, -0.1164,  0.0938],
        [-0.0492, -1.1047, -1.1031],
        [ 0.1211, -1.5376, -0.8654],
        [-1.1722,  0.4341, -0.2733],
        [ 0.1490, -0.6037,  1.0054],
        [ 0.5433, -1.9255,  0.9377]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 0
********************
receiving microbatch 0 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 0, tensor([[0.3788, 0.3854, 0.6574, 0.3283],
        [0.3776, 0.5556, 0.6888, 0.2305],
        [0.2311, 0.3500, 0.5980, 0.3858],
        [0.6442, 0.4084, 0.5367, 0.4039],
        [0.3130, 0.3473, 0.5832, 0.3999],
        [0.5291, 0.2354, 0.2885, 0.6896],
        [0.2176, 0.3561, 0.6096, 0.3737],
        [0.2896, 0.2237, 0.3496, 0.6489],
        [0.4757, 0.4804, 0.7368, 0.2327],
        [0.5778, 0.3111, 0.2655, 0.6612],
        [0.4014, 0.3513, 0.4069, 0.5243],
        [0.3968, 0.4874, 0.4776, 0.3957],
        [0.4593, 0.4708, 0.3983, 0.4621],
        [0.3614, 0.4554, 0.6711, 0.2844],
        [0.5477, 0.3086, 0.3038, 0.6315],
        [0.6613, 0.3242, 0.1904, 0.7203]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.3788, 0.3854, 0.6574, 0.3283],
        [0.3776, 0.5556, 0.6888, 0.2305],
        [0.2311, 0.3500, 0.5980, 0.3858],
        [0.6442, 0.4084, 0.5367, 0.4039],
        [0.3130, 0.3473, 0.5832, 0.3999],
        [0.5291, 0.2354, 0.2885, 0.6896],
        [0.2176, 0.3561, 0.6096, 0.3737],
        [0.2896, 0.2237, 0.3496, 0.6489],
        [0.4757, 0.4804, 0.7368, 0.2327],
        [0.5778, 0.3111, 0.2655, 0.6612],
        [0.4014, 0.3513, 0.4069, 0.5243],
        [0.3968, 0.4874, 0.4776, 0.3957],
        [0.4593, 0.4708, 0.3983, 0.4621],
        [0.3614, 0.4554, 0.6711, 0.2844],
        [0.5477, 0.3086, 0.3038, 0.6315],
        [0.6613, 0.3242, 0.1904, 0.7203]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.3788, 0.3854, 0.6574, 0.3283],
        [0.3776, 0.5556, 0.6888, 0.2305],
        [0.2311, 0.3500, 0.5980, 0.3858],
        [0.6442, 0.4084, 0.5367, 0.4039],
        [0.3130, 0.3473, 0.5832, 0.3999],
        [0.5291, 0.2354, 0.2885, 0.6896],
        [0.2176, 0.3561, 0.6096, 0.3737],
        [0.2896, 0.2237, 0.3496, 0.6489],
        [0.4757, 0.4804, 0.7368, 0.2327],
        [0.5778, 0.3111, 0.2655, 0.6612],
        [0.4014, 0.3513, 0.4069, 0.5243],
        [0.3968, 0.4874, 0.4776, 0.3957],
        [0.4593, 0.4708, 0.3983, 0.4621],
        [0.3614, 0.4554, 0.6711, 0.2844],
        [0.5477, 0.3086, 0.3038, 0.6315],
        [0.6613, 0.3242, 0.1904, 0.7203]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.3788, 0.3854, 0.6574, 0.3283],
        [0.3776, 0.5556, 0.6888, 0.2305],
        [0.2311, 0.3500, 0.5980, 0.3858],
        [0.6442, 0.4084, 0.5367, 0.4039],
        [0.3130, 0.3473, 0.5832, 0.3999],
        [0.5291, 0.2354, 0.2885, 0.6896],
        [0.2176, 0.3561, 0.6096, 0.3737],
        [0.2896, 0.2237, 0.3496, 0.6489],
        [0.4757, 0.4804, 0.7368, 0.2327],
        [0.5778, 0.3111, 0.2655, 0.6612],
        [0.4014, 0.3513, 0.4069, 0.5243],
        [0.3968, 0.4874, 0.4776, 0.3957],
        [0.4593, 0.4708, 0.3983, 0.4621],
        [0.3614, 0.4554, 0.6711, 0.2844],
        [0.5477, 0.3086, 0.3038, 0.6315],
        [0.6613, 0.3242, 0.1904, 0.7203]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 1.2405, -0.6595,  0.0504],
        [ 0.5483, -0.4645,  0.1476],
        [ 0.7274,  0.9391,  1.8285],
        [-0.6545, -0.2466,  0.1054],
        [-0.2316,  1.9547,  0.3670],
        [-0.7169, -0.9159,  1.1337],
        [-0.7357, -1.5938, -3.1693],
        [-0.2154, -0.0756, -0.8550],
        [ 0.2471, -1.2881,  0.4377],
        [ 0.1717,  0.9408, -0.5001],
        [ 0.8197,  0.7262,  2.3114],
        [-0.0919,  1.9766,  0.4395],
        [ 0.0283,  0.5854,  0.4357],
        [-0.5063, -1.6784, -1.5042],
        [-0.6464, -0.6716, -0.2041],
        [ 0.4703, -2.2957,  0.8423]], device='cuda:0'), tensor([[ 0.8302,  0.6688, -2.2616],
        [-0.0061,  0.3697,  1.4749],
        [ 0.6652,  1.7070, -1.8921],
        [-0.4746, -1.1518,  0.3019],
        [ 1.1599, -0.1087,  1.3466],
        [-1.3808,  0.5677,  0.6277],
        [-1.9948,  0.4904,  1.2299],
        [ 0.9885,  0.2285, -0.1708],
        [ 0.0454,  1.2728,  1.3221],
        [-0.1418, -0.4985, -0.0659],
        [-0.8291,  0.1446,  1.6174],
        [-0.5096, -0.2200, -0.1295],
        [ 0.8112,  0.0579, -1.2569],
        [ 0.8399, -1.2259, -0.2576],
        [ 0.5122,  0.2445,  2.2632],
        [-1.2693, -0.3895, -1.4291]], device='cuda:0'), tensor([[-1.4212, -0.1973, -0.5206],
        [ 0.8732, -1.2989, -1.2003],
        [-1.7694,  0.9043,  1.5555],
        [ 0.0535,  0.2905,  2.4159],
        [ 1.3498, -1.1223,  1.1246],
        [ 0.6313,  0.9941,  0.9279],
        [-0.3124, -1.6906,  3.4025],
        [-0.3518, -0.5576,  1.1569],
        [ 0.4345,  1.5034, -1.7256],
        [-0.4152,  1.3234, -0.8632],
        [ 0.8735, -0.4711,  0.5811],
        [-0.2228,  0.2261, -0.9292],
        [ 1.0134, -0.4610,  0.0725],
        [ 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')]
====================
schedule for this step is
[(1, 0), (0, 1)]
inputting microbatch 1 into partition 0
before moving to cuda:0: tensor([[ 1.2405, -0.6595,  0.0504],
        [ 0.5483, -0.4645,  0.1476],
        [ 0.7274,  0.9391,  1.8285],
        [-0.6545, -0.2466,  0.1054],
        [-0.2316,  1.9547,  0.3670],
        [-0.7169, -0.9159,  1.1337],
        [-0.7357, -1.5938, -3.1693],
        [-0.2154, -0.0756, -0.8550],
        [ 0.2471, -1.2881,  0.4377],
        [ 0.1717,  0.9408, -0.5001],
        [ 0.8197,  0.7262,  2.3114],
        [-0.0919,  1.9766,  0.4395],
        [ 0.0283,  0.5854,  0.4357],
        [-0.5063, -1.6784, -1.5042],
        [-0.6464, -0.6716, -0.2041],
        [ 0.4703, -2.2957,  0.8423]], device='cuda:0')
after: tensor([[ 1.2405, -0.6595,  0.0504],
        [ 0.5483, -0.4645,  0.1476],
        [ 0.7274,  0.9391,  1.8285],
        [-0.6545, -0.2466,  0.1054],
        [-0.2316,  1.9547,  0.3670],
        [-0.7169, -0.9159,  1.1337],
        [-0.7357, -1.5938, -3.1693],
        [-0.2154, -0.0756, -0.8550],
        [ 0.2471, -1.2881,  0.4377],
        [ 0.1717,  0.9408, -0.5001],
        [ 0.8197,  0.7262,  2.3114],
        [-0.0919,  1.9766,  0.4395],
        [ 0.0283,  0.5854,  0.4357],
        [-0.5063, -1.6784, -1.5042],
        [-0.6464, -0.6716, -0.2041],
        [ 0.4703, -2.2957,  0.8423]], device='cuda:0')
********************
observing microbatch 1
current batch shape is torch.Size([16, 3])
batch is tensor([[ 1.2405, -0.6595,  0.0504],
        [ 0.5483, -0.4645,  0.1476],
        [ 0.7274,  0.9391,  1.8285],
        [-0.6545, -0.2466,  0.1054],
        [-0.2316,  1.9547,  0.3670],
        [-0.7169, -0.9159,  1.1337],
        [-0.7357, -1.5938, -3.1693],
        [-0.2154, -0.0756, -0.8550],
        [ 0.2471, -1.2881,  0.4377],
        [ 0.1717,  0.9408, -0.5001],
        [ 0.8197,  0.7262,  2.3114],
        [-0.0919,  1.9766,  0.4395],
        [ 0.0283,  0.5854,  0.4357],
        [-0.5063, -1.6784, -1.5042],
        [-0.6464, -0.6716, -0.2041],
        [ 0.4703, -2.2957,  0.8423]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 1
********************
inputting microbatch 0 into partition 1
before moving to cuda:1: tensor([[0.3788, 0.3854, 0.6574, 0.3283],
        [0.3776, 0.5556, 0.6888, 0.2305],
        [0.2311, 0.3500, 0.5980, 0.3858],
        [0.6442, 0.4084, 0.5367, 0.4039],
        [0.3130, 0.3473, 0.5832, 0.3999],
        [0.5291, 0.2354, 0.2885, 0.6896],
        [0.2176, 0.3561, 0.6096, 0.3737],
        [0.2896, 0.2237, 0.3496, 0.6489],
        [0.4757, 0.4804, 0.7368, 0.2327],
        [0.5778, 0.3111, 0.2655, 0.6612],
        [0.4014, 0.3513, 0.4069, 0.5243],
        [0.3968, 0.4874, 0.4776, 0.3957],
        [0.4593, 0.4708, 0.3983, 0.4621],
        [0.3614, 0.4554, 0.6711, 0.2844],
        [0.5477, 0.3086, 0.3038, 0.6315],
        [0.6613, 0.3242, 0.1904, 0.7203]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[-0.0000e+00, 1.8742e+00, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [1.4013e-44, 0.0000e+00, 1.5414e-44, 0.0000e+00],
        [1.6816e-44, 0.0000e+00, 1.8217e-44, 0.0000e+00],
        [1.9618e-44, 0.0000e+00, 2.1019e-44, 0.0000e+00],
        [2.2421e-44, 0.0000e+00, 2.3822e-44, 0.0000e+00],
        [2.5223e-44, 0.0000e+00, 2.6625e-44, 0.0000e+00],
        [2.8026e-44, 0.0000e+00, 2.9427e-44, 0.0000e+00],
        [3.0829e-44, 0.0000e+00, 3.2230e-44, 0.0000e+00],
        [3.3631e-44, 0.0000e+00, 3.5032e-44, 0.0000e+00],
        [3.6434e-44, 0.0000e+00, 3.7835e-44, 0.0000e+00],
        [3.9236e-44, 0.0000e+00, 4.0638e-44, 0.0000e+00],
        [4.2039e-44, 0.0000e+00, 4.3440e-44, 0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 0
current batch shape is torch.Size([16, 4])
batch is tensor([[-0.0000e+00, 1.8742e+00, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [2.3694e-38, 2.3694e-38, 2.3694e-38, 2.3694e-38],
        [1.4013e-44, 0.0000e+00, 1.5414e-44, 0.0000e+00],
        [1.6816e-44, 0.0000e+00, 1.8217e-44, 0.0000e+00],
        [1.9618e-44, 0.0000e+00, 2.1019e-44, 0.0000e+00],
        [2.2421e-44, 0.0000e+00, 2.3822e-44, 0.0000e+00],
        [2.5223e-44, 0.0000e+00, 2.6625e-44, 0.0000e+00],
        [2.8026e-44, 0.0000e+00, 2.9427e-44, 0.0000e+00],
        [3.0829e-44, 0.0000e+00, 3.2230e-44, 0.0000e+00],
        [3.3631e-44, 0.0000e+00, 3.5032e-44, 0.0000e+00],
        [3.6434e-44, 0.0000e+00, 3.7835e-44, 0.0000e+00],
        [3.9236e-44, 0.0000e+00, 4.0638e-44, 0.0000e+00],
        [4.2039e-44, 0.0000e+00, 4.3440e-44, 0.0000e+00]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 0
********************
receiving microbatch 1 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 1, tensor([[0.4162, 0.3074, 0.2519, 0.6713],
        [0.4312, 0.3376, 0.3360, 0.5864],
        [0.4444, 0.1970, 0.2773, 0.7227],
        [0.4493, 0.4123, 0.5166, 0.4114],
        [0.2491, 0.3059, 0.6098, 0.4049],
        [0.6245, 0.3618, 0.3770, 0.5448],
        [0.2805, 0.6957, 0.7122, 0.1633],
        [0.3246, 0.4489, 0.5600, 0.3595],
        [0.5595, 0.3594, 0.2910, 0.6118],
        [0.2530, 0.3672, 0.5556, 0.4058],
        [0.5124, 0.1749, 0.2212, 0.7789],
        [0.2488, 0.2926, 0.5865, 0.4302],
        [0.3706, 0.3219, 0.4590, 0.5045],
        [0.4339, 0.5666, 0.5317, 0.3202],
        [0.4629, 0.4475, 0.5102, 0.3966],
        [0.6899, 0.3453, 0.1838, 0.7164]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.4162, 0.3074, 0.2519, 0.6713],
        [0.4312, 0.3376, 0.3360, 0.5864],
        [0.4444, 0.1970, 0.2773, 0.7227],
        [0.4493, 0.4123, 0.5166, 0.4114],
        [0.2491, 0.3059, 0.6098, 0.4049],
        [0.6245, 0.3618, 0.3770, 0.5448],
        [0.2805, 0.6957, 0.7122, 0.1633],
        [0.3246, 0.4489, 0.5600, 0.3595],
        [0.5595, 0.3594, 0.2910, 0.6118],
        [0.2530, 0.3672, 0.5556, 0.4058],
        [0.5124, 0.1749, 0.2212, 0.7789],
        [0.2488, 0.2926, 0.5865, 0.4302],
        [0.3706, 0.3219, 0.4590, 0.5045],
        [0.4339, 0.5666, 0.5317, 0.3202],
        [0.4629, 0.4475, 0.5102, 0.3966],
        [0.6899, 0.3453, 0.1838, 0.7164]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4162, 0.3074, 0.2519, 0.6713],
        [0.4312, 0.3376, 0.3360, 0.5864],
        [0.4444, 0.1970, 0.2773, 0.7227],
        [0.4493, 0.4123, 0.5166, 0.4114],
        [0.2491, 0.3059, 0.6098, 0.4049],
        [0.6245, 0.3618, 0.3770, 0.5448],
        [0.2805, 0.6957, 0.7122, 0.1633],
        [0.3246, 0.4489, 0.5600, 0.3595],
        [0.5595, 0.3594, 0.2910, 0.6118],
        [0.2530, 0.3672, 0.5556, 0.4058],
        [0.5124, 0.1749, 0.2212, 0.7789],
        [0.2488, 0.2926, 0.5865, 0.4302],
        [0.3706, 0.3219, 0.4590, 0.5045],
        [0.4339, 0.5666, 0.5317, 0.3202],
        [0.4629, 0.4475, 0.5102, 0.3966],
        [0.6899, 0.3453, 0.1838, 0.7164]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 0 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 0, tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 0
result is tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4162, 0.3074, 0.2519, 0.6713],
        [0.4312, 0.3376, 0.3360, 0.5864],
        [0.4444, 0.1970, 0.2773, 0.7227],
        [0.4493, 0.4123, 0.5166, 0.4114],
        [0.2491, 0.3059, 0.6098, 0.4049],
        [0.6245, 0.3618, 0.3770, 0.5448],
        [0.2805, 0.6957, 0.7122, 0.1633],
        [0.3246, 0.4489, 0.5600, 0.3595],
        [0.5595, 0.3594, 0.2910, 0.6118],
        [0.2530, 0.3672, 0.5556, 0.4058],
        [0.5124, 0.1749, 0.2212, 0.7789],
        [0.2488, 0.2926, 0.5865, 0.4302],
        [0.3706, 0.3219, 0.4590, 0.5045],
        [0.4339, 0.5666, 0.5317, 0.3202],
        [0.4629, 0.4475, 0.5102, 0.3966],
        [0.6899, 0.3453, 0.1838, 0.7164]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[ 0.8302,  0.6688, -2.2616],
        [-0.0061,  0.3697,  1.4749],
        [ 0.6652,  1.7070, -1.8921],
        [-0.4746, -1.1518,  0.3019],
        [ 1.1599, -0.1087,  1.3466],
        [-1.3808,  0.5677,  0.6277],
        [-1.9948,  0.4904,  1.2299],
        [ 0.9885,  0.2285, -0.1708],
        [ 0.0454,  1.2728,  1.3221],
        [-0.1418, -0.4985, -0.0659],
        [-0.8291,  0.1446,  1.6174],
        [-0.5096, -0.2200, -0.1295],
        [ 0.8112,  0.0579, -1.2569],
        [ 0.8399, -1.2259, -0.2576],
        [ 0.5122,  0.2445,  2.2632],
        [-1.2693, -0.3895, -1.4291]], device='cuda:0'), tensor([[-1.4212, -0.1973, -0.5206],
        [ 0.8732, -1.2989, -1.2003],
        [-1.7694,  0.9043,  1.5555],
        [ 0.0535,  0.2905,  2.4159],
        [ 1.3498, -1.1223,  1.1246],
        [ 0.6313,  0.9941,  0.9279],
        [-0.3124, -1.6906,  3.4025],
        [-0.3518, -0.5576,  1.1569],
        [ 0.4345,  1.5034, -1.7256],
        [-0.4152,  1.3234, -0.8632],
        [ 0.8735, -0.4711,  0.5811],
        [-0.2228,  0.2261, -0.9292],
        [ 1.0134, -0.4610,  0.0725],
        [ 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')]
====================
schedule for this step is
[(2, 0), (1, 1)]
inputting microbatch 2 into partition 0
before moving to cuda:0: tensor([[ 0.8302,  0.6688, -2.2616],
        [-0.0061,  0.3697,  1.4749],
        [ 0.6652,  1.7070, -1.8921],
        [-0.4746, -1.1518,  0.3019],
        [ 1.1599, -0.1087,  1.3466],
        [-1.3808,  0.5677,  0.6277],
        [-1.9948,  0.4904,  1.2299],
        [ 0.9885,  0.2285, -0.1708],
        [ 0.0454,  1.2728,  1.3221],
        [-0.1418, -0.4985, -0.0659],
        [-0.8291,  0.1446,  1.6174],
        [-0.5096, -0.2200, -0.1295],
        [ 0.8112,  0.0579, -1.2569],
        [ 0.8399, -1.2259, -0.2576],
        [ 0.5122,  0.2445,  2.2632],
        [-1.2693, -0.3895, -1.4291]], device='cuda:0')
after: tensor([[ 0.8302,  0.6688, -2.2616],
        [-0.0061,  0.3697,  1.4749],
        [ 0.6652,  1.7070, -1.8921],
        [-0.4746, -1.1518,  0.3019],
        [ 1.1599, -0.1087,  1.3466],
        [-1.3808,  0.5677,  0.6277],
        [-1.9948,  0.4904,  1.2299],
        [ 0.9885,  0.2285, -0.1708],
        [ 0.0454,  1.2728,  1.3221],
        [-0.1418, -0.4985, -0.0659],
        [-0.8291,  0.1446,  1.6174],
        [-0.5096, -0.2200, -0.1295],
        [ 0.8112,  0.0579, -1.2569],
        [ 0.8399, -1.2259, -0.2576],
        [ 0.5122,  0.2445,  2.2632],
        [-1.2693, -0.3895, -1.4291]], device='cuda:0')
********************
observing microbatch 2
current batch shape is torch.Size([16, 3])
batch is tensor([[ 0.8302,  0.6688, -2.2616],
        [-0.0061,  0.3697,  1.4749],
        [ 0.6652,  1.7070, -1.8921],
        [-0.4746, -1.1518,  0.3019],
        [ 1.1599, -0.1087,  1.3466],
        [-1.3808,  0.5677,  0.6277],
        [-1.9948,  0.4904,  1.2299],
        [ 0.9885,  0.2285, -0.1708],
        [ 0.0454,  1.2728,  1.3221],
        [-0.1418, -0.4985, -0.0659],
        [-0.8291,  0.1446,  1.6174],
        [-0.5096, -0.2200, -0.1295],
        [ 0.8112,  0.0579, -1.2569],
        [ 0.8399, -1.2259, -0.2576],
        [ 0.5122,  0.2445,  2.2632],
        [-1.2693, -0.3895, -1.4291]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 2
********************
inputting microbatch 1 into partition 1
before moving to cuda:1: tensor([[0.4162, 0.3074, 0.2519, 0.6713],
        [0.4312, 0.3376, 0.3360, 0.5864],
        [0.4444, 0.1970, 0.2773, 0.7227],
        [0.4493, 0.4123, 0.5166, 0.4114],
        [0.2491, 0.3059, 0.6098, 0.4049],
        [0.6245, 0.3618, 0.3770, 0.5448],
        [0.2805, 0.6957, 0.7122, 0.1633],
        [0.3246, 0.4489, 0.5600, 0.3595],
        [0.5595, 0.3594, 0.2910, 0.6118],
        [0.2530, 0.3672, 0.5556, 0.4058],
        [0.5124, 0.1749, 0.2212, 0.7789],
        [0.2488, 0.2926, 0.5865, 0.4302],
        [0.3706, 0.3219, 0.4590, 0.5045],
        [0.4339, 0.5666, 0.5317, 0.3202],
        [0.4629, 0.4475, 0.5102, 0.3966],
        [0.6899, 0.3453, 0.1838, 0.7164]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[1.0842e-19, 1.8074e+00, 9.4456e-01, 9.4409e-01],
        [9.4381e-01, 8.8080e-01, 8.6519e-01, 7.2967e-01],
        [7.2968e-01, 7.2966e-01, 8.8080e-01, 8.6519e-01],
        [7.2967e-01, 7.2968e-01, 7.2966e-01, 8.8080e-01],
        [8.6519e-01, 7.2967e-01, 7.2968e-01, 7.2966e-01],
        [8.8080e-01, 8.6519e-01, 7.2967e-01, 7.2968e-01],
        [7.2966e-01, 8.8080e-01, 8.6519e-01, 7.2967e-01],
        [7.2968e-01, 7.2966e-01, 8.8080e-01, 8.6519e-01],
        [7.2967e-01, 7.2968e-01, 7.2966e-01, 8.8080e-01],
        [8.6519e-01, 7.2967e-01, 7.2968e-01, 7.2966e-01],
        [8.8080e-01, 8.6519e-01, 7.2967e-01, 7.2968e-01],
        [7.2966e-01, 8.8080e-01, 8.6519e-01, 7.2967e-01],
        [7.2968e-01, 7.2966e-01, 8.8080e-01, 8.6519e-01],
        [7.2967e-01, 7.2968e-01, 7.2966e-01, 8.8080e-01],
        [8.6519e-01, 7.2967e-01, 7.2968e-01, 7.2966e-01],
        [8.8080e-01, 8.6519e-01, 7.2967e-01, 7.2968e-01]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 1
current batch shape is torch.Size([16, 4])
batch is tensor([[1.0842e-19, 1.8074e+00, 9.4456e-01, 9.4409e-01],
        [9.4381e-01, 8.8080e-01, 8.6519e-01, 7.2967e-01],
        [7.2968e-01, 7.2966e-01, 8.8080e-01, 8.6519e-01],
        [7.2967e-01, 7.2968e-01, 7.2966e-01, 8.8080e-01],
        [8.6519e-01, 7.2967e-01, 7.2968e-01, 7.2966e-01],
        [8.8080e-01, 8.6519e-01, 7.2967e-01, 7.2968e-01],
        [7.2966e-01, 8.8080e-01, 8.6519e-01, 7.2967e-01],
        [7.2968e-01, 7.2966e-01, 8.8080e-01, 8.6519e-01],
        [7.2967e-01, 7.2968e-01, 7.2966e-01, 8.8080e-01],
        [8.6519e-01, 7.2967e-01, 7.2968e-01, 7.2966e-01],
        [8.8080e-01, 8.6519e-01, 7.2967e-01, 7.2968e-01],
        [7.2966e-01, 8.8080e-01, 8.6519e-01, 7.2967e-01],
        [7.2968e-01, 7.2966e-01, 8.8080e-01, 8.6519e-01],
        [7.2967e-01, 7.2968e-01, 7.2966e-01, 8.8080e-01],
        [8.6519e-01, 7.2967e-01, 7.2968e-01, 7.2966e-01],
        [8.8080e-01, 8.6519e-01, 7.2967e-01, 7.2968e-01]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 1
********************
receiving microbatch 2 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 2, tensor([[0.1442, 0.4605, 0.6072, 0.3178],
        [0.4972, 0.2641, 0.3530, 0.6223],
        [0.1141, 0.4130, 0.6732, 0.2964],
        [0.5587, 0.4125, 0.4016, 0.4951],
        [0.4909, 0.2226, 0.2054, 0.7604],
        [0.4429, 0.3987, 0.6300, 0.3415],
        [0.5352, 0.3979, 0.6499, 0.3301],
        [0.3166, 0.3135, 0.3590, 0.5814],
        [0.3853, 0.2492, 0.4293, 0.5759],
        [0.4394, 0.3980, 0.4421, 0.4715],
        [0.5667, 0.3073, 0.4306, 0.5387],
        [0.4177, 0.4191, 0.5209, 0.4040],
        [0.2480, 0.4052, 0.4677, 0.4445],
        [0.4601, 0.3685, 0.2819, 0.6120],
        [0.5702, 0.1990, 0.2266, 0.7600],
        [0.3384, 0.5743, 0.7180, 0.2057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.1442, 0.4605, 0.6072, 0.3178],
        [0.4972, 0.2641, 0.3530, 0.6223],
        [0.1141, 0.4130, 0.6732, 0.2964],
        [0.5587, 0.4125, 0.4016, 0.4951],
        [0.4909, 0.2226, 0.2054, 0.7604],
        [0.4429, 0.3987, 0.6300, 0.3415],
        [0.5352, 0.3979, 0.6499, 0.3301],
        [0.3166, 0.3135, 0.3590, 0.5814],
        [0.3853, 0.2492, 0.4293, 0.5759],
        [0.4394, 0.3980, 0.4421, 0.4715],
        [0.5667, 0.3073, 0.4306, 0.5387],
        [0.4177, 0.4191, 0.5209, 0.4040],
        [0.2480, 0.4052, 0.4677, 0.4445],
        [0.4601, 0.3685, 0.2819, 0.6120],
        [0.5702, 0.1990, 0.2266, 0.7600],
        [0.3384, 0.5743, 0.7180, 0.2057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.1442, 0.4605, 0.6072, 0.3178],
        [0.4972, 0.2641, 0.3530, 0.6223],
        [0.1141, 0.4130, 0.6732, 0.2964],
        [0.5587, 0.4125, 0.4016, 0.4951],
        [0.4909, 0.2226, 0.2054, 0.7604],
        [0.4429, 0.3987, 0.6300, 0.3415],
        [0.5352, 0.3979, 0.6499, 0.3301],
        [0.3166, 0.3135, 0.3590, 0.5814],
        [0.3853, 0.2492, 0.4293, 0.5759],
        [0.4394, 0.3980, 0.4421, 0.4715],
        [0.5667, 0.3073, 0.4306, 0.5387],
        [0.4177, 0.4191, 0.5209, 0.4040],
        [0.2480, 0.4052, 0.4677, 0.4445],
        [0.4601, 0.3685, 0.2819, 0.6120],
        [0.5702, 0.1990, 0.2266, 0.7600],
        [0.3384, 0.5743, 0.7180, 0.2057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 1 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 1, tensor([[0.9966, 0.9957, 0.9900, 0.9897, 0.9900],
        [0.9954, 0.9946, 0.9869, 0.9867, 0.9871],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 1
result is tensor([[0.9966, 0.9957, 0.9900, 0.9897, 0.9900],
        [0.9954, 0.9946, 0.9869, 0.9867, 0.9871],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9966, 0.9957, 0.9900, 0.9897, 0.9900],
        [0.9954, 0.9946, 0.9869, 0.9867, 0.9871],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9966, 0.9957, 0.9900, 0.9897, 0.9900],
        [0.9954, 0.9946, 0.9869, 0.9867, 0.9871],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.1442, 0.4605, 0.6072, 0.3178],
        [0.4972, 0.2641, 0.3530, 0.6223],
        [0.1141, 0.4130, 0.6732, 0.2964],
        [0.5587, 0.4125, 0.4016, 0.4951],
        [0.4909, 0.2226, 0.2054, 0.7604],
        [0.4429, 0.3987, 0.6300, 0.3415],
        [0.5352, 0.3979, 0.6499, 0.3301],
        [0.3166, 0.3135, 0.3590, 0.5814],
        [0.3853, 0.2492, 0.4293, 0.5759],
        [0.4394, 0.3980, 0.4421, 0.4715],
        [0.5667, 0.3073, 0.4306, 0.5387],
        [0.4177, 0.4191, 0.5209, 0.4040],
        [0.2480, 0.4052, 0.4677, 0.4445],
        [0.4601, 0.3685, 0.2819, 0.6120],
        [0.5702, 0.1990, 0.2266, 0.7600],
        [0.3384, 0.5743, 0.7180, 0.2057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>), tensor([[-1.4212, -0.1973, -0.5206],
        [ 0.8732, -1.2989, -1.2003],
        [-1.7694,  0.9043,  1.5555],
        [ 0.0535,  0.2905,  2.4159],
        [ 1.3498, -1.1223,  1.1246],
        [ 0.6313,  0.9941,  0.9279],
        [-0.3124, -1.6906,  3.4025],
        [-0.3518, -0.5576,  1.1569],
        [ 0.4345,  1.5034, -1.7256],
        [-0.4152,  1.3234, -0.8632],
        [ 0.8735, -0.4711,  0.5811],
        [-0.2228,  0.2261, -0.9292],
        [ 1.0134, -0.4610,  0.0725],
        [ 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')]
====================
schedule for this step is
[(3, 0), (2, 1)]
inputting microbatch 3 into partition 0
before moving to cuda:0: tensor([[-1.4212, -0.1973, -0.5206],
        [ 0.8732, -1.2989, -1.2003],
        [-1.7694,  0.9043,  1.5555],
        [ 0.0535,  0.2905,  2.4159],
        [ 1.3498, -1.1223,  1.1246],
        [ 0.6313,  0.9941,  0.9279],
        [-0.3124, -1.6906,  3.4025],
        [-0.3518, -0.5576,  1.1569],
        [ 0.4345,  1.5034, -1.7256],
        [-0.4152,  1.3234, -0.8632],
        [ 0.8735, -0.4711,  0.5811],
        [-0.2228,  0.2261, -0.9292],
        [ 1.0134, -0.4610,  0.0725],
        [ 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')
after: tensor([[-1.4212, -0.1973, -0.5206],
        [ 0.8732, -1.2989, -1.2003],
        [-1.7694,  0.9043,  1.5555],
        [ 0.0535,  0.2905,  2.4159],
        [ 1.3498, -1.1223,  1.1246],
        [ 0.6313,  0.9941,  0.9279],
        [-0.3124, -1.6906,  3.4025],
        [-0.3518, -0.5576,  1.1569],
        [ 0.4345,  1.5034, -1.7256],
        [-0.4152,  1.3234, -0.8632],
        [ 0.8735, -0.4711,  0.5811],
        [-0.2228,  0.2261, -0.9292],
        [ 1.0134, -0.4610,  0.0725],
        [ 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')
********************
observing microbatch 3
current batch shape is torch.Size([16, 3])
batch is tensor([[-1.4212, -0.1973, -0.5206],
        [ 0.8732, -1.2989, -1.2003],
        [-1.7694,  0.9043,  1.5555],
        [ 0.0535,  0.2905,  2.4159],
        [ 1.3498, -1.1223,  1.1246],
        [ 0.6313,  0.9941,  0.9279],
        [-0.3124, -1.6906,  3.4025],
        [-0.3518, -0.5576,  1.1569],
        [ 0.4345,  1.5034, -1.7256],
        [-0.4152,  1.3234, -0.8632],
        [ 0.8735, -0.4711,  0.5811],
        [-0.2228,  0.2261, -0.9292],
        [ 1.0134, -0.4610,  0.0725],
        [ 1.4437,  1.3187, -0.0476],
        [-1.2707, -0.2032, -0.4856],
        [-1.8496,  0.8092,  0.9468]], device='cuda:0')
about to be put into Sequential(
  (0): Linear(in_features=3, out_features=4, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:0
task is partition: 0 microbatch: 3
********************
inputting microbatch 2 into partition 1
before moving to cuda:1: tensor([[0.1442, 0.4605, 0.6072, 0.3178],
        [0.4972, 0.2641, 0.3530, 0.6223],
        [0.1141, 0.4130, 0.6732, 0.2964],
        [0.5587, 0.4125, 0.4016, 0.4951],
        [0.4909, 0.2226, 0.2054, 0.7604],
        [0.4429, 0.3987, 0.6300, 0.3415],
        [0.5352, 0.3979, 0.6499, 0.3301],
        [0.3166, 0.3135, 0.3590, 0.5814],
        [0.3853, 0.2492, 0.4293, 0.5759],
        [0.4394, 0.3980, 0.4421, 0.4715],
        [0.5667, 0.3073, 0.4306, 0.5387],
        [0.4177, 0.4191, 0.5209, 0.4040],
        [0.2480, 0.4052, 0.4677, 0.4445],
        [0.4601, 0.3685, 0.2819, 0.6120],
        [0.5702, 0.1990, 0.2266, 0.7600],
        [0.3384, 0.5743, 0.7180, 0.2057]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[0.9966, 0.9957, 0.9900, 0.9897],
        [0.9900, 0.9954, 0.9946, 0.9869],
        [0.9867, 0.9871, 0.9944, 0.9933],
        [0.9839, 0.9836, 0.9842, 0.9936],
        [0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811],
        [0.9817, 0.9944, 0.9933, 0.9840],
        [0.9837, 0.9842, 0.9944, 0.9933],
        [0.9839, 0.9837, 0.9842, 0.9944],
        [0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813],
        [0.9820, 0.9935, 0.9923, 0.9815],
        [0.9811, 0.9817, 0.9944, 0.9933],
        [0.9840, 0.9837, 0.9842, 0.9944],
        [0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 2
current batch shape is torch.Size([16, 4])
batch is tensor([[0.9966, 0.9957, 0.9900, 0.9897],
        [0.9900, 0.9954, 0.9946, 0.9869],
        [0.9867, 0.9871, 0.9944, 0.9933],
        [0.9839, 0.9836, 0.9842, 0.9936],
        [0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811],
        [0.9817, 0.9944, 0.9933, 0.9840],
        [0.9837, 0.9842, 0.9944, 0.9933],
        [0.9839, 0.9837, 0.9842, 0.9944],
        [0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813],
        [0.9820, 0.9935, 0.9923, 0.9815],
        [0.9811, 0.9817, 0.9944, 0.9933],
        [0.9840, 0.9837, 0.9842, 0.9944],
        [0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 2
********************
receiving microbatch 3 from partition 0
getting result from out queue
status True result (partition: 0 microbatch: 3, tensor([[0.4106, 0.5105, 0.6768, 0.2571],
        [0.3739, 0.4371, 0.3491, 0.5164],
        [0.5154, 0.3484, 0.6239, 0.3750],
        [0.5975, 0.2112, 0.2655, 0.7240],
        [0.5691, 0.2474, 0.1543, 0.7909],
        [0.3550, 0.2476, 0.3661, 0.6213],
        [0.8452, 0.2185, 0.1386, 0.8237],
        [0.5767, 0.3275, 0.3553, 0.5811],
        [0.1347, 0.4223, 0.6728, 0.2930],
        [0.2135, 0.4212, 0.6912, 0.2837],
        [0.4631, 0.2901, 0.2640, 0.6726],
        [0.2909, 0.4459, 0.5916, 0.3395],
        [0.4062, 0.3142, 0.2875, 0.6381],
        [0.2218, 0.2535, 0.3719, 0.6095],
        [0.4091, 0.4976, 0.6550, 0.2763],
        [0.4670, 0.3995, 0.6788, 0.3080]], device='cuda:0',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.4106, 0.5105, 0.6768, 0.2571],
        [0.3739, 0.4371, 0.3491, 0.5164],
        [0.5154, 0.3484, 0.6239, 0.3750],
        [0.5975, 0.2112, 0.2655, 0.7240],
        [0.5691, 0.2474, 0.1543, 0.7909],
        [0.3550, 0.2476, 0.3661, 0.6213],
        [0.8452, 0.2185, 0.1386, 0.8237],
        [0.5767, 0.3275, 0.3553, 0.5811],
        [0.1347, 0.4223, 0.6728, 0.2930],
        [0.2135, 0.4212, 0.6912, 0.2837],
        [0.4631, 0.2901, 0.2640, 0.6726],
        [0.2909, 0.4459, 0.5916, 0.3395],
        [0.4062, 0.3142, 0.2875, 0.6381],
        [0.2218, 0.2535, 0.3719, 0.6095],
        [0.4091, 0.4976, 0.6550, 0.2763],
        [0.4670, 0.3995, 0.6788, 0.3080]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.4106, 0.5105, 0.6768, 0.2571],
        [0.3739, 0.4371, 0.3491, 0.5164],
        [0.5154, 0.3484, 0.6239, 0.3750],
        [0.5975, 0.2112, 0.2655, 0.7240],
        [0.5691, 0.2474, 0.1543, 0.7909],
        [0.3550, 0.2476, 0.3661, 0.6213],
        [0.8452, 0.2185, 0.1386, 0.8237],
        [0.5767, 0.3275, 0.3553, 0.5811],
        [0.1347, 0.4223, 0.6728, 0.2930],
        [0.2135, 0.4212, 0.6912, 0.2837],
        [0.4631, 0.2901, 0.2640, 0.6726],
        [0.2909, 0.4459, 0.5916, 0.3395],
        [0.4062, 0.3142, 0.2875, 0.6381],
        [0.2218, 0.2535, 0.3719, 0.6095],
        [0.4091, 0.4976, 0.6550, 0.2763],
        [0.4670, 0.3995, 0.6788, 0.3080]], device='cuda:0',
       grad_fn=<SigmoidBackward0>).shape
********************
receiving microbatch 2 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 2, tensor([[0.9974, 0.9968, 0.9923, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9967, 0.9921, 0.9919, 0.9922],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 2
result is tensor([[0.9974, 0.9968, 0.9923, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9967, 0.9921, 0.9919, 0.9922],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.9974, 0.9968, 0.9923, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9967, 0.9921, 0.9919, 0.9922],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9966, 0.9957, 0.9900, 0.9897, 0.9900],
        [0.9954, 0.9946, 0.9869, 0.9867, 0.9871],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9974, 0.9968, 0.9923, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9967, 0.9921, 0.9919, 0.9922],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.4106, 0.5105, 0.6768, 0.2571],
        [0.3739, 0.4371, 0.3491, 0.5164],
        [0.5154, 0.3484, 0.6239, 0.3750],
        [0.5975, 0.2112, 0.2655, 0.7240],
        [0.5691, 0.2474, 0.1543, 0.7909],
        [0.3550, 0.2476, 0.3661, 0.6213],
        [0.8452, 0.2185, 0.1386, 0.8237],
        [0.5767, 0.3275, 0.3553, 0.5811],
        [0.1347, 0.4223, 0.6728, 0.2930],
        [0.2135, 0.4212, 0.6912, 0.2837],
        [0.4631, 0.2901, 0.2640, 0.6726],
        [0.2909, 0.4459, 0.5916, 0.3395],
        [0.4062, 0.3142, 0.2875, 0.6381],
        [0.2218, 0.2535, 0.3719, 0.6095],
        [0.4091, 0.4976, 0.6550, 0.2763],
        [0.4670, 0.3995, 0.6788, 0.3080]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)]
====================
schedule for this step is
[(3, 1)]
inputting microbatch 3 into partition 1
before moving to cuda:1: tensor([[0.4106, 0.5105, 0.6768, 0.2571],
        [0.3739, 0.4371, 0.3491, 0.5164],
        [0.5154, 0.3484, 0.6239, 0.3750],
        [0.5975, 0.2112, 0.2655, 0.7240],
        [0.5691, 0.2474, 0.1543, 0.7909],
        [0.3550, 0.2476, 0.3661, 0.6213],
        [0.8452, 0.2185, 0.1386, 0.8237],
        [0.5767, 0.3275, 0.3553, 0.5811],
        [0.1347, 0.4223, 0.6728, 0.2930],
        [0.2135, 0.4212, 0.6912, 0.2837],
        [0.4631, 0.2901, 0.2640, 0.6726],
        [0.2909, 0.4459, 0.5916, 0.3395],
        [0.4062, 0.3142, 0.2875, 0.6381],
        [0.2218, 0.2535, 0.3719, 0.6095],
        [0.4091, 0.4976, 0.6550, 0.2763],
        [0.4670, 0.3995, 0.6788, 0.3080]], device='cuda:0',
       grad_fn=<SigmoidBackward0>)
after: tensor([[-3.6893e+19,  1.8730e+00,  9.9235e-01,  9.9213e-01],
        [ 9.9246e-01,  9.9735e-01,  9.9683e-01,  9.9231e-01],
        [ 9.9210e-01,  9.9243e-01,  9.9734e-01,  9.9681e-01],
        [ 9.9227e-01,  9.9205e-01,  9.9239e-01,  9.9729e-01],
        [ 9.9676e-01,  9.9215e-01,  9.9192e-01,  9.9226e-01],
        [ 9.9727e-01,  9.9674e-01,  9.9209e-01,  9.9187e-01],
        [ 9.9221e-01,  9.9730e-01,  9.9677e-01,  9.9217e-01],
        [ 9.9195e-01,  9.9229e-01,  9.9732e-01,  9.9679e-01],
        [ 9.9221e-01,  9.9199e-01,  9.9233e-01,  9.9732e-01],
        [ 9.9679e-01,  9.9222e-01,  9.9200e-01,  9.9234e-01],
        [ 9.9730e-01,  9.9676e-01,  9.9215e-01,  9.9193e-01],
        [ 9.9227e-01,  9.9729e-01,  9.9676e-01,  9.9214e-01],
        [ 9.9193e-01,  9.9226e-01,  9.9730e-01,  9.9677e-01],
        [ 9.9218e-01,  9.9196e-01,  9.9229e-01,  9.9730e-01],
        [ 9.9677e-01,  9.9217e-01,  9.9196e-01,  9.9229e-01],
        [ 9.9731e-01,  9.9678e-01,  9.9218e-01,  9.9197e-01]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
********************
observing microbatch 3
current batch shape is torch.Size([16, 4])
batch is tensor([[-3.6893e+19,  1.8730e+00,  9.9235e-01,  9.9213e-01],
        [ 9.9246e-01,  9.9735e-01,  9.9683e-01,  9.9231e-01],
        [ 9.9210e-01,  9.9243e-01,  9.9734e-01,  9.9681e-01],
        [ 9.9227e-01,  9.9205e-01,  9.9239e-01,  9.9729e-01],
        [ 9.9676e-01,  9.9215e-01,  9.9192e-01,  9.9226e-01],
        [ 9.9727e-01,  9.9674e-01,  9.9209e-01,  9.9187e-01],
        [ 9.9221e-01,  9.9730e-01,  9.9677e-01,  9.9217e-01],
        [ 9.9195e-01,  9.9229e-01,  9.9732e-01,  9.9679e-01],
        [ 9.9221e-01,  9.9199e-01,  9.9233e-01,  9.9732e-01],
        [ 9.9679e-01,  9.9222e-01,  9.9200e-01,  9.9234e-01],
        [ 9.9730e-01,  9.9676e-01,  9.9215e-01,  9.9193e-01],
        [ 9.9227e-01,  9.9729e-01,  9.9676e-01,  9.9214e-01],
        [ 9.9193e-01,  9.9226e-01,  9.9730e-01,  9.9677e-01],
        [ 9.9218e-01,  9.9196e-01,  9.9229e-01,  9.9730e-01],
        [ 9.9677e-01,  9.9217e-01,  9.9196e-01,  9.9229e-01],
        [ 9.9731e-01,  9.9678e-01,  9.9218e-01,  9.9197e-01]], device='cuda:1',
       grad_fn=<ToCopyBackward0>)
about to be put into Sequential(
  (0): Linear(in_features=4, out_features=5, bias=True)
  (1): WithDevice(
    (_module): Sigmoid()
  )
) on device cuda:1
task is partition: 1 microbatch: 3
********************
receiving microbatch 3 from partition 1
getting result from out queue
status True result (partition: 1 microbatch: 3, tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925]], device='cuda:1',
       grad_fn=<SigmoidBackward0>))
********************
observing microbatch 3
result is tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)
result shape is tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925]], device='cuda:1',
       grad_fn=<SigmoidBackward0>).shape
********************
step complete
====================
what batches looks like now
[tensor([[0.9795, 0.9747, 0.9446, 0.9441, 0.9438],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297],
        [0.8808, 0.8652, 0.7297, 0.7297, 0.7297]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9966, 0.9957, 0.9900, 0.9897, 0.9900],
        [0.9954, 0.9946, 0.9869, 0.9867, 0.9871],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9837, 0.9842],
        [0.9944, 0.9933, 0.9839, 0.9836, 0.9842],
        [0.9936, 0.9924, 0.9818, 0.9813, 0.9820],
        [0.9935, 0.9923, 0.9815, 0.9811, 0.9817],
        [0.9944, 0.9933, 0.9840, 0.9837, 0.9842]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.9974, 0.9968, 0.9923, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9923, 0.9921, 0.9924],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9967, 0.9921, 0.9919, 0.9922],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9921, 0.9919, 0.9923],
        [0.9973, 0.9968, 0.9922, 0.9920, 0.9923]], device='cuda:1',
       grad_fn=<SigmoidBackward0>), tensor([[0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9968, 0.9924, 0.9921, 0.9925],
        [0.9974, 0.9969, 0.9924, 0.9922, 0.9925]], device='cuda:1',
       grad_fn=<SigmoidBackward0>)]
finished running cycle
=============================== warnings summary ===============================
tests/test_pipeline.py::test_forward_0[1-1]
  /home/abcheng/miniconda3/envs/hw4/lib/python3.9/site-packages/torch/nn/modules/linear.py:116: UserWarning: Attempting to run cuBLAS, but there was no current CUDA context! Attempting to set the primary context... (Triggered internally at ../aten/src/ATen/cuda/CublasHandlePool.cpp:135.)
    return F.linear(input, self.weight, self.bias)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_pipeline.py::test_forward_0[1-1] - assert False
FAILED tests/test_pipeline.py::test_forward_0[1-16] - assert False
FAILED tests/test_pipeline.py::test_forward_0[1-32] - assert False
FAILED tests/test_pipeline.py::test_forward_0[1-64] - assert False
FAILED tests/test_pipeline.py::test_forward_0[2-1] - assert False
FAILED tests/test_pipeline.py::test_forward_0[2-16] - assert False
FAILED tests/test_pipeline.py::test_forward_0[2-32] - assert False
FAILED tests/test_pipeline.py::test_forward_0[2-64] - assert False
FAILED tests/test_pipeline.py::test_forward_0[4-1] - assert False
FAILED tests/test_pipeline.py::test_forward_0[4-16] - assert False
FAILED tests/test_pipeline.py::test_forward_0[4-32] - assert False
FAILED tests/test_pipeline.py::test_forward_0[4-64] - assert False
FAILED tests/test_pipeline.py::test_forward_0[8-1] - assert False
FAILED tests/test_pipeline.py::test_forward_0[8-16] - assert False
FAILED tests/test_pipeline.py::test_forward_0[8-32] - assert False
FAILED tests/test_pipeline.py::test_forward_0[8-64] - assert False
FAILED tests/test_pipeline.py::test_forward_0[16-1] - assert False
FAILED tests/test_pipeline.py::test_forward_0[16-16] - assert False
FAILED tests/test_pipeline.py::test_forward_0[16-32] - assert False
FAILED tests/test_pipeline.py::test_forward_0[16-64] - assert False
================ 20 failed, 14 deselected, 1 warning in 19.69s =================
